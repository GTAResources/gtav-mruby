// not generating ENTITY::GET_ENTITY_SCRIPT - {:return_type=>"char*", :arguments=>[{:type=>"Entity", :name=>"entity"}, {:type=>"Any*", :name=>"script"}]}
// not generating ENTITY::PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"p0"}, {:type=>"float", :name=>"p1"}, {:type=>"float", :name=>"p2"}, {:type=>"float", :name=>"p3"}, {:type=>"Any", :name=>"p4"}, {:type=>"Any", :name=>"p5"}, {:type=>"Any*", :name=>"p6"}, {:type=>"Any*", :name=>"p7"}, {:type=>"float", :name=>"p8"}, {:type=>"float", :name=>"p9"}, {:type=>"Any", :name=>"p10"}, {:type=>"float", :name=>"p11"}]}
// not generating ENTITY::FIND_ANIM_EVENT_PHASE - {:return_type=>"BOOL", :arguments=>[{:type=>"char*", :name=>"animDictionary"}, {:type=>"char*", :name=>"animName"}, {:type=>"char*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}]}
// not generating PED::GET_PED_PARACHUTE_TINT_INDEX - {:return_type=>"void", :arguments=>[{:type=>"Ped", :name=>"ped"}, {:type=>"Any*", :name=>"outTintIndex"}]}
// not generating PED::ADD_RELATIONSHIP_GROUP - {:return_type=>"Any", :arguments=>[{:type=>"char*", :name=>"name"}, {:type=>"Hash*", :name=>"groupHash"}]}
// not generating PED::SET_PED_ALTERNATE_WALK_ANIM - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"float", :name=>"p3"}, {:type=>"BOOL", :name=>"p4"}]}
// not generating PED::SET_PED_GESTURE_GROUP - {:return_type=>"void", :arguments=>[{:type=>"Ped", :name=>"ped"}, {:type=>"Any*", :name=>"p1"}]}
// not generating PED::GET_ANIM_INITIAL_OFFSET_POSITION - {:return_type=>"Vector3", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"float", :name=>"p2"}, {:type=>"float", :name=>"p3"}, {:type=>"float", :name=>"p4"}, {:type=>"float", :name=>"p5"}, {:type=>"float", :name=>"p6"}, {:type=>"float", :name=>"p7"}, {:type=>"float", :name=>"p8"}, {:type=>"Any", :name=>"p9"}]}
// not generating PED::GET_ANIM_INITIAL_OFFSET_ROTATION - {:return_type=>"Vector3", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"float", :name=>"p2"}, {:type=>"float", :name=>"p3"}, {:type=>"float", :name=>"p4"}, {:type=>"float", :name=>"p5"}, {:type=>"float", :name=>"p6"}, {:type=>"float", :name=>"p7"}, {:type=>"float", :name=>"p8"}, {:type=>"Any", :name=>"p9"}]}
// not generating PED::_0x9E30E91FB03A2CAF - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating PED::_GET_PED_HEAD_BLEND_DATA - {:return_type=>"BOOL", :arguments=>[{:type=>"Ped", :name=>"ped"}, {:type=>"Any*", :name=>"headBlendData"}]}
// not generating PED::_0x4852FC386E2E1BB5 - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating PED::_0x013E5CFC38CD5387 - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating PED::GET_CLOSEST_PED - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"float", :name=>"radius"}, {:type=>"BOOL", :name=>"p4"}, {:type=>"BOOL", :name=>"p5"}, {:type=>"Ped*", :name=>"outPed"}, {:type=>"BOOL", :name=>"p7"}, {:type=>"BOOL", :name=>"p8"}, {:type=>"int", :name=>"pedType"}]}
// not generating PED::APPLY_PED_BLOOD_BY_ZONE - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"float", :name=>"p2"}, {:type=>"float", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}]}
// not generating PED::APPLY_PED_BLOOD_SPECIFIC - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"float", :name=>"p2"}, {:type=>"float", :name=>"p3"}, {:type=>"float", :name=>"p4"}, {:type=>"float", :name=>"p5"}, {:type=>"Any", :name=>"p6"}, {:type=>"float", :name=>"p7"}, {:type=>"Any*", :name=>"p8"}]}
// not generating PED::SET_FACIAL_IDLE_ANIM_OVERRIDE - {:return_type=>"void", :arguments=>[{:type=>"Ped", :name=>"ped"}, {:type=>"char*", :name=>"facialAnim"}, {:type=>"Any*", :name=>"p2"}]}
// not generating PED::_0x9C6A6C19B6C0C496 - {:return_type=>"BOOL", :arguments=>[{:type=>"Ped", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating PED::_0xF60165E1D2C5370B - {:return_type=>"BOOL", :arguments=>[{:type=>"Ped", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating PED::GET_PED_NEARBY_VEHICLES - {:return_type=>"int", :arguments=>[{:type=>"Ped", :name=>"ped"}, {:type=>"int*", :name=>"sizeAndVehs"}]}
// not generating PED::GET_PED_NEARBY_PEDS - {:return_type=>"int", :arguments=>[{:type=>"Ped", :name=>"ped"}, {:type=>"int*", :name=>"sizeAndPeds"}, {:type=>"int", :name=>"pedTypeToIgnore"}]}
// not generating PED::_0x280C7E3AC7F56E90 - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating PED::_0xB782F8238512BAD5 - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating VEHICLE::GET_VEHICLE_RECORDING_ID - {:return_type=>"Any", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating VEHICLE::REQUEST_VEHICLE_RECORDING - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating VEHICLE::HAS_VEHICLE_RECORDING_BEEN_LOADED - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating VEHICLE::REMOVE_VEHICLE_RECORDING - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating VEHICLE::GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME - {:return_type=>"Vector3", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"float", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating VEHICLE::GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME - {:return_type=>"Vector3", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"float", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating VEHICLE::START_PLAYBACK_RECORDED_VEHICLE - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"BOOL", :name=>"p3"}]}
// not generating VEHICLE::START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any", :name=>"p4"}, {:type=>"Any", :name=>"p5"}]}
// not generating VEHICLE::START_PLAYBACK_RECORDED_VEHICLE_USING_AI - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"float", :name=>"p3"}, {:type=>"Any", :name=>"p4"}]}
// not generating VEHICLE::_0xA4822F1CF23F4810 - {:return_type=>"BOOL", :arguments=>[{:type=>"Vector3*", :name=>"outVec"}, {:type=>"Any", :name=>"p1"}, {:type=>"Vector3*", :name=>"outVec1"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any", :name=>"p4"}, {:type=>"Any", :name=>"p5"}, {:type=>"Any", :name=>"p6"}, {:type=>"Any", :name=>"p7"}, {:type=>"Any", :name=>"p8"}]}
// not generating OBJECT::_0x163F8B586BC95F2A - {:return_type=>"Any", :arguments=>[{:type=>"Any", :name=>"coords"}, {:type=>"float", :name=>"radius"}, {:type=>"Hash", :name=>"modelHash"}, {:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"Vector3*", :name=>"p6"}, {:type=>"int", :name=>"p7"}]}
// not generating OBJECT::GET_STATE_OF_CLOSEST_DOOR_OF_TYPE - {:return_type=>"void", :arguments=>[{:type=>"Hash", :name=>"type"}, {:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"BOOL*", :name=>"locked"}, {:type=>"float*", :name=>"heading"}]}
// not generating OBJECT::_0x589F80B325CC82C5 - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"p0"}, {:type=>"float", :name=>"p1"}, {:type=>"float", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}]}
// not generating AI::GET_NAVMESH_ROUTE_DISTANCE_REMAINING - {:return_type=>"Any", :arguments=>[{:type=>"Ped", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating AI::TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED - {:return_type=>"void", :arguments=>[{:type=>"Ped", :name=>"ped"}, {:type=>"Vector3*", :name=>"position"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any", :name=>"p4"}, {:type=>"int", :name=>"drivingStyle"}, {:type=>"Any", :name=>"p6"}, {:type=>"Any", :name=>"p7"}, {:type=>"Any", :name=>"p8"}, {:type=>"Any", :name=>"p9"}, {:type=>"Any", :name=>"p10"}, {:type=>"Any", :name=>"p11"}, {:type=>"Any", :name=>"p12"}]}
// not generating AI::TASK_SCRIPTED_ANIMATION - {:return_type=>"void", :arguments=>[{:type=>"Ped", :name=>"ped"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"float", :name=>"p4"}, {:type=>"float", :name=>"p5"}]}
// not generating AI::PLAY_ENTITY_SCRIPTED_ANIM - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"float", :name=>"p4"}, {:type=>"float", :name=>"p5"}]}
// not generating AI::TASK_PLAY_PHONE_GESTURE_ANIMATION - {:return_type=>"void", :arguments=>[{:type=>"Ped", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"float", :name=>"p4"}, {:type=>"float", :name=>"p5"}, {:type=>"BOOL", :name=>"p6"}, {:type=>"BOOL", :name=>"p7"}]}
// not generating AI::OPEN_SEQUENCE_TASK - {:return_type=>"void", :arguments=>[{:type=>"Object*", :name=>"taskSequence"}]}
// not generating AI::CLEAR_SEQUENCE_TASK - {:return_type=>"void", :arguments=>[{:type=>"Object*", :name=>"taskSequence"}]}
// not generating AI::DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"p0"}, {:type=>"float", :name=>"p1"}, {:type=>"float", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"float", :name=>"p4"}, {:type=>"BOOL", :name=>"p5"}]}
// not generating AI::WAYPOINT_RECORDING_GET_NUM_POINTS - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating AI::WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"float", :name=>"p1"}, {:type=>"float", :name=>"p2"}, {:type=>"float", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}]}
// not generating AI::TASK_FOLLOW_WAYPOINT_RECORDING - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any", :name=>"p4"}]}
// not generating AI::TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any", :name=>"p4"}, {:type=>"Any", :name=>"p5"}, {:type=>"Any", :name=>"p6"}, {:type=>"float", :name=>"p7"}, {:type=>"BOOL", :name=>"p8"}, {:type=>"float", :name=>"p9"}]}
// not generating AI::_0xB0A6CFD2C69C1088 - {:return_type=>"void", :arguments=>[{:type=>"Ped", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"BOOL", :name=>"p2"}]}
// not generating AI::_0xB4F47213DF45A64C - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating AI::TASK_SWEEP_AIM_POSITION - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}, {:type=>"Any", :name=>"p5"}, {:type=>"float", :name=>"p6"}, {:type=>"float", :name=>"p7"}, {:type=>"float", :name=>"p8"}, {:type=>"float", :name=>"p9"}, {:type=>"float", :name=>"p10"}]}
// not generating GAMEPLAY::_0xB335F761606DB47C - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"BOOL", :name=>"p3"}]}
// not generating GAMEPLAY::_0x8BDC7BFC57A81E76 - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"X"}, {:type=>"float", :name=>"Y"}, {:type=>"float", :name=>"Z"}, {:type=>"float*", :name=>"p3"}, {:type=>"Vector3*", :name=>"p4"}]}
// not generating GAMEPLAY::_0xF56DFB7B61BE7276 - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"p0"}, {:type=>"float", :name=>"p1"}, {:type=>"float", :name=>"p2"}, {:type=>"float", :name=>"p3"}, {:type=>"float", :name=>"p4"}, {:type=>"float", :name=>"p5"}, {:type=>"float", :name=>"p6"}, {:type=>"float", :name=>"p7"}, {:type=>"float", :name=>"p8"}, {:type=>"float", :name=>"p9"}, {:type=>"float", :name=>"p10"}, {:type=>"float", :name=>"p11"}, {:type=>"Any*", :name=>"p12"}]}
// not generating GAMEPLAY::SET_BIT - {:return_type=>"void", :arguments=>[{:type=>"int*", :name=>"var"}, {:type=>"int", :name=>"bit"}]}
// not generating GAMEPLAY::CLEAR_BIT - {:return_type=>"void", :arguments=>[{:type=>"int*", :name=>"var"}, {:type=>"int", :name=>"bit"}]}
// not generating GAMEPLAY::_0xF2F6A2FA49278625 - {:return_type=>"void", :arguments=>[{:type=>"float", :name=>"p0"}, {:type=>"float", :name=>"p1"}, {:type=>"float", :name=>"p2"}, {:type=>"float", :name=>"p3"}, {:type=>"float", :name=>"p4"}, {:type=>"float", :name=>"p5"}, {:type=>"float", :name=>"p6"}, {:type=>"float", :name=>"p7"}, {:type=>"float", :name=>"p8"}, {:type=>"Any*", :name=>"p9"}, {:type=>"Any*", :name=>"p10"}, {:type=>"Any*", :name=>"p11"}, {:type=>"Any*", :name=>"p12"}]}
// not generating GAMEPLAY::REGISTER_SAVE_HOUSE - {:return_type=>"Any", :arguments=>[{:type=>"float", :name=>"p0"}, {:type=>"float", :name=>"p1"}, {:type=>"float", :name=>"p2"}, {:type=>"float", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}, {:type=>"Any", :name=>"p5"}, {:type=>"Any", :name=>"p6"}]}
// not generating GAMEPLAY::STRING_TO_INT - {:return_type=>"BOOL", :arguments=>[{:type=>"char*", :name=>"string"}, {:type=>"int*", :name=>"outInteger"}]}
// not generating GAMEPLAY::SET_BITS_IN_RANGE - {:return_type=>"void", :arguments=>[{:type=>"int*", :name=>"var"}, {:type=>"int", :name=>"rangeStart"}, {:type=>"int", :name=>"rangeEnd"}, {:type=>"int", :name=>"p3"}]}
// not generating GAMEPLAY::_0xA735353C77334EA0 - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating GAMEPLAY::CREATE_INCIDENT_WITH_ENTITY - {:return_type=>"BOOL", :arguments=>[{:type=>"int", :name=>"p0"}, {:type=>"Entity", :name=>"p1"}, {:type=>"int", :name=>"p2"}, {:type=>"float", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}]}
// not generating GAMEPLAY::DELETE_INCIDENT - {:return_type=>"void", :arguments=>[{:type=>"int*", :name=>"incidentId"}]}
// not generating GAMEPLAY::FIND_SPAWN_POINT_IN_DIRECTION - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"x1"}, {:type=>"float", :name=>"y1"}, {:type=>"float", :name=>"z1"}, {:type=>"float", :name=>"x2"}, {:type=>"float", :name=>"y2"}, {:type=>"float", :name=>"z2"}, {:type=>"float", :name=>"distance"}, {:type=>"Vector3*", :name=>"spawnPoint"}]}
// not generating GAMEPLAY::_0xE266ED23311F24D4 - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"float", :name=>"p3"}, {:type=>"float", :name=>"p4"}, {:type=>"BOOL", :name=>"p5"}]}
// not generating GAMEPLAY::_0xCA78CFA0366592FE - {:return_type=>"void", :arguments=>[{:type=>"BOOL", :name=>"p0"}, {:type=>"char*", :name=>"windowTitle"}, {:type=>"Any*", :name=>"p2"}, {:type=>"char*", :name=>"defaultText"}, {:type=>"char*", :name=>"defaultConcat1"}, {:type=>"char*", :name=>"defaultConcat2"}, {:type=>"char*", :name=>"defaultConcat3"}, {:type=>"char*", :name=>"defaultConcat4"}, {:type=>"char*", :name=>"defaultConcat5"}, {:type=>"char*", :name=>"defaultConcat6"}, {:type=>"char*", :name=>"defaultConcat7"}, {:type=>"int", :name=>"maxInputLength"}]}
// not generating GAMEPLAY::_0x8EF5573A1F801A5C - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating AUDIO::ADD_LINE_TO_CONVERSATION - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any", :name=>"p4"}, {:type=>"BOOL", :name=>"p5"}, {:type=>"BOOL", :name=>"p6"}, {:type=>"BOOL", :name=>"p7"}, {:type=>"BOOL", :name=>"p8"}, {:type=>"Any", :name=>"p9"}, {:type=>"BOOL", :name=>"p10"}, {:type=>"BOOL", :name=>"p11"}, {:type=>"BOOL", :name=>"p12"}]}
// not generating AUDIO::INTERRUPT_CONVERSATION - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating AUDIO::SET_VARIABLE_ON_SOUND - {:return_type=>"void", :arguments=>[{:type=>"int", :name=>"soundId"}, {:type=>"Any*", :name=>"p1"}, {:type=>"float", :name=>"p2"}]}
// not generating AUDIO::_0xED640017ED337E45 - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"float", :name=>"p2"}, {:type=>"float", :name=>"p3"}, {:type=>"float", :name=>"p4"}, {:type=>"Any*", :name=>"p5"}]}
// not generating AUDIO::_0x49B99BF3FDA89A7A - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"BOOL", :name=>"p2"}]}
// not generating AUDIO::_0xEE066C7006C49C0A - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating AUDIO::_0x4E404A9361F75BB2 - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"BOOL", :name=>"p2"}]}
// not generating AUDIO::SET_AUDIO_SCENE_VARIABLE - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"float", :name=>"p2"}]}
// not generating AUDIO::PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating CUTSCENE::REGISTER_ENTITY_FOR_CUTSCENE - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any", :name=>"p4"}]}
// not generating CAM::IS_CAM_PLAYING_ANIM - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating WEAPON::GET_WEAPON_HUD_STATS - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating WEAPON::GET_WEAPON_COMPONENT_HUD_STATS - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating STREAMING::_0x95A7DABDDBB78AE7 - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating SCRIPT::GET_EVENT_DATA - {:return_type=>"BOOL", :arguments=>[{:type=>"int", :name=>"p0"}, {:type=>"int", :name=>"eventIndex"}, {:type=>"int*", :name=>"eventData"}, {:type=>"int", :name=>"p3"}]}
// not generating SCRIPT::TRIGGER_SCRIPT_EVENT - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"int*", :name=>"p1"}, {:type=>"int", :name=>"p2"}, {:type=>"int", :name=>"p3"}]}
// not generating UI::_0x632B2940C67F4EA9 - {:return_type=>"BOOL", :arguments=>[{:type=>"int", :name=>"scaleformHandle"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating UI::_0x317EBA71D7543F52 - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating UI::_0x97C9E4E7024A8F2C - {:return_type=>"Any", :arguments=>[{:type=>"BOOL", :name=>"p0"}, {:type=>"BOOL", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"BOOL", :name=>"p4"}, {:type=>"BOOL", :name=>"p5"}, {:type=>"Any", :name=>"p6"}, {:type=>"Any", :name=>"p7"}, {:type=>"Any", :name=>"p8"}, {:type=>"Any", :name=>"p9"}]}
// not generating UI::_0x137BC35589E34E1E - {:return_type=>"Any", :arguments=>[{:type=>"BOOL", :name=>"p0"}, {:type=>"BOOL", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"BOOL", :name=>"p4"}, {:type=>"BOOL", :name=>"p5"}, {:type=>"Any", :name=>"p6"}, {:type=>"Any*", :name=>"p7"}, {:type=>"Any", :name=>"p8"}, {:type=>"Any", :name=>"p9"}, {:type=>"Any", :name=>"p10"}]}
// not generating UI::_0x8EFCCF6EC66D85E4 - {:return_type=>"Any", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"BOOL", :name=>"p3"}, {:type=>"BOOL", :name=>"p4"}]}
// not generating UI::_0xB6871B0555B02996 - {:return_type=>"Any", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}, {:type=>"Any", :name=>"p5"}]}
// not generating UI::_0xE45087D85F468BC2 - {:return_type=>"void", :arguments=>[{:type=>"BOOL", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating UI::_0x817B86108EB94E51 - {:return_type=>"void", :arguments=>[{:type=>"BOOL", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}, {:type=>"Any*", :name=>"p5"}, {:type=>"Any*", :name=>"p6"}, {:type=>"Any*", :name=>"p7"}, {:type=>"Any*", :name=>"p8"}]}
// not generating UI::_0xF9904D11F1ACBEC3 - {:return_type=>"Any", :arguments=>[{:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"Any*", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}]}
// not generating UI::SET_WARNING_MESSAGE - {:return_type=>"void", :arguments=>[{:type=>"char*", :name=>"entryLine1"}, {:type=>"int", :name=>"instructionalKey"}, {:type=>"char*", :name=>"entryLine2"}, {:type=>"BOOL", :name=>"p3"}, {:type=>"Any", :name=>"p4"}, {:type=>"Any*", :name=>"p5"}, {:type=>"Any*", :name=>"p6"}, {:type=>"BOOL", :name=>"background"}]}
// not generating UI::_SET_WARNING_MESSAGE_2 - {:return_type=>"void", :arguments=>[{:type=>"char*", :name=>"entryHeader"}, {:type=>"char*", :name=>"entryLine1"}, {:type=>"int", :name=>"instructionalKey"}, {:type=>"char*", :name=>"entryLine2"}, {:type=>"BOOL", :name=>"p4"}, {:type=>"Any", :name=>"p5"}, {:type=>"Any*", :name=>"p6"}, {:type=>"Any*", :name=>"p7"}, {:type=>"BOOL", :name=>"background"}]}
// not generating UI::_SET_WARNING_MESSAGE_3 - {:return_type=>"void", :arguments=>[{:type=>"char*", :name=>"entryHeader"}, {:type=>"char*", :name=>"entryLine1"}, {:type=>"Any", :name=>"instructionalKey"}, {:type=>"char*", :name=>"entryLine2"}, {:type=>"BOOL", :name=>"p4"}, {:type=>"Any", :name=>"p5"}, {:type=>"Any", :name=>"p6"}, {:type=>"Any*", :name=>"p7"}, {:type=>"Any*", :name=>"p8"}, {:type=>"BOOL", :name=>"p9"}]}
// not generating UI::_0x0C5A80A9E096D529 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any", :name=>"p4"}, {:type=>"Any", :name=>"p5"}]}
// not generating UI::_0xC8E1071177A23BE5 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating UI::_0x36C1451A88A09630 - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating UI::_0x7E17BE53E1AAABAF - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating UI::_0xA238192F33110615 - {:return_type=>"BOOL", :arguments=>[{:type=>"int*", :name=>"p0"}, {:type=>"int*", :name=>"p1"}, {:type=>"int*", :name=>"p2"}]}
// not generating UI::SET_USERIDS_UIHIDDEN - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating UI::_0xCA6B2F7CE32AB653 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}]}
// not generating UI::_0x90A6526CF0381030 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any", :name=>"p3"}]}
// not generating UI::_0x24A49BEAF468DC90 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any", :name=>"p4"}]}
// not generating UI::_0x5FBD7095FE7AE57F - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating UI::_0x8F08017F9D7C47BD - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}]}
// not generating UI::_0x052991E59076E4E4 - {:return_type=>"BOOL", :arguments=>[{:type=>"Hash", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating GRAPHICS::_0x6DD8F5AA635EB4B2 - {:return_type=>"void", :arguments=>[{:type=>"float", :name=>"p0"}, {:type=>"float", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating GRAPHICS::_0x8A35C742130C6080 - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating GRAPHICS::_0x1A8E2C8B9CF4549C - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating GRAPHICS::_0x2201C576FACAEBE8 - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}]}
// not generating STATS::STAT_SET_DATE - {:return_type=>"BOOL", :arguments=>[{:type=>"Hash", :name=>"statName"}, {:type=>"Any*", :name=>"value"}, {:type=>"int", :name=>"numFields"}, {:type=>"BOOL", :name=>"save"}]}
// not generating STATS::STAT_GET_DATE - {:return_type=>"BOOL", :arguments=>[{:type=>"Hash", :name=>"statHash"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any", :name=>"p3"}]}
// not generating STATS::STAT_GET_POS - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"Any", :name=>"p4"}]}
// not generating STATS::STAT_GET_MASKED_INT - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any", :name=>"p4"}]}
// not generating STATS::_0xBED9F5693F34ED17 - {:return_type=>"BOOL", :arguments=>[{:type=>"Hash", :name=>"statName"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating STATS::_0xBA52FF538ED2BC71 - {:return_type=>"Any", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"BOOL", :name=>"p1"}, {:type=>"BOOL", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}]}
// not generating STATS::_0x2B4CDCA6F07FF3DA - {:return_type=>"Any", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"BOOL", :name=>"p1"}, {:type=>"BOOL", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}]}
// not generating STATS::_0x6DEE77AFF8C21BD1 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating STATS::_0xF8C54A461C3E11DC - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating STATS::_0xF5BB8DAC426A52C0 - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating STATS::_0xA736CF7FB7C5BFF4 - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating STATS::_0x14E0B2D1AD1044E0 - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating STATS::_0x90D0622866E80445 - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating STATS::LEADERBOARDS2_READ_FRIENDS_BY_ROW - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"BOOL", :name=>"p3"}, {:type=>"Any", :name=>"p4"}, {:type=>"Any", :name=>"p5"}]}
// not generating STATS::LEADERBOARDS2_READ_BY_HANDLE - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating STATS::LEADERBOARDS2_READ_BY_ROW - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"Any", :name=>"p4"}, {:type=>"Any*", :name=>"p5"}, {:type=>"Any", :name=>"p6"}]}
// not generating STATS::LEADERBOARDS2_READ_BY_RADIUS - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating STATS::_0xC38DC1E90D22547C - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating STATS::_0xF1AE5DCDBFCA2721 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating STATS::_0x34770B9CE0E03B91 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating STATS::LEADERBOARDS_GET_CACHE_DATA_ROW - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating STATS::_0x6483C25849031C4F - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating STATS::_0xC980E62E33DF1D5C - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating STATS::_0xDEAAF77EB3687E97 - {:return_type=>"Any", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating STATS::_0x3270F67EED31FBC1 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating MOBILE::GET_MOBILE_PHONE_ROTATION - {:return_type=>"void", :arguments=>[{:type=>"Vector3*", :name=>"rotation"}, {:type=>"Any", :name=>"p1"}]}
// not generating MOBILE::GET_MOBILE_PHONE_POSITION - {:return_type=>"void", :arguments=>[{:type=>"Vector3*", :name=>"position"}]}
// not generating TIME::GET_POSIX_TIME - {:return_type=>"void", :arguments=>[{:type=>"int*", :name=>"year"}, {:type=>"int*", :name=>"month"}, {:type=>"int*", :name=>"day"}, {:type=>"int*", :name=>"hour"}, {:type=>"int*", :name=>"minute"}, {:type=>"int*", :name=>"second"}]}
// not generating TIME::_GET_LOCAL_TIME - {:return_type=>"void", :arguments=>[{:type=>"int*", :name=>"year"}, {:type=>"int*", :name=>"month"}, {:type=>"int*", :name=>"day"}, {:type=>"int*", :name=>"hour"}, {:type=>"int*", :name=>"minute"}, {:type=>"int*", :name=>"second"}]}
// not generating TIME::GET_LOCAL_TIME - {:return_type=>"void", :arguments=>[{:type=>"int*", :name=>"year"}, {:type=>"int*", :name=>"month"}, {:type=>"int*", :name=>"day"}, {:type=>"int*", :name=>"hour"}, {:type=>"int*", :name=>"minute"}, {:type=>"int*", :name=>"second"}]}
// not generating PATHFIND::GET_SAFE_COORD_FOR_PED - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"BOOL", :name=>"onGround"}, {:type=>"Vector3*", :name=>"outPosition"}, {:type=>"int", :name=>"flags"}]}
// not generating PATHFIND::GET_CLOSEST_VEHICLE_NODE - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"Vector3*", :name=>"outPosition"}, {:type=>"int", :name=>"nodeType"}, {:type=>"float", :name=>"p5"}, {:type=>"float", :name=>"p6"}]}
// not generating PATHFIND::GET_CLOSEST_MAJOR_VEHICLE_NODE - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"Vector3*", :name=>"outPosition"}, {:type=>"float", :name=>"unknown1"}, {:type=>"int", :name=>"unknown2"}]}
// not generating PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"Vector3*", :name=>"outPosition"}, {:type=>"float*", :name=>"outHeading"}, {:type=>"int", :name=>"nodeType"}, {:type=>"float", :name=>"p6"}, {:type=>"int", :name=>"p7"}]}
// not generating PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"int", :name=>"nthClosest"}, {:type=>"Vector3*", :name=>"outPosition"}, {:type=>"Any", :name=>"unknown1"}, {:type=>"Any", :name=>"unknown2"}, {:type=>"Any", :name=>"unknown3"}]}
// not generating PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"int", :name=>"nthClosest"}, {:type=>"Vector3*", :name=>"outPosition"}, {:type=>"float*", :name=>"heading"}, {:type=>"Any*", :name=>"unknown1"}, {:type=>"int", :name=>"unknown2"}, {:type=>"float", :name=>"unknown3"}, {:type=>"float", :name=>"unknown4"}]}
// not generating PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING - {:return_type=>"Any", :arguments=>[{:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"int", :name=>"nthClosest"}, {:type=>"Vector3*", :name=>"outPosition"}, {:type=>"float", :name=>"outHeading"}, {:type=>"Any", :name=>"p6"}, {:type=>"float", :name=>"p7"}, {:type=>"float", :name=>"p8"}]}
// not generating PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"float", :name=>"desiredX"}, {:type=>"float", :name=>"desiredY"}, {:type=>"float", :name=>"desiredZ"}, {:type=>"int", :name=>"nthClosest"}, {:type=>"Vector3*", :name=>"outPosition"}, {:type=>"float*", :name=>"outHeading"}, {:type=>"int", :name=>"p9"}, {:type=>"Any", :name=>"p10"}, {:type=>"Any", :name=>"p11"}]}
// not generating PATHFIND::GET_VEHICLE_NODE_PROPERTIES - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"p0"}, {:type=>"float", :name=>"p1"}, {:type=>"float", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}]}
// not generating PATHFIND::GET_VEHICLE_NODE_POSITION - {:return_type=>"void", :arguments=>[{:type=>"int", :name=>"nodeId"}, {:type=>"Vector3*", :name=>"outPosition"}]}
// not generating PATHFIND::GET_RANDOM_VEHICLE_NODE - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"float", :name=>"radius"}, {:type=>"BOOL", :name=>"p4"}, {:type=>"BOOL", :name=>"p5"}, {:type=>"BOOL", :name=>"p6"}, {:type=>"Vector3*", :name=>"outPosition"}, {:type=>"float*", :name=>"heading"}]}
// not generating PATHFIND::GENERATE_DIRECTIONS_TO_COORD - {:return_type=>"Any", :arguments=>[{:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any", :name=>"p4"}, {:type=>"Vehicle*", :name=>"vehicle"}, {:type=>"Any", :name=>"p6"}]}
// not generating DATAFILE::_0xC84527E235FCA219 - {:return_type=>"BOOL", :arguments=>[{:type=>"char*", :name=>"p0"}, {:type=>"BOOL", :name=>"p1"}, {:type=>"char*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}, {:type=>"char*", :name=>"type"}, {:type=>"BOOL", :name=>"p6"}]}
// not generating DATAFILE::_0x648E7A5434AF7969 - {:return_type=>"BOOL", :arguments=>[{:type=>"char*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"BOOL", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}, {:type=>"Any*", :name=>"p5"}, {:type=>"char*", :name=>"type"}]}
// not generating DATAFILE::_0x906B778CA1DC72B6 - {:return_type=>"Any*", :arguments=>[]}
// not generating DATAFILE::_OBJECT_VALUE_ADD_OBJECT - {:return_type=>"Any*", :arguments=>[{:type=>"Any*", :name=>"objectData"}, {:type=>"char*", :name=>"key"}]}
// not generating DATAFILE::_OBJECT_VALUE_ADD_ARRAY - {:return_type=>"Any*", :arguments=>[{:type=>"Any*", :name=>"objectData"}, {:type=>"char*", :name=>"key"}]}
// not generating DATAFILE::_OBJECT_VALUE_GET_OBJECT - {:return_type=>"Any*", :arguments=>[{:type=>"Any*", :name=>"objectData"}, {:type=>"char*", :name=>"key"}]}
// not generating DATAFILE::_OBJECT_VALUE_GET_ARRAY - {:return_type=>"Any*", :arguments=>[{:type=>"Any*", :name=>"objectData"}, {:type=>"char*", :name=>"key"}]}
// not generating DATAFILE::_ARRAY_VALUE_ADD_OBJECT - {:return_type=>"Any*", :arguments=>[{:type=>"Any*", :name=>"arrayData"}]}
// not generating DATAFILE::_ARRAY_VALUE_GET_OBJECT - {:return_type=>"Any*", :arguments=>[{:type=>"Any*", :name=>"arrayData"}, {:type=>"int", :name=>"arrayIndex"}]}
// not generating ROPE::ADD_ROPE - {:return_type=>"Object", :arguments=>[{:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"float", :name=>"rotX"}, {:type=>"float", :name=>"rotY"}, {:type=>"float", :name=>"rotZ"}, {:type=>"float", :name=>"length"}, {:type=>"int", :name=>"ropeType"}, {:type=>"float", :name=>"maxLength"}, {:type=>"float", :name=>"minLength"}, {:type=>"float", :name=>"p10"}, {:type=>"BOOL", :name=>"p11"}, {:type=>"BOOL", :name=>"p12"}, {:type=>"BOOL", :name=>"rigid"}, {:type=>"float", :name=>"p14"}, {:type=>"BOOL", :name=>"breakWhenShot"}, {:type=>"Any*", :name=>"unkPtr"}]}
// not generating ROPE::DELETE_ROPE - {:return_type=>"void", :arguments=>[{:type=>"Object*", :name=>"rope"}]}
// not generating ROPE::DOES_ROPE_EXIST - {:return_type=>"BOOL", :arguments=>[{:type=>"Object*", :name=>"rope"}]}
// not generating ROPE::ROPE_DRAW_SHADOW_ENABLED - {:return_type=>"void", :arguments=>[{:type=>"Object*", :name=>"rope"}, {:type=>"BOOL", :name=>"toggle"}]}
// not generating ROPE::ATTACH_ENTITIES_TO_ROPE - {:return_type=>"void", :arguments=>[{:type=>"Object", :name=>"rope"}, {:type=>"Entity", :name=>"ent1"}, {:type=>"Entity", :name=>"ent2"}, {:type=>"float", :name=>"ent1_x"}, {:type=>"float", :name=>"ent1_y"}, {:type=>"float", :name=>"ent1_z"}, {:type=>"float", :name=>"ent2_x"}, {:type=>"float", :name=>"ent2_y"}, {:type=>"float", :name=>"ent2_z"}, {:type=>"float", :name=>"length"}, {:type=>"BOOL", :name=>"p10"}, {:type=>"BOOL", :name=>"p11"}, {:type=>"Any*", :name=>"p12"}, {:type=>"Any*", :name=>"p13"}]}
// not generating WATER::GET_WATER_HEIGHT - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"float*", :name=>"height"}]}
// not generating WATER::GET_WATER_HEIGHT_NO_WAVES - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"float*", :name=>"height"}]}
// not generating WATER::TEST_VERTICAL_PROBE_AGAINST_ALL_WATER - {:return_type=>"BOOL", :arguments=>[{:type=>"float", :name=>"x"}, {:type=>"float", :name=>"y"}, {:type=>"float", :name=>"z"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}]}
// not generating WORLDPROBE::_GET_RAYCAST_RESULT - {:return_type=>"int", :arguments=>[{:type=>"int", :name=>"rayHandle"}, {:type=>"BOOL*", :name=>"hit"}, {:type=>"Vector3*", :name=>"endCoords"}, {:type=>"Vector3*", :name=>"surfaceNormal"}, {:type=>"Entity*", :name=>"entityHit"}]}
// not generating WORLDPROBE::_GET_RAYCAST_RESULT_2 - {:return_type=>"int", :arguments=>[{:type=>"int", :name=>"rayHandle"}, {:type=>"BOOL*", :name=>"hit"}, {:type=>"Vector3*", :name=>"endCoords"}, {:type=>"Vector3*", :name=>"surfaceNormal"}, {:type=>"Hash*", :name=>"_materialHash"}, {:type=>"Entity*", :name=>"entityHit"}]}
// not generating NETWORK::_GET_MP_LOADING_STATE - {:return_type=>"BOOL", :arguments=>[{:type=>"int*", :name=>"loadingState"}]}
// not generating NETWORK::_0x6D03BFBD643B2A02 - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating NETWORK::NETWORK_SEND_TEXT_MESSAGE - {:return_type=>"Any", :arguments=>[{:type=>"char*", :name=>"message"}, {:type=>"int*", :name=>"playerHandle"}]}
// not generating NETWORK::NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}, {:type=>"Any", :name=>"p5"}]}
// not generating NETWORK::_0xEBEFC2E77084F599 - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"BOOL", :name=>"p2"}]}
// not generating NETWORK::NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION - {:return_type=>"BOOL", :arguments=>[{:type=>"Player*", :name=>"playerHandle"}, {:type=>"char*", :name=>"p1"}, {:type=>"int", :name=>"p2"}, {:type=>"int", :name=>"p3"}, {:type=>"BOOL", :name=>"p4"}]}
// not generating NETWORK::_0xC3C7A6AFDB244624 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any", :name=>"p3"}]}
// not generating NETWORK::_0xC116FF9B4D488291 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any", :name=>"p3"}]}
// not generating NETWORK::_0x1171A97A3D3981B6 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any", :name=>"p3"}]}
// not generating NETWORK::NETWORK_GET_PRESENCE_INVITE_HANDLE - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORK::NETWORK_INVITE_GAMERS - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating NETWORK::_0x44B37CDCAE765AAE - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORK::_0x0D77A82DC2D0DA59 - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORK::FILLOUT_PM_PLAYER_LIST_WITH_NAMES - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any", :name=>"p3"}]}
// not generating NETWORK::_0x1AD5B71586B94820 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}]}
// not generating NETWORK::NETWORK_GET_DESTROYER_OF_NETWORK_ID - {:return_type=>"Any", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORK::_0x4CACA84440FA26F6 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating NETWORK::NETWORK_GET_ENTITY_KILLER_OF_PLAYER - {:return_type=>"Entity", :arguments=>[{:type=>"Player", :name=>"player"}, {:type=>"Hash*", :name=>"weaponHash"}]}
// not generating NETWORK::NETWORK_HANDLE_FROM_USER_ID - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}]}
// not generating NETWORK::NETWORK_HANDLE_FROM_MEMBER_ID - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}]}
// not generating NETWORK::NETWORK_HANDLE_FROM_PLAYER - {:return_type=>"void", :arguments=>[{:type=>"Player", :name=>"player"}, {:type=>"int*", :name=>"handle"}, {:type=>"int", :name=>"p2"}]}
// not generating NETWORK::NETWORK_HANDLE_FROM_FRIEND - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}]}
// not generating NETWORK::NETWORK_GET_GAMERTAG_FROM_HANDLE - {:return_type=>"char*", :arguments=>[{:type=>"int*", :name=>"handle"}]}
// not generating NETWORK::NETWORK_ARE_HANDLES_THE_SAME - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORK::NETWORK_IS_HANDLE_VALID - {:return_type=>"BOOL", :arguments=>[{:type=>"int*", :name=>"p0"}, {:type=>"int", :name=>"p1"}]}
// not generating NETWORK::NETWORK_SHOW_PROFILE_UI - {:return_type=>"void", :arguments=>[{:type=>"Player*", :name=>"playerHandle"}]}
// not generating NETWORK::_NETWORK_PLAYER_GET_USER_ID - {:return_type=>"char*", :arguments=>[{:type=>"Player", :name=>"player"}, {:type=>"Any*", :name=>"userID"}]}
// not generating NETWORK::NETWORK_IS_FRIEND - {:return_type=>"BOOL", :arguments=>[{:type=>"int*", :name=>"player"}]}
// not generating NETWORK::NETWORK_ADD_FRIEND - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORK::NETWORK_IS_GAMER_TALKING - {:return_type=>"BOOL", :arguments=>[{:type=>"int*", :name=>"p0"}]}
// not generating NETWORK::NETWORK_CAN_COMMUNICATE_WITH_GAMER - {:return_type=>"BOOL", :arguments=>[{:type=>"int*", :name=>"p0"}]}
// not generating NETWORK::NETWORK_IS_GAMER_MUTED_BY_ME - {:return_type=>"BOOL", :arguments=>[{:type=>"int*", :name=>"p0"}]}
// not generating NETWORK::_0xADB57E5B663CCA8B - {:return_type=>"void", :arguments=>[{:type=>"Player", :name=>"p0"}, {:type=>"float*", :name=>"p1"}, {:type=>"float*", :name=>"p2"}]}
// not generating NETWORK::NETWORK_CLAN_PLAYER_IS_ACTIVE - {:return_type=>"BOOL", :arguments=>[{:type=>"ScrHandle*", :name=>"netHandle"}]}
// not generating NETWORK::NETWORK_CLAN_PLAYER_GET_DESC - {:return_type=>"BOOL", :arguments=>[{:type=>"ScrHandle*", :name=>"description"}, {:type=>"int", :name=>"p1"}, {:type=>"ScrHandle*", :name=>"netHandle"}]}
// not generating NETWORK::_0xF45352426FF3A4F0 - {:return_type=>"void", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating NETWORK::NETWORK_CLAN_GET_MEMBERSHIP - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}]}
// not generating NETWORK::_0x729E3401F0430686 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORK::_0x2B51EDBEFC301339 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORK::_0x5835D9CD92E83184 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORK::_0xA134777FF7F33331 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORK::NETWORK_GET_PRIMARY_CLAN_DATA_NEW - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORK::_GET_DATE_AND_TIME_FROM_UNIX_EPOCH - {:return_type=>"void", :arguments=>[{:type=>"int", :name=>"unixEpoch"}, {:type=>"Any*", :name=>"timeStructure"}]}
// not generating NETWORK::NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"float", :name=>"p4"}, {:type=>"float", :name=>"p5"}, {:type=>"Any", :name=>"p6"}, {:type=>"Any", :name=>"p7"}, {:type=>"float", :name=>"p8"}, {:type=>"Any", :name=>"p9"}]}
// not generating NETWORK::NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"float", :name=>"p4"}, {:type=>"float", :name=>"p5"}, {:type=>"Any", :name=>"p6"}]}
// not generating NETWORK::_0xCF8BD3B0BD6D42D7 - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating NETWORK::NETWORK_GET_RESPAWN_RESULT - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"int*", :name=>"p1"}, {:type=>"int*", :name=>"p2"}]}
// not generating NETWORK::NETWORK_ACCESS_TUNABLE_INT - {:return_type=>"BOOL", :arguments=>[{:type=>"char*", :name=>"tunableContext"}, {:type=>"char*", :name=>"tunableName"}, {:type=>"int*", :name=>"value"}]}
// not generating NETWORK::NETWORK_ACCESS_TUNABLE_FLOAT - {:return_type=>"BOOL", :arguments=>[{:type=>"char*", :name=>"tunableContext"}, {:type=>"char*", :name=>"tunableName"}, {:type=>"float*", :name=>"value"}]}
// not generating NETWORK::_NETWORK_ACCESS_TUNABLE_INT_HASH - {:return_type=>"BOOL", :arguments=>[{:type=>"Hash", :name=>"TunableContext"}, {:type=>"Hash", :name=>"TunableNameHash"}, {:type=>"int*", :name=>"OutputVal"}]}
// not generating NETWORK::_NETWORK_ACCESS_TUNABLE_FLOAT_HASH - {:return_type=>"BOOL", :arguments=>[{:type=>"Hash", :name=>"TunableContext"}, {:type=>"Hash", :name=>"TunableName"}, {:type=>"float*", :name=>"OutputVal"}]}
// not generating NETWORK::_0x152D90E4C1B4738A - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORK::_0x9BF438815F5D96EA - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any", :name=>"p4"}, {:type=>"Any", :name=>"p5"}]}
// not generating NETWORK::_0x692D58DF40657E8C - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"Any", :name=>"p4"}, {:type=>"BOOL", :name=>"p5"}]}
// not generating NETWORK::_0x158EC424F35EC469 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"BOOL", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating NETWORK::_0xC7397A83F7A2A462 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"BOOL", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating NETWORK::_0x6D4CB481FAC835E8 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any", :name=>"p3"}]}
// not generating NETWORK::_0xD5A4B59980401588 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating NETWORK::_0x3195F8DD0D531052 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating NETWORK::_0xF9E1CCAE8BA4C281 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating NETWORK::_0x9F6E2821885CAEE2 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}]}
// not generating NETWORK::_0x678BB03C1A3BD51E - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}]}
// not generating NETWORK::SET_BALANCE_ADD_MACHINE - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORK::SET_BALANCE_ADD_MACHINES - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating NETWORK::_0xA7862BC5ED1DFD7E - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating NETWORK::_0x97A770BEEF227E2B - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating NETWORK::_0x5324A0E3E4CE3570 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}]}
// not generating NETWORK::_0x584770794D758C18 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORK::_0xCFD115B373C0DF63 - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORK::_0x7FD2990AF016795E - {:return_type=>"Any", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any", :name=>"p4"}]}
// not generating NETWORK::_0x1DE0F5F50D723CAA - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating NETWORK::_0x274A1519DFC1094F - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"BOOL", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating NETWORK::_0xD05D1A6C74DA3498 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"BOOL", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating NETWORK::_0xB746D20B17F2A229 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORK::TEXTURE_DOWNLOAD_REQUEST - {:return_type=>"Any", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"BOOL", :name=>"p3"}]}
// not generating NETWORK::_0x0B203B4AFDE53A4F - {:return_type=>"Any", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"BOOL", :name=>"p2"}]}
// not generating NETWORK::_0x308F96458B7087CC - {:return_type=>"Any", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any", :name=>"p2"}, {:type=>"Any", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}, {:type=>"BOOL", :name=>"p5"}]}
// not generating NETWORK::_0xC22912B1D85F26B1 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating NETWORKCASH::NETWORK_GIVE_PLAYER_JOBSHARE_CASH - {:return_type=>"void", :arguments=>[{:type=>"int", :name=>"amount"}, {:type=>"Player*", :name=>"player"}]}
// not generating NETWORKCASH::NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH - {:return_type=>"void", :arguments=>[{:type=>"int", :name=>"amount"}, {:type=>"Player*", :name=>"player"}]}
// not generating NETWORKCASH::_0x61326EE6DF15B0CA - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating NETWORKCASH::_0x2B171E6B2F64D8DF - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"BOOL", :name=>"p2"}]}
// not generating NETWORKCASH::NETWORK_EARN_FROM_BOUNTY - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any", :name=>"p3"}]}
// not generating NETWORKCASH::_0x6EA318C91C1A8786 - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any", :name=>"p2"}]}
// not generating NETWORKCASH::_0xFB6DB092FBAE29E6 - {:return_type=>"void", :arguments=>[{:type=>"int", :name=>"p0"}, {:type=>"char*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating NETWORKCASH::_0x6816FB4416760775 - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating NETWORKCASH::_0x7303E27CC6532080 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"BOOL", :name=>"p1"}, {:type=>"BOOL", :name=>"p2"}, {:type=>"BOOL", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}, {:type=>"Any", :name=>"p5"}]}
// not generating NETWORKCASH::_0x9346E14F2AF74D46 - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"BOOL", :name=>"p2"}, {:type=>"BOOL", :name=>"p3"}]}
// not generating NETWORKCASH::NETWORK_SPENT_BETTING - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"BOOL", :name=>"p3"}, {:type=>"BOOL", :name=>"p4"}]}
// not generating NETWORKCASH::NETWORK_SPENT_BUY_WANTEDLEVEL - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"BOOL", :name=>"p2"}, {:type=>"BOOL", :name=>"p3"}]}
// not generating NETWORKCASH::NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"BOOL", :name=>"p3"}, {:type=>"BOOL", :name=>"p4"}]}
// not generating NETWORKCASH::NETWORK_SPENT_CALL_PLAYER - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"BOOL", :name=>"p2"}, {:type=>"BOOL", :name=>"p3"}]}
// not generating DLC1::_0xFF56381874F82086 - {:return_type=>"BOOL", :arguments=>[{:type=>"int", :name=>"p0"}, {:type=>"int", :name=>"p1"}, {:type=>"Any*", :name=>"outComponent"}]}
// not generating DLC1::GET_SHOP_PED_QUERY_COMPONENT - {:return_type=>"void", :arguments=>[{:type=>"int", :name=>"componentId"}, {:type=>"Any*", :name=>"outComponent"}]}
// not generating DLC1::GET_SHOP_PED_COMPONENT - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating DLC1::GET_SHOP_PED_QUERY_PROP - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating DLC1::_0x5D5CAFF661DDF6FC - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating DLC1::GET_VARIANT_COMPONENT - {:return_type=>"void", :arguments=>[{:type=>"Hash", :name=>"componentHash"}, {:type=>"int", :name=>"componentId"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}]}
// not generating DLC1::GET_FORCED_COMPONENT - {:return_type=>"void", :arguments=>[{:type=>"Hash", :name=>"componentHash"}, {:type=>"int", :name=>"componentId"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}]}
// not generating DLC1::_0xE1CA84EBF72E691D - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}, {:type=>"Any*", :name=>"p3"}, {:type=>"Any*", :name=>"p4"}]}
// not generating DLC1::GET_SHOP_PED_QUERY_OUTFIT - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating DLC1::GET_SHOP_PED_OUTFIT - {:return_type=>"void", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating DLC1::_0xA9F9C2E0FDE11CBB - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating DLC1::_GET_PROP_FROM_OUTFIT - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"outfit"}, {:type=>"Any", :name=>"slot"}, {:type=>"Any*", :name=>"item"}]}
// not generating DLC1::GET_DLC_VEHICLE_DATA - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating DLC1::GET_DLC_WEAPON_DATA - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating DLC1::GET_DLC_WEAPON_COMPONENT_DATA - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating SYSTEM::START_NEW_SCRIPT_WITH_ARGS - {:return_type=>"int", :arguments=>[{:type=>"char*", :name=>"scriptName"}, {:type=>"Any*", :name=>"args"}, {:type=>"int", :name=>"argCount"}, {:type=>"int", :name=>"stackSize"}]}
// not generating SYSTEM::_START_NEW_STREAMED_SCRIPT_WITH_ARGS - {:return_type=>"int", :arguments=>[{:type=>"Hash", :name=>"scriptHash"}, {:type=>"Any*", :name=>"args"}, {:type=>"int", :name=>"argCount"}, {:type=>"int", :name=>"stackSize"}]}
// not generating SOCIALCLUB::SC_INBOX_MESSAGE_GET_DATA_INT - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating SOCIALCLUB::_0xFFE5C16F402D851D - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating SOCIALCLUB::SC_INBOX_MESSAGE_GET_DATA_STRING - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating SOCIALCLUB::SC_INBOX_MESSAGE_GET_UGCDATA - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating SOCIALCLUB::_0x87E0052F08BD64E6 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating SOCIALCLUB::_0x4737980E8A283806 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating SOCIALCLUB::SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST - {:return_type=>"void", :arguments=>[{:type=>"Player*", :name=>"player"}]}
// not generating SOCIALCLUB::_0x287F1F75D2803595 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating SOCIALCLUB::_0x75632C5ECD7ED843 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating SOCIALCLUB::_0xF6BAAAF762E1BF40 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating SOCIALCLUB::_0xD0EE05FE193646EA - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating SOCIALCLUB::_0x1989C6E6F67E76A8 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating SOCIALCLUB::_0x0F73393BAC7E6730 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating SOCIALCLUB::_0x8CC469AB4D349B7C - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating SOCIALCLUB::_0x699E4A5C8C893A18 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}, {:type=>"Any*", :name=>"p2"}]}
// not generating SOCIALCLUB::_0x19853B5B17D77BCA - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating SOCIALCLUB::_0x92DA6E70EF249BD1 - {:return_type=>"BOOL", :arguments=>[{:type=>"char*", :name=>"p0"}, {:type=>"int*", :name=>"p1"}]}
// not generating SOCIALCLUB::_0x225798743970412B - {:return_type=>"BOOL", :arguments=>[{:type=>"int*", :name=>"p0"}]}
// not generating UNK3::_0x897433D292B44130 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any*", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
// not generating UNK3::_0xE1A0450ED46A7812 - {:return_type=>"BOOL", :arguments=>[{:type=>"Any", :name=>"p0"}, {:type=>"Any*", :name=>"p1"}]}
/*
  THIS FILE IS A PART OF GTA V SCRIPT HOOK SDK
        http://dev-c.com
      (C) Alexander Blade 2015
*/

#include "script.h"
#include "utils.h"
#include "keyboard.h"

#include <io.h>
#include <string.h>
#include <fcntl.h>

#ifdef __cplusplus
extern "C" {
#endif
#include "mruby.h"
#include "mruby/irep.h"
#include "mruby/array.h"
#include "mruby/value.h"
#include "mruby/numeric.h"
#include "mruby/string.h"
#ifdef __cplusplus
}
#endif

static int call_limit_enabled = 0;
static int call_limit = 1000;

  mrb_value mruby__GRAPHICS___WORLD3D_TO_SCREEN2D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
      mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0,&a1,&a2);

  float r0;
  float r1;

  GRAPHICS::_WORLD3D_TO_SCREEN2D(a0,a1,a2,&r0,&r1);

  if(r0 < 0.0 && r1 < 0.0) {
    return mrb_nil_value();
  } else {
    mrb_value rarray = mrb_ary_new_capa(mrb,2);
    mrb_ary_set(mrb,rarray,0,mrb_float_value(mrb,r0));
    mrb_ary_set(mrb,rarray,1,mrb_float_value(mrb,r1));
    return rarray;
  }

  }

  mrb_value mruby__PLAYER__GET_PLAYER_RGB_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  int r0;
  int r1;
  int r2;
  PLAYER::GET_PLAYER_RGB_COLOUR(a0,&r0,&r1,&r2);
    mrb_value rarray = mrb_ary_new_capa(mrb,3);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  mrb_ary_set(mrb,rarray,2,mrb_fixnum_value(r2));
  return rarray;

}

  mrb_value mruby__PLAYER__GET_PLAYER_TARGET_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Entity r0;
  BOOL r = PLAYER::GET_PLAYER_TARGET_ENTITY(a0,&r0);
    if(!r){
    return mrb_nil_value();
  } else {
      mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Entity"), 0, NULL);
  (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
  return rret;

  }

}

  mrb_value mruby__PLAYER__GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Entity r0;
  BOOL r = PLAYER::GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(a0,&r0);
    if(!r){
    return mrb_nil_value();
  } else {
      mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Entity"), 0, NULL);
  (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
  return rret;

  }

}

  mrb_value mruby__PLAYER__GET_PLAYER_PARACHUTE_TINT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  int r0;
  PLAYER::GET_PLAYER_PARACHUTE_TINT_INDEX(a0,&r0);
    if(r0 == -1){
    return mrb_nil_value();
  } else {
    return mrb_fixnum_value(r0);
  }

}

  mrb_value mruby__PLAYER__GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  int r0;
  PLAYER::GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(a0,&r0);
    if(r0 == -1){
    return mrb_nil_value();
  } else {
    return mrb_fixnum_value(r0);
  }

}

  mrb_value mruby__PLAYER__GET_PLAYER_PARACHUTE_PACK_TINT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  int r0;
  PLAYER::GET_PLAYER_PARACHUTE_PACK_TINT_INDEX(a0,&r0);
    if(r0 == -1){
    return mrb_nil_value();
  } else {
    return mrb_fixnum_value(r0);
  }

}

  mrb_value mruby__PLAYER__GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  int r0;
  int r1;
  int r2;
  PLAYER::GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(a0,&r0,&r1,&r2);
    mrb_value rarray = mrb_ary_new_capa(mrb,3);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  mrb_ary_set(mrb,rarray,2,mrb_fixnum_value(r2));
  return rarray;

}

  mrb_value mruby__PED__GET_PED_LAST_DAMAGE_BONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0;
  PED::GET_PED_LAST_DAMAGE_BONE(a0,&r0);
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Any"), 0, NULL);
  (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
  return rret;

}

  mrb_value mruby__PED__GET_GROUP_SIZE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0;
  int r1;
  PED::GET_GROUP_SIZE(a0,&r0,&r1);
    mrb_value rarray = mrb_ary_new_capa(mrb,2);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  return rarray;

}

  mrb_value mruby__PED__IS_PED_EVASIVE_DIVING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Entity r0;
  BOOL r = PED::IS_PED_EVASIVE_DIVING(a0,&r0);
    if(!r){
    return mrb_nil_value();
  } else {
      mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Entity"), 0, NULL);
  (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
  return rret;

  }

}

  mrb_value mruby__ENTITY__GET_ENTITY_MATRIX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0;
  Any r1;
  Vector3 r2;
  Vector3 r3;
  ENTITY::GET_ENTITY_MATRIX(a0,&r0,&r1,&r2,&r3);
    mrb_value rarray = mrb_ary_new_capa(mrb,4);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  mrb_value r2v = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, r2v, "__load", 3, mrb_float_value(mrb, r2.x), mrb_float_value(mrb, r2.y), mrb_float_value(mrb, r2.z));
  mrb_ary_set(mrb,rarray,2,r2v);
  mrb_value r3v = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, r3v, "__load", 3, mrb_float_value(mrb, r3.x), mrb_float_value(mrb, r3.y), mrb_float_value(mrb, r3.z));
  mrb_ary_set(mrb,rarray,3,r3v);
  return rarray;

}

  mrb_value mruby__ENTITY__GET_ENTITY_QUATERNION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  float r0;
  float r1;
  float r2;
  float r3;
  ENTITY::GET_ENTITY_QUATERNION(a0,&r0,&r1,&r2,&r3);
    mrb_value rarray = mrb_ary_new_capa(mrb,4);
  
  mrb_ary_set(mrb,rarray,0,mrb_float_value(mrb,r0));
  mrb_ary_set(mrb,rarray,1,mrb_float_value(mrb,r1));
  mrb_ary_set(mrb,rarray,2,mrb_float_value(mrb,r2));
  mrb_ary_set(mrb,rarray,3,mrb_float_value(mrb,r3));
  return rarray;

}

  mrb_value mruby__ENTITY__SET_OBJECT_AS_NO_LONGER_NEEDED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  
  ENTITY::SET_OBJECT_AS_NO_LONGER_NEEDED((Object*) &a0);
  return mrb_nil_value();
}

  mrb_value mruby__OBJECT__DELETE_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  
  OBJECT::DELETE_OBJECT((Object*) &a0);
  return mrb_nil_value();
}

  mrb_value mruby__VEHICLE__GET_VEHICLE_CUSTOM_PRIMARY_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  int r0;
  int r1;
  int r2;
  VEHICLE::GET_VEHICLE_CUSTOM_PRIMARY_COLOUR(a0,&r0,&r1,&r2);
    mrb_value rarray = mrb_ary_new_capa(mrb,3);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  mrb_ary_set(mrb,rarray,2,mrb_fixnum_value(r2));
  return rarray;

}

  mrb_value mruby__VEHICLE__GET_VEHICLE_CUSTOM_SECONDARY_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  int r0;
  int r1;
  int r2;
  VEHICLE::GET_VEHICLE_CUSTOM_SECONDARY_COLOUR(a0,&r0,&r1,&r2);
    mrb_value rarray = mrb_ary_new_capa(mrb,3);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  mrb_ary_set(mrb,rarray,2,mrb_fixnum_value(r2));
  return rarray;

}

  mrb_value mruby__VEHICLE__GET_VEHICLE_COLOURS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  int r0;
  int r1;
  VEHICLE::GET_VEHICLE_COLOURS(a0,&r0,&r1);
    mrb_value rarray = mrb_ary_new_capa(mrb,2);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  return rarray;

}

  mrb_value mruby__VEHICLE__GET_VEHICLE_LIGHTS_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  int r0;
  int r1;
  VEHICLE::GET_VEHICLE_LIGHTS_STATE(a0,&r0,&r1);
    mrb_value rarray = mrb_ary_new_capa(mrb,2);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  return rarray;

}

  mrb_value mruby__VEHICLE__GET_RANDOM_VEHICLE_MODEL_IN_MEMORY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  Hash r0;
  int r1;
  VEHICLE::GET_RANDOM_VEHICLE_MODEL_IN_MEMORY(a0,&r0,&r1);
    mrb_value rarray = mrb_ary_new_capa(mrb,2);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  return rarray;

}

  mrb_value mruby__VEHICLE__GET_VEHICLE_EXTRA_COLOURS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  int r0;
  int r1;
  VEHICLE::GET_VEHICLE_EXTRA_COLOURS(a0,&r0,&r1);
    mrb_value rarray = mrb_ary_new_capa(mrb,2);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  return rarray;

}

  mrb_value mruby__VEHICLE__GET_VEHICLE_TRAILER_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vehicle r0;
  BOOL r = VEHICLE::GET_VEHICLE_TRAILER_VEHICLE(a0,&r0);
    if(!r){
    return mrb_nil_value();
  } else {
      mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vehicle"), 0, NULL);
  (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
  return rret;

  }

}

  mrb_value mruby__VEHICLE__GET_VEHICLE_MOD_COLOR_1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  int r0;
  int r1;
  int r2;
  VEHICLE::GET_VEHICLE_MOD_COLOR_1(a0,&r0,&r1,&r2);
    mrb_value rarray = mrb_ary_new_capa(mrb,3);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  mrb_ary_set(mrb,rarray,2,mrb_fixnum_value(r2));
  return rarray;

}

  mrb_value mruby__VEHICLE__GET_VEHICLE_MOD_COLOR_2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  int r0;
  int r1;
  VEHICLE::GET_VEHICLE_MOD_COLOR_2(a0,&r0,&r1);
    mrb_value rarray = mrb_ary_new_capa(mrb,2);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  return rarray;

}

  mrb_value mruby__VEHICLE__GET_VEHICLE_TYRE_SMOKE_COLOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  int r0;
  int r1;
  int r2;
  VEHICLE::GET_VEHICLE_TYRE_SMOKE_COLOR(a0,&r0,&r1,&r2);
    mrb_value rarray = mrb_ary_new_capa(mrb,3);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  mrb_ary_set(mrb,rarray,2,mrb_fixnum_value(r2));
  return rarray;

}

  mrb_value mruby__VEHICLE__GET_VEHICLE_COLOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  int r0;
  int r1;
  int r2;
  VEHICLE::GET_VEHICLE_COLOR(a0,&r0,&r1,&r2);
    mrb_value rarray = mrb_ary_new_capa(mrb,3);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  mrb_ary_set(mrb,rarray,2,mrb_fixnum_value(r2));
  return rarray;

}

  mrb_value mruby__VEHICLE___GET_VEHICLE_NEON_LIGHTS_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  int r0;
  int r1;
  int r2;
  VEHICLE::_GET_VEHICLE_NEON_LIGHTS_COLOUR(a0,&r0,&r1,&r2);
    mrb_value rarray = mrb_ary_new_capa(mrb,3);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  mrb_ary_set(mrb,rarray,2,mrb_fixnum_value(r2));
  return rarray;

}

  mrb_value mruby__VEHICLE___GET_VEHICLE_OWNER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Entity r0;
  BOOL r = VEHICLE::_GET_VEHICLE_OWNER(a0,&r0);
    if(!r){
    return mrb_nil_value();
  } else {
      mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Entity"), 0, NULL);
  (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
  return rret;

  }

}

  mrb_value mruby__GRAPHICS__GET_SCREEN_RESOLUTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  
  
  int r0;
  int r1;
  GRAPHICS::GET_SCREEN_RESOLUTION(&r0,&r1);
    mrb_value rarray = mrb_ary_new_capa(mrb,2);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  return rarray;

}

  mrb_value mruby__GRAPHICS___GET_SCREEN_ACTIVE_RESOLUTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  
  
  int r0;
  int r1;
  GRAPHICS::_GET_SCREEN_ACTIVE_RESOLUTION(&r0,&r1);
    mrb_value rarray = mrb_ary_new_capa(mrb,2);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  return rarray;

}

  mrb_value mruby__GRAPHICS__SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  int a0;
  mrb_get_args(mrb,"i",&a0);
  
  GRAPHICS::SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED(&a0);
    mrb_value rarray = mrb_ary_new_capa(mrb,0);
  
  
  return rarray;

}

  mrb_value mruby__GAMEPLAY__GET_MODEL_DIMENSIONS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0;
  Vector3 r1;
  GAMEPLAY::GET_MODEL_DIMENSIONS(a0,&r0,&r1);
    mrb_value rarray = mrb_ary_new_capa(mrb,2);
  
  mrb_value r0v = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, r0v, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  mrb_ary_set(mrb,rarray,0,r0v);
  mrb_value r1v = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, r1v, "__load", 3, mrb_float_value(mrb, r1.x), mrb_float_value(mrb, r1.y), mrb_float_value(mrb, r1.z));
  mrb_ary_set(mrb,rarray,1,r1v);
  return rarray;

}

  mrb_value mruby__GAMEPLAY__GET_GROUND_Z_FOR_3D_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_bool a3;
  mrb_get_args(mrb,"fffb",&a0,&a1,&a2,&a3);
  float r0;
  GAMEPLAY::GET_GROUND_Z_FOR_3D_COORD(a0,a1,a2,&r0,a3);
  return mrb_float_value(mrb,r0);
}

  mrb_value mruby__GAMEPLAY___GET_WEATHER_TYPE_TRANSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  
  
  Any r0;
  Any r1;
  float r2;
  GAMEPLAY::_GET_WEATHER_TYPE_TRANSITION(&r0,&r1,&r2);
    mrb_value rarray = mrb_ary_new_capa(mrb,3);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  mrb_ary_set(mrb,rarray,2,mrb_float_value(mrb,r2));
  return rarray;

}

  mrb_value mruby__WEAPON__GET_CURRENT_PED_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0,&a1);
  Hash r0;
  BOOL r = WEAPON::GET_CURRENT_PED_WEAPON(a0,&r0,a1);
    if(!r){
    return mrb_nil_value();
  } else {
      mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
  (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
  return rret;

  }

}

  mrb_value mruby__WEAPON__GET_CURRENT_PED_VEHICLE_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Hash r0;
  BOOL r = WEAPON::GET_CURRENT_PED_VEHICLE_WEAPON(a0,&r0);
    if(!r){
    return mrb_nil_value();
  } else {
      mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
  (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
  return rret;

  }

}

  mrb_value mruby__WEAPON__GET_AMMO_IN_CLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0,&a1);
  int r0;
  BOOL r = WEAPON::GET_AMMO_IN_CLIP(a0,a1,&r0);
    if(!r){
    return mrb_nil_value();
  } else {
    return mrb_fixnum_value(r0);
  }

}

  mrb_value mruby__WEAPON__GET_MAX_AMMO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0,&a1);
  int r0;
  BOOL r = WEAPON::GET_MAX_AMMO(a0,a1,&r0);
    if(!r){
    return mrb_nil_value();
  } else {
    return mrb_fixnum_value(r0);
  }

}

  mrb_value mruby__WEAPON__GET_PED_LAST_WEAPON_IMPACT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0;
  BOOL r = WEAPON::GET_PED_LAST_WEAPON_IMPACT_COORD(a0,&r0);
    if(!r){
    return mrb_nil_value();
  } else {
      mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rret, "__load", 3, mrb_float_value(mrb,r0.x), mrb_float_value(mrb,r0.y), mrb_float_value(mrb,r0.z));
  return rret;

  }

}

  mrb_value mruby__STATS__STAT_GET_INT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0,&a1);
  int r0;
  BOOL r = STATS::STAT_GET_INT(a0,&r0,a1);
    if(!r){
    return mrb_nil_value();
  } else {
    return mrb_fixnum_value(r0);
  }

}

  mrb_value mruby__STATS__STAT_GET_FLOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0,&a1);
  float r0;
  BOOL r = STATS::STAT_GET_FLOAT(a0,&r0,a1);
    if(!r){
    return mrb_nil_value();
  } else {
    return mrb_float_value(mrb,r0);
  }

}

  mrb_value mruby__STATS__STAT_GET_BOOL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0,&a1);
  BOOL r0;
  BOOL r = STATS::STAT_GET_BOOL(a0,&r0,a1);
    if(!r){
    return mrb_nil_value();
  } else {
    return mrb_bool_value(r0);
  }

}

  mrb_value mruby__UI__REMOVE_BLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  
  UI::REMOVE_BLIP((Blip*) &a0);
  return mrb_nil_value();
}

  mrb_value mruby__UI__GET_HUD_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  int r0;
  int r1;
  int r2;
  int r3;
  UI::GET_HUD_COLOUR(a0,&r0,&r1,&r2,&r3);
    mrb_value rarray = mrb_ary_new_capa(mrb,4);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  mrb_ary_set(mrb,rarray,2,mrb_fixnum_value(r2));
  mrb_ary_set(mrb,rarray,3,mrb_fixnum_value(r3));
  return rarray;

}

  mrb_value mruby__PATHFIND__GET_STREET_NAME_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0,&a1,&a2);
  Hash r0;
  Hash r1;
  PATHFIND::GET_STREET_NAME_AT_COORD(a0,a1,a2,&r0,&r1);
    mrb_value rarray = mrb_ary_new_capa(mrb,2);
  
  mrb_ary_set(mrb,rarray,0,mrb_fixnum_value(r0));
  mrb_ary_set(mrb,rarray,1,mrb_fixnum_value(r1));
  return rarray;

}

mrb_value mruby__PLAYER__GET_PLAYER_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Ped r0 = PLAYER::GET_PLAYER_PED(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PLAYER__GET_PLAYER_PED_SCRIPT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Ped r0 = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PLAYER__SET_PLAYER_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PLAYER::SET_PLAYER_MODEL(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__CHANGE_PLAYER_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iibb",&a0, &a1, &a2, &a3);
  PLAYER::CHANGE_PLAYER_PED(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__GET_NUMBER_OF_PLAYERS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = PLAYER::GET_NUMBER_OF_PLAYERS();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__GET_PLAYER_TEAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PLAYER::GET_PLAYER_TEAM(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__SET_PLAYER_TEAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PLAYER::SET_PLAYER_TEAM(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__GET_PLAYER_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  char* cstr = PLAYER::GET_PLAYER_NAME(a0);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__PLAYER__GET_WANTED_LEVEL_RADIUS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = PLAYER::GET_WANTED_LEVEL_RADIUS(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__PLAYER__GET_PLAYER_WANTED_CENTRE_POSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = PLAYER::GET_PLAYER_WANTED_CENTRE_POSITION(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__PLAYER__SET_PLAYER_WANTED_CENTRE_POSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__GET_WANTED_LEVEL_THRESHOLD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PLAYER::GET_WANTED_LEVEL_THRESHOLD(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__SET_PLAYER_WANTED_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  PLAYER::SET_PLAYER_WANTED_LEVEL(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_WANTED_LEVEL_NO_DROP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  PLAYER::SET_PLAYER_WANTED_LEVEL_NO_DROP(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_WANTED_LEVEL_NOW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_PLAYER_WANTED_LEVEL_NOW(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__ARE_PLAYER_STARS_GREYED_OUT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::ARE_PLAYER_STARS_GREYED_OUT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__SET_DISPATCH_COPS_FOR_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_DISPATCH_COPS_FOR_PLAYER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__IS_PLAYER_WANTED_LEVEL_GREATER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PLAYER::IS_PLAYER_WANTED_LEVEL_GREATER(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__CLEAR_PLAYER_WANTED_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::CLEAR_PLAYER_WANTED_LEVEL(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__IS_PLAYER_DEAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::IS_PLAYER_DEAD(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__IS_PLAYER_PRESSING_HORN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::IS_PLAYER_PRESSING_HORN(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__SET_PLAYER_CONTROL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_get_args(mrb,"ibi",&a0, &a1, &a2);
  PLAYER::SET_PLAYER_CONTROL(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__GET_PLAYER_WANTED_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PLAYER::GET_PLAYER_WANTED_LEVEL(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__SET_MAX_WANTED_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::SET_MAX_WANTED_LEVEL(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_POLICE_RADAR_BLIPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  PLAYER::SET_POLICE_RADAR_BLIPS(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_POLICE_IGNORE_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_POLICE_IGNORE_PLAYER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__IS_PLAYER_PLAYING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::IS_PLAYER_PLAYING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__SET_EVERYONE_IGNORE_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_EVERYONE_IGNORE_PLAYER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_ALL_RANDOM_PEDS_FLEE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_ALL_RANDOM_PEDS_FLEE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_HUD_ANIM_STOP_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_HUD_ANIM_STOP_LEVEL(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_AREAS_GENERATOR_ORIENTATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::SET_AREAS_GENERATOR_ORIENTATION(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_WANTED_LEVEL_MULTIPLIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  PLAYER::SET_WANTED_LEVEL_MULTIPLIER(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_WANTED_LEVEL_DIFFICULTY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PLAYER::SET_WANTED_LEVEL_DIFFICULTY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__RESET_WANTED_LEVEL_DIFFICULTY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::RESET_WANTED_LEVEL_DIFFICULTY(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__START_FIRING_AMNESTY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::START_FIRING_AMNESTY(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__REPORT_CRIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  PLAYER::REPORT_CRIME(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0x9A987297ED8BD838(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PLAYER::_0x9A987297ED8BD838(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0xBC9490CA15AEA8FB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::_0xBC9490CA15AEA8FB(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0x4669B3ED80F24B4E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::_0x4669B3ED80F24B4E(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0xAD73CE5A09E42D12(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::_0xAD73CE5A09E42D12(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0x36F1B38855F2A8DF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::_0x36F1B38855F2A8DF(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0xDC64D2C53493ED12(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::_0xDC64D2C53493ED12(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0xB45EFF719D8427A6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  PLAYER::_0xB45EFF719D8427A6(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0x0032A6DBA562C518(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  PLAYER::_0x0032A6DBA562C518();
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__CAN_PLAYER_START_MISSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::CAN_PLAYER_START_MISSION(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__IS_PLAYER_READY_FOR_CUTSCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::IS_PLAYER_READY_FOR_CUTSCENE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__IS_PLAYER_TARGETTING_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PLAYER::IS_PLAYER_TARGETTING_ENTITY(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__IS_PLAYER_FREE_AIMING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::IS_PLAYER_FREE_AIMING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__IS_PLAYER_FREE_AIMING_AT_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PLAYER::IS_PLAYER_FREE_AIMING_AT_ENTITY(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__SET_PLAYER_LOCKON_RANGE_OVERRIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PLAYER::SET_PLAYER_LOCKON_RANGE_OVERRIDE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_CAN_DO_DRIVE_BY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_PLAYER_CAN_DO_DRIVE_BY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_CAN_USE_COVER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_PLAYER_CAN_USE_COVER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__GET_MAX_WANTED_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = PLAYER::GET_MAX_WANTED_LEVEL();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__IS_PLAYER_TARGETTING_ANYTHING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::IS_PLAYER_TARGETTING_ANYTHING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__SET_PLAYER_SPRINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_PLAYER_SPRINT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__RESET_PLAYER_STAMINA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::RESET_PLAYER_STAMINA(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__RESTORE_PLAYER_STAMINA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PLAYER::RESTORE_PLAYER_STAMINA(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__GET_PLAYER_SPRINT_STAMINA_REMAINING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = PLAYER::GET_PLAYER_SPRINT_STAMINA_REMAINING(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__PLAYER__GET_PLAYER_SPRINT_TIME_REMAINING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = PLAYER::GET_PLAYER_SPRINT_TIME_REMAINING(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__PLAYER__GET_PLAYER_UNDERWATER_TIME_REMAINING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = PLAYER::GET_PLAYER_UNDERWATER_TIME_REMAINING(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__PLAYER__GET_PLAYER_GROUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PLAYER::GET_PLAYER_GROUP(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__GET_PLAYER_MAX_ARMOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PLAYER::GET_PLAYER_MAX_ARMOUR(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__IS_PLAYER_CONTROL_ON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::IS_PLAYER_CONTROL_ON(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER___0x7C814D2FB49F40C0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = PLAYER::_0x7C814D2FB49F40C0();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__IS_PLAYER_SCRIPT_CONTROL_ON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::IS_PLAYER_SCRIPT_CONTROL_ON(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__IS_PLAYER_CLIMBING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::IS_PLAYER_CLIMBING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__IS_PLAYER_BEING_ARRESTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_bool r0 = PLAYER::IS_PLAYER_BEING_ARRESTED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__RESET_PLAYER_ARREST_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::RESET_PLAYER_ARREST_STATE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__GET_PLAYERS_LAST_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Vehicle r0 = PLAYER::GET_PLAYERS_LAST_VEHICLE();
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vehicle"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PLAYER__GET_PLAYER_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Player r0 = PLAYER::GET_PLAYER_INDEX();
  mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Player"), 0, NULL);
  (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
  return rret;
}

mrb_value mruby__PLAYER__INT_TO_PLAYERINDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Player r0 = PLAYER::INT_TO_PLAYERINDEX(a0);
  mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Player"), 0, NULL);
  (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
  return rret;
}

mrb_value mruby__PLAYER__INT_TO_PARTICIPANTINDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PLAYER::INT_TO_PARTICIPANTINDEX(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__GET_TIME_SINCE_PLAYER_HIT_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PLAYER::GET_TIME_SINCE_PLAYER_HIT_VEHICLE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__GET_TIME_SINCE_PLAYER_HIT_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PLAYER::GET_TIME_SINCE_PLAYER_HIT_PED(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PLAYER::GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PLAYER::GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__IS_PLAYER_FREE_FOR_AMBIENT_TASK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::IS_PLAYER_FREE_FOR_AMBIENT_TASK(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__PLAYER_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Player r0 = PLAYER::PLAYER_ID();
  mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Player"), 0, NULL);
  (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
  return rret;
}

mrb_value mruby__PLAYER__PLAYER_PED_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Ped r0 = PLAYER::PLAYER_PED_ID();
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PLAYER__NETWORK_PLAYER_ID_TO_INT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = PLAYER::NETWORK_PLAYER_ID_TO_INT();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__HAS_FORCE_CLEANUP_OCCURRED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::HAS_FORCE_CLEANUP_OCCURRED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__FORCE_CLEANUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::FORCE_CLEANUP(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_get_args(mrb,"si",&a0, &a0_size, &a1);
  PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PLAYER::FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = PLAYER::GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PLAYER::SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__GIVE_ACHIEVEMENT_TO_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::GIVE_ACHIEVEMENT_TO_PLAYER(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER___0xC2AFFFDABBDC2C5C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PLAYER::_0xC2AFFFDABBDC2C5C(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER___0x1C186837D0619335(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Cam r0 = PLAYER::_0x1C186837D0619335(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Cam"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PLAYER__HAS_ACHIEVEMENT_BEEN_PASSED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::HAS_ACHIEVEMENT_BEEN_PASSED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__IS_PLAYER_ONLINE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = PLAYER::IS_PLAYER_ONLINE();
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__IS_PLAYER_LOGGING_IN_NP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = PLAYER::IS_PLAYER_LOGGING_IN_NP();
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__DISPLAY_SYSTEM_SIGNIN_UI(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::DISPLAY_SYSTEM_SIGNIN_UI(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__IS_SYSTEM_UI_BEING_DISPLAYED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = PLAYER::IS_SYSTEM_UI_BEING_DISPLAYED();
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__SET_PLAYER_INVINCIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_PLAYER_INVINCIBLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__GET_PLAYER_INVINCIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::GET_PLAYER_INVINCIBLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER___0xCAC57395B151135F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PLAYER::_0xCAC57395B151135F(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__REMOVE_PLAYER_HELMET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::REMOVE_PLAYER_HELMET(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__GIVE_PLAYER_RAGDOLL_CONTROL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::GIVE_PLAYER_RAGDOLL_CONTROL(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_LOCKON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_PLAYER_LOCKON(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_TARGETING_MODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::SET_PLAYER_TARGETING_MODE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0x5702B917B99DB1CD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::_0x5702B917B99DB1CD(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0xB9CF1F793A9F1BF1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = PLAYER::_0xB9CF1F793A9F1BF1();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PLAYER::SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_SWIM_MULTIPLIER_FOR_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PLAYER::SET_SWIM_MULTIPLIER_FOR_PLAYER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PLAYER::SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__GET_TIME_SINCE_LAST_ARREST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = PLAYER::GET_TIME_SINCE_LAST_ARREST();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__GET_TIME_SINCE_LAST_DEATH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = PLAYER::GET_TIME_SINCE_LAST_DEATH();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PLAYER__ASSISTED_MOVEMENT_CLOSE_ROUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  PLAYER::ASSISTED_MOVEMENT_CLOSE_ROUTE();
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__ASSISTED_MOVEMENT_FLUSH_ROUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  PLAYER::ASSISTED_MOVEMENT_FLUSH_ROUTE();
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_FORCED_AIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_PLAYER_FORCED_AIM(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_FORCED_ZOOM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_PLAYER_FORCED_ZOOM(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_FORCE_SKIP_AIM_INTRO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_PLAYER_FORCE_SKIP_AIM_INTRO(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__DISABLE_PLAYER_FIRING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::DISABLE_PLAYER_FIRING(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0xB885852C39CC265D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  PLAYER::_0xB885852C39CC265D();
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_DISABLE_AMBIENT_MELEE_MOVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_DISABLE_AMBIENT_MELEE_MOVE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_MAX_ARMOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PLAYER::SET_PLAYER_MAX_ARMOUR(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SPECIAL_ABILITY_DEACTIVATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::SPECIAL_ABILITY_DEACTIVATE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SPECIAL_ABILITY_DEACTIVATE_FAST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::SPECIAL_ABILITY_DEACTIVATE_FAST(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SPECIAL_ABILITY_RESET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::SPECIAL_ABILITY_RESET(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0xC9A763D8FE87436A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::_0xC9A763D8FE87436A(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SPECIAL_ABILITY_CHARGE_SMALL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  PLAYER::SPECIAL_ABILITY_CHARGE_SMALL(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SPECIAL_ABILITY_CHARGE_MEDIUM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  PLAYER::SPECIAL_ABILITY_CHARGE_MEDIUM(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SPECIAL_ABILITY_CHARGE_LARGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  PLAYER::SPECIAL_ABILITY_CHARGE_LARGE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SPECIAL_ABILITY_CHARGE_CONTINUOUS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SPECIAL_ABILITY_CHARGE_CONTINUOUS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SPECIAL_ABILITY_CHARGE_ABSOLUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  PLAYER::SPECIAL_ABILITY_CHARGE_ABSOLUTE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SPECIAL_ABILITY_CHARGE_NORMALIZED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ifb",&a0, &a1, &a2);
  PLAYER::SPECIAL_ABILITY_CHARGE_NORMALIZED(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SPECIAL_ABILITY_FILL_METER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SPECIAL_ABILITY_FILL_METER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SPECIAL_ABILITY_DEPLETE_METER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SPECIAL_ABILITY_DEPLETE_METER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SPECIAL_ABILITY_LOCK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::SPECIAL_ABILITY_LOCK(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SPECIAL_ABILITY_UNLOCK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::SPECIAL_ABILITY_UNLOCK(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__IS_SPECIAL_ABILITY_UNLOCKED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::IS_SPECIAL_ABILITY_UNLOCKED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__IS_SPECIAL_ABILITY_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::IS_SPECIAL_ABILITY_ACTIVE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__IS_SPECIAL_ABILITY_METER_FULL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::IS_SPECIAL_ABILITY_METER_FULL(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__ENABLE_SPECIAL_ABILITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::ENABLE_SPECIAL_ABILITY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__IS_SPECIAL_ABILITY_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::IS_SPECIAL_ABILITY_ENABLED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__SET_SPECIAL_ABILITY_MULTIPLIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  PLAYER::SET_SPECIAL_ABILITY_MULTIPLIER(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0xFFEE8FA29AB9A18E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::_0xFFEE8FA29AB9A18E(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0x5FC472C501CCADB3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::_0x5FC472C501CCADB3(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER___0xF10B44FD479D69F3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PLAYER::_0xF10B44FD479D69F3(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER___0xDD2620B7B9D16FF1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  mrb_bool r0 = PLAYER::_0xDD2620B7B9D16FF1(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__START_PLAYER_TELEPORT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_get_args(mrb,"iffffbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  PLAYER::START_PLAYER_TELEPORT(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___HAS_PLAYER_TELEPORT_FINISHED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::_HAS_PLAYER_TELEPORT_FINISHED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__STOP_PLAYER_TELEPORT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  PLAYER::STOP_PLAYER_TELEPORT();
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__IS_PLAYER_TELEPORT_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = PLAYER::IS_PLAYER_TELEPORT_ACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__GET_PLAYER_CURRENT_STEALTH_NOISE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = PLAYER::GET_PLAYER_CURRENT_STEALTH_NOISE(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__PLAYER__SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PLAYER::SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_WEAPON_DAMAGE_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PLAYER::SET_PLAYER_WEAPON_DAMAGE_MODIFIER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_WEAPON_DEFENSE_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PLAYER::SET_PLAYER_WEAPON_DEFENSE_MODIFIER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PLAYER::SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PLAYER::SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_VEHICLE_DAMAGE_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PLAYER::SET_PLAYER_VEHICLE_DAMAGE_MODIFIER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_VEHICLE_DEFENSE_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PLAYER::SET_PLAYER_VEHICLE_DEFENSE_MODIFIER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_PARACHUTE_TINT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PLAYER::SET_PLAYER_PARACHUTE_TINT_INDEX(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PLAYER::SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_PARACHUTE_PACK_TINT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PLAYER::SET_PLAYER_PARACHUTE_PACK_TINT_INDEX(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_HAS_RESERVE_PARACHUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::SET_PLAYER_HAS_RESERVE_PARACHUTE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__GET_PLAYER_HAS_RESERVE_PARACHUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::GET_PLAYER_HAS_RESERVE_PARACHUTE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  PLAYER::SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_NOISE_MULTIPLIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PLAYER::SET_PLAYER_NOISE_MULTIPLIER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PLAYER::SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__CAN_PED_HEAR_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PLAYER::CAN_PED_HEAR_PLAYER(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__SIMULATE_PLAYER_INPUT_GAIT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_int a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_get_args(mrb,"ififbb",&a0, &a1, &a2, &a3, &a4, &a5);
  PLAYER::SIMULATE_PLAYER_INPUT_GAIT(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__RESET_PLAYER_INPUT_GAIT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::RESET_PLAYER_INPUT_GAIT(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0xD2B315B6689D537D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::_0xD2B315B6689D537D(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_STEALTH_PERCEPTION_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PLAYER::SET_PLAYER_STEALTH_PERCEPTION_MODIFIER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0x690A61A6D13583F6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::_0x690A61A6D13583F6(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER___0x9EDD76E87D5D51BA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::_0x9EDD76E87D5D51BA(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_SIMULATE_AIMING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_PLAYER_SIMULATE_AIMING(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_CLOTH_PIN_FRAMES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::SET_PLAYER_CLOTH_PIN_FRAMES(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_CLOTH_PACKAGE_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::SET_PLAYER_CLOTH_PACKAGE_INDEX(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_CLOTH_LOCK_COUNTER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::SET_PLAYER_CLOTH_LOCK_COUNTER(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__PLAYER_ATTACH_VIRTUAL_BOUND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_get_args(mrb,"ffffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__PLAYER_DETACH_VIRTUAL_BOUND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  PLAYER::PLAYER_DETACH_VIRTUAL_BOUND();
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER___0x38D28DA81E4E9BF9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::_0x38D28DA81E4E9BF9(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER___0xBC0753C9CA14B506(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  mrb_bool r0 = PLAYER::_0xBC0753C9CA14B506(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER___0x5006D96C995A5827(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  PLAYER::_0x5006D96C995A5827(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__IS_PLAYER_RIDING_TRAIN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::IS_PLAYER_RIDING_TRAIN(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER__HAS_PLAYER_LEFT_THE_WORLD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::HAS_PLAYER_LEFT_THE_WORLD(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER___0xFF300C7649724A0B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PLAYER::_0xFF300C7649724A0B(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_bool a4;
  mrb_get_args(mrb,"iiiib",&a0, &a1, &a2, &a3, &a4);
  PLAYER::SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PLAYER::SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PLAYER::SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER__DISABLE_PLAYER_VEHICLE_REWARDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::DISABLE_PLAYER_VEHICLE_REWARDS(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0x2F7CEB6520288061(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  PLAYER::_0x2F7CEB6520288061(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0x5DC40A8869C22141(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_int a1;
  mrb_get_args(mrb,"bi",&a0, &a1);
  PLAYER::_0x5DC40A8869C22141(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0x65FAEE425DE637B0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PLAYER::_0x65FAEE425DE637B0(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PLAYER___0x5501B7A5CDB79D37(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PLAYER::_0x5501B7A5CDB79D37(a0);
  return mrb_nil_value();
}

mrb_value mruby__PLAYER___0x56105E599CAB0EFA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = PLAYER::_0x56105E599CAB0EFA(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ENTITY__DOES_ENTITY_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::DOES_ENTITY_EXIST(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__DOES_ENTITY_BELONG_TO_THIS_SCRIPT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_bool r0 = ENTITY::DOES_ENTITY_BELONG_TO_THIS_SCRIPT(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__DOES_ENTITY_HAVE_DRAWABLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::DOES_ENTITY_HAVE_DRAWABLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__DOES_ENTITY_HAVE_PHYSICS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::DOES_ENTITY_HAVE_PHYSICS(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__HAS_ENTITY_ANIM_FINISHED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_int a3;
  mrb_get_args(mrb,"issi",&a0, &a1, &a1_size, &a2, &a2_size, &a3);
  mrb_bool r0 = ENTITY::HAS_ENTITY_ANIM_FINISHED(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  mrb_bool r0 = ENTITY::HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__HAS_ENTITY_CLEAR_LOS_TO_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = ENTITY::HAS_ENTITY_CLEAR_LOS_TO_ENTITY(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = ENTITY::HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__HAS_ENTITY_COLLIDED_WITH_ANYTHING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::HAS_ENTITY_COLLIDED_WITH_ANYTHING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__GET_LAST_MATERIAL_HIT_BY_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Hash r0 = ENTITY::GET_LAST_MATERIAL_HIT_BY_ENTITY(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__ENTITY__GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = ENTITY::GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__ENTITY__FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ENTITY::FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(a0);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__GET_ENTITY_ANIM_CURRENT_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iss",&a0, &a1, &a1_size, &a2, &a2_size);
  mrb_float r0 = ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2));
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__ENTITY__GET_ENTITY_ANIM_TOTAL_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iss",&a0, &a1, &a1_size, &a2, &a2_size);
  mrb_float r0 = ENTITY::GET_ENTITY_ANIM_TOTAL_TIME(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2));
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__ENTITY___GET_ANIM_DURATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"ss",&a0, &a0_size, &a1, &a1_size);
  mrb_float r0 = ENTITY::_GET_ANIM_DURATION((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1));
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__ENTITY__GET_ENTITY_ATTACHED_TO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Entity r0 = ENTITY::GET_ENTITY_ATTACHED_TO(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Entity"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__ENTITY__GET_ENTITY_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  Vector3 r0 = ENTITY::GET_ENTITY_COORDS(a0, a1);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__ENTITY__GET_ENTITY_FORWARD_VECTOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = ENTITY::GET_ENTITY_FORWARD_VECTOR(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__ENTITY__GET_ENTITY_FORWARD_X(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = ENTITY::GET_ENTITY_FORWARD_X(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__ENTITY__GET_ENTITY_FORWARD_Y(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = ENTITY::GET_ENTITY_FORWARD_Y(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__ENTITY__GET_ENTITY_HEADING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = ENTITY::GET_ENTITY_HEADING(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__ENTITY___GET_ENTITY_PHYSICS_HEADING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = ENTITY::_GET_ENTITY_PHYSICS_HEADING(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__ENTITY__GET_ENTITY_HEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = ENTITY::GET_ENTITY_HEALTH(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ENTITY__GET_ENTITY_MAX_HEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = ENTITY::GET_ENTITY_MAX_HEALTH(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ENTITY__SET_ENTITY_MAX_HEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  ENTITY::SET_ENTITY_MAX_HEALTH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__GET_ENTITY_HEIGHT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_get_args(mrb,"ifffbb",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_float r0 = ENTITY::GET_ENTITY_HEIGHT(a0, a1, a2, a3, a4, a5);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__ENTITY__GET_ENTITY_HEIGHT_ABOVE_GROUND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = ENTITY::GET_ENTITY_HEIGHT_ABOVE_GROUND(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__ENTITY__GET_ENTITY_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Hash r0 = ENTITY::GET_ENTITY_MODEL(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__ENTITY__GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  Vector3 r0 = ENTITY::GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(a0, a1, a2, a3);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__ENTITY__GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  Vector3 r0 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(a0, a1, a2, a3);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__ENTITY__GET_ENTITY_PITCH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = ENTITY::GET_ENTITY_PITCH(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__ENTITY__GET_ENTITY_ROLL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = ENTITY::GET_ENTITY_ROLL(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__ENTITY__GET_ENTITY_ROTATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Vector3 r0 = ENTITY::GET_ENTITY_ROTATION(a0, a1);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__ENTITY__GET_ENTITY_ROTATION_VELOCITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = ENTITY::GET_ENTITY_ROTATION_VELOCITY(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__ENTITY__GET_ENTITY_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = ENTITY::GET_ENTITY_SPEED(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__ENTITY__GET_ENTITY_SPEED_VECTOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  Vector3 r0 = ENTITY::GET_ENTITY_SPEED_VECTOR(a0, a1);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__ENTITY__GET_ENTITY_UPRIGHT_VALUE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = ENTITY::GET_ENTITY_UPRIGHT_VALUE(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__ENTITY__GET_ENTITY_VELOCITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = ENTITY::GET_ENTITY_VELOCITY(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__ENTITY__GET_OBJECT_INDEX_FROM_ENTITY_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Object r0 = ENTITY::GET_OBJECT_INDEX_FROM_ENTITY_INDEX(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Object"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__ENTITY__GET_PED_INDEX_FROM_ENTITY_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Ped r0 = ENTITY::GET_PED_INDEX_FROM_ENTITY_INDEX(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__ENTITY__GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vehicle r0 = ENTITY::GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vehicle"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__ENTITY__GET_WORLD_POSITION_OF_ENTITY_BONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Vector3 r0 = ENTITY::GET_WORLD_POSITION_OF_ENTITY_BONE(a0, a1);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__ENTITY__GET_NEAREST_PLAYER_TO_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Player r0 = ENTITY::GET_NEAREST_PLAYER_TO_ENTITY(a0);
  mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Player"), 0, NULL);
  (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
  return rret;
}

mrb_value mruby__ENTITY__GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Player r0 = ENTITY::GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(a0, a1);
  mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Player"), 0, NULL);
  (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
  return rret;
}

mrb_value mruby__ENTITY__GET_ENTITY_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = ENTITY::GET_ENTITY_TYPE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ENTITY___GET_ENTITY_POPULATION_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = ENTITY::_GET_ENTITY_POPULATION_TYPE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ENTITY__IS_AN_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_AN_ENTITY(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_A_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_A_PED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_A_MISSION_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_A_MISSION_ENTITY(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_A_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_A_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_AN_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_AN_OBJECT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_bool a7;
  mrb_bool a8;
  mrb_int a9;
  mrb_get_args(mrb,"iffffffbbi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  mrb_bool r0 = ENTITY::IS_ENTITY_AT_COORD(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_AT_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_int a7;
  mrb_get_args(mrb,"iifffbbi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  mrb_bool r0 = ENTITY::IS_ENTITY_AT_ENTITY(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_ATTACHED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_ATTACHED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_ATTACHED_TO_ANY_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_ATTACHED_TO_ANY_OBJECT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_ATTACHED_TO_ANY_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_ATTACHED_TO_ANY_PED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_ATTACHED_TO_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = ENTITY::IS_ENTITY_ATTACHED_TO_ENTITY(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_DEAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_DEAD(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_IN_AIR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_IN_AIR(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_IN_ANGLED_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_bool a8;
  mrb_bool a9;
  mrb_int a10;
  mrb_get_args(mrb,"ifffffffbbi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10);
  mrb_bool r0 = ENTITY::IS_ENTITY_IN_ANGLED_AREA(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_bool a7;
  mrb_bool a8;
  mrb_int a9;
  mrb_get_args(mrb,"iffffffbbi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  mrb_bool r0 = ENTITY::IS_ENTITY_IN_AREA(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_IN_ZONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_bool r0 = ENTITY::IS_ENTITY_IN_ZONE(a0, (a1_size == 0 ? 0 : a1));
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_IN_WATER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_IN_WATER(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__GET_ENTITY_SUBMERGED_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = ENTITY::GET_ENTITY_SUBMERGED_LEVEL(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__ENTITY___0x694E00132F2823ED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::_0x694E00132F2823ED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__IS_ENTITY_ON_SCREEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_ON_SCREEN(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_PLAYING_ANIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_int a3;
  mrb_get_args(mrb,"issi",&a0, &a1, &a1_size, &a2, &a2_size, &a3);
  mrb_bool r0 = ENTITY::IS_ENTITY_PLAYING_ANIM(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_STATIC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_STATIC(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_TOUCHING_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = ENTITY::IS_ENTITY_TOUCHING_ENTITY(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_TOUCHING_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = ENTITY::IS_ENTITY_TOUCHING_MODEL(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_UPRIGHT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  mrb_bool r0 = ENTITY::IS_ENTITY_UPRIGHT(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_UPSIDEDOWN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_UPSIDEDOWN(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_VISIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_VISIBLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_VISIBLE_TO_SCRIPT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_VISIBLE_TO_SCRIPT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_OCCLUDED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_OCCLUDED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__WOULD_ENTITY_BE_OCCLUDED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ifffb",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = ENTITY::WOULD_ENTITY_BE_OCCLUDED(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__IS_ENTITY_WAITING_FOR_WORLD_COLLISION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::IS_ENTITY_WAITING_FOR_WORLD_COLLISION(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_bool a8;
  mrb_get_args(mrb,"iifffbbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  ENTITY::APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__APPLY_FORCE_TO_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_int a8;
  mrb_bool a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_bool a12;
  mrb_bool a13;
  mrb_get_args(mrb,"iiffffffibbbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13);
  ENTITY::APPLY_FORCE_TO_ENTITY(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__ATTACH_ENTITY_TO_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_bool a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_bool a12;
  mrb_int a13;
  mrb_bool a14;
  mrb_get_args(mrb,"iiiffffffbbbbib",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14);
  ENTITY::ATTACH_ENTITY_TO_ENTITY(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_float a11;
  mrb_float a12;
  mrb_float a13;
  mrb_bool a14;
  mrb_bool a15;
  mrb_bool a16;
  mrb_bool a17;
  mrb_int a18;
  mrb_get_args(mrb,"iiiiffffffffffbbbbi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14, &a15, &a16, &a17, &a18);
  ENTITY::ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__PROCESS_ENTITY_ATTACHMENTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ENTITY::PROCESS_ENTITY_ATTACHMENTS(a0);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__GET_ENTITY_BONE_INDEX_BY_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_int r0 = ENTITY::GET_ENTITY_BONE_INDEX_BY_NAME(a0, (a1_size == 0 ? 0 : a1));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ENTITY__CLEAR_ENTITY_LAST_DAMAGE_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ENTITY::CLEAR_ENTITY_LAST_DAMAGE_ENTITY(a0);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__DELETE_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Entity a0;
  mrb_get_args(mrb,"i",&a0);
  ENTITY::DELETE_ENTITY(&a0);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__DETACH_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  ENTITY::DETACH_ENTITY(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__FREEZE_ENTITY_POSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::FREEZE_ENTITY_POSITION(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY___0x3910051CCECDB00C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::_0x3910051CCECDB00C(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__PLAY_ENTITY_ANIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_float a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_float a7;
  mrb_int a8;
  mrb_get_args(mrb,"issfbbbfi",&a0, &a1, &a1_size, &a2, &a2_size, &a3, &a4, &a5, &a6, &a7, &a8);
  mrb_bool r0 = ENTITY::PLAY_ENTITY_ANIM(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), a3, a4, a5, a6, a7, a8);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__PLAY_SYNCHRONIZED_ENTITY_ANIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  char* a2;
  int a2_size;
  char* a3;
  int a3_size;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_float a7;
  mrb_get_args(mrb,"iissffif",&a0, &a1, &a2, &a2_size, &a3, &a3_size, &a4, &a5, &a6, &a7);
  mrb_bool r0 = ENTITY::PLAY_SYNCHRONIZED_ENTITY_ANIM(a0, a1, (a2_size == 0 ? 0 : a2), (a3_size == 0 ? 0 : a3), a4, a5, a6, a7);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__STOP_SYNCHRONIZED_MAP_ENTITY_ANIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_float a5;
  mrb_get_args(mrb,"ffffif",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_bool r0 = ENTITY::STOP_SYNCHRONIZED_MAP_ENTITY_ANIM(a0, a1, a2, a3, a4, a5);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__STOP_ENTITY_ANIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_float a3;
  mrb_get_args(mrb,"issf",&a0, &a1, &a1_size, &a2, &a2_size, &a3);
  Any r0 = ENTITY::STOP_ENTITY_ANIM(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ENTITY__STOP_SYNCHRONIZED_ENTITY_ANIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ifb",&a0, &a1, &a2);
  mrb_bool r0 = ENTITY::STOP_SYNCHRONIZED_ENTITY_ANIM(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__HAS_ANIM_EVENT_FIRED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = ENTITY::HAS_ANIM_EVENT_FIRED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__SET_ENTITY_ANIM_CURRENT_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_float a3;
  mrb_get_args(mrb,"issf",&a0, &a1, &a1_size, &a2, &a2_size, &a3);
  ENTITY::SET_ENTITY_ANIM_CURRENT_TIME(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), a3);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_ANIM_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_float a3;
  mrb_get_args(mrb,"issf",&a0, &a1, &a1_size, &a2, &a2_size, &a3);
  ENTITY::SET_ENTITY_ANIM_SPEED(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), a3);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_AS_MISSION_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  ENTITY::SET_ENTITY_AS_MISSION_ENTITY(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_AS_NO_LONGER_NEEDED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Entity a0;
  mrb_get_args(mrb,"i",&a0);
  ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&a0);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_PED_AS_NO_LONGER_NEEDED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Ped a0;
  mrb_get_args(mrb,"i",&a0);
  ENTITY::SET_PED_AS_NO_LONGER_NEEDED(&a0);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_VEHICLE_AS_NO_LONGER_NEEDED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Vehicle a0;
  mrb_get_args(mrb,"i",&a0);
  ENTITY::SET_VEHICLE_AS_NO_LONGER_NEEDED(&a0);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_CAN_BE_DAMAGED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::SET_ENTITY_CAN_BE_DAMAGED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_get_args(mrb,"ibi",&a0, &a1, &a2);
  ENTITY::SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_COLLISION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  ENTITY::SET_ENTITY_COLLISION(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY___0xCCF1E97BEFDAE480(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::_0xCCF1E97BEFDAE480(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY___0x9EBC85ED0FFFE51C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  ENTITY::_0x9EBC85ED0FFFE51C(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_get_args(mrb,"ifffbbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  ENTITY::SET_ENTITY_COORDS(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY___SET_ENTITY_COORDS_2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_get_args(mrb,"ifffbbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  ENTITY::_SET_ENTITY_COORDS_2(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_COORDS_NO_OFFSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_get_args(mrb,"ifffbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  ENTITY::SET_ENTITY_COORDS_NO_OFFSET(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_DYNAMIC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::SET_ENTITY_DYNAMIC(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_HEADING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  ENTITY::SET_ENTITY_HEADING(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_HEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  ENTITY::SET_ENTITY_HEALTH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_INVINCIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::SET_ENTITY_INVINCIBLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_IS_TARGET_PRIORITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_float a2;
  mrb_get_args(mrb,"ibf",&a0, &a1, &a2);
  ENTITY::SET_ENTITY_IS_TARGET_PRIORITY(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_LIGHTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::SET_ENTITY_LIGHTS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_LOAD_COLLISION_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::SET_ENTITY_LOAD_COLLISION_FLAG(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__HAS_COLLISION_LOADED_AROUND_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ENTITY::HAS_COLLISION_LOADED_AROUND_ENTITY(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ENTITY__SET_ENTITY_MAX_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  ENTITY::SET_ENTITY_MAX_SPEED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_get_args(mrb,"ibi",&a0, &a1, &a2);
  ENTITY::SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_PROOFS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_bool a8;
  mrb_get_args(mrb,"ibbbbbbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  ENTITY::SET_ENTITY_PROOFS(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_QUATERNION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  ENTITY::SET_ENTITY_QUATERNION(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_RECORDS_COLLISIONS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::SET_ENTITY_RECORDS_COLLISIONS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_ROTATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_bool a5;
  mrb_get_args(mrb,"ifffib",&a0, &a1, &a2, &a3, &a4, &a5);
  ENTITY::SET_ENTITY_ROTATION(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_VISIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  ENTITY::SET_ENTITY_VISIBLE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_VELOCITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  ENTITY::SET_ENTITY_VELOCITY(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_HAS_GRAVITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::SET_ENTITY_HAS_GRAVITY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_LOD_DIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  ENTITY::SET_ENTITY_LOD_DIST(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__GET_ENTITY_LOD_DIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = ENTITY::GET_ENTITY_LOD_DIST(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ENTITY__SET_ENTITY_ALPHA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  ENTITY::SET_ENTITY_ALPHA(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__GET_ENTITY_ALPHA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = ENTITY::GET_ENTITY_ALPHA(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ENTITY__RESET_ENTITY_ALPHA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ENTITY::RESET_ENTITY_ALPHA(a0);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY___0x5C3B791D580E0BC2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  ENTITY::_0x5C3B791D580E0BC2(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_ALWAYS_PRERENDER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::SET_ENTITY_ALWAYS_PRERENDER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_RENDER_SCORCHED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::SET_ENTITY_RENDER_SCORCHED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_TRAFFICLIGHT_OVERRIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  ENTITY::SET_ENTITY_TRAFFICLIGHT_OVERRIDE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY___0x78E8E3A640178255(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ENTITY::_0x78E8E3A640178255(a0);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__CREATE_MODEL_SWAP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_bool a6;
  mrb_get_args(mrb,"ffffiib",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  ENTITY::CREATE_MODEL_SWAP(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__REMOVE_MODEL_SWAP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_bool a6;
  mrb_get_args(mrb,"ffffiib",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  ENTITY::REMOVE_MODEL_SWAP(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__CREATE_MODEL_HIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_bool a5;
  mrb_get_args(mrb,"ffffib",&a0, &a1, &a2, &a3, &a4, &a5);
  ENTITY::CREATE_MODEL_HIDE(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_bool a5;
  mrb_get_args(mrb,"ffffib",&a0, &a1, &a2, &a3, &a4, &a5);
  ENTITY::CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__REMOVE_MODEL_HIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"iiiiii",&a0, &a1, &a2, &a3, &a4, &a5);
  ENTITY::REMOVE_MODEL_HIDE(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__CREATE_FORCED_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_int a4;
  mrb_bool a5;
  mrb_get_args(mrb,"fffiib",&a0, &a1, &a2, &a3, &a4, &a5);
  ENTITY::CREATE_FORCED_OBJECT(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__REMOVE_FORCED_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  ENTITY::REMOVE_FORCED_OBJECT(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_NO_COLLISION_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  ENTITY::SET_ENTITY_NO_COLLISION_ENTITY(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY__SET_ENTITY_MOTION_BLUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::SET_ENTITY_MOTION_BLUR(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY___0xE12ABE5E3A389A6C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::_0xE12ABE5E3A389A6C(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY___0xA80AE305E0A3044F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::_0xA80AE305E0A3044F(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY___0xDC6F8601FAF2E893(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::_0xDC6F8601FAF2E893(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY___0x2C2E3DC128F44309(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::_0x2C2E3DC128F44309(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ENTITY___0x1A092BB0C3808B96(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ENTITY::_0x1A092BB0C3808B96(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__CREATE_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_get_args(mrb,"iiffffbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  Ped r0 = PED::CREATE_PED(a0, a1, a2, a3, a4, a5, a6, a7);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED__DELETE_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Ped a0;
  mrb_get_args(mrb,"i",&a0);
  PED::DELETE_PED(&a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__CLONE_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"ifbb",&a0, &a1, &a2, &a3);
  Ped r0 = PED::CLONE_PED(a0, a1, a2, a3);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED___ASSIGN_PLAYER_TO_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::_ASSIGN_PLAYER_TO_PED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_IN_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  mrb_bool r0 = PED::IS_PED_IN_VEHICLE(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_IN_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PED::IS_PED_IN_MODEL(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_IN_ANY_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_bool r0 = PED::IS_PED_IN_ANY_VEHICLE(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_COP_PED_IN_AREA_3D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"ffffff",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_bool r0 = PED::IS_COP_PED_IN_AREA_3D(a0, a1, a2, a3, a4, a5);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_INJURED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_INJURED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_HURT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_HURT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_FATALLY_INJURED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_FATALLY_INJURED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_DEAD_OR_DYING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_bool r0 = PED::IS_PED_DEAD_OR_DYING(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_CONVERSATION_PED_DEAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_CONVERSATION_PED_DEAD(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_AIMING_FROM_COVER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_AIMING_FROM_COVER(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_RELOADING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_RELOADING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_A_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_A_PLAYER(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__CREATE_PED_INSIDE_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_get_args(mrb,"iiiibb",&a0, &a1, &a2, &a3, &a4, &a5);
  Ped r0 = PED::CREATE_PED_INSIDE_VEHICLE(a0, a1, a2, a3, a4, a5);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED__SET_PED_DESIRED_HEADING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_DESIRED_HEADING(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xFF287323B0E2C69A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0xFF287323B0E2C69A(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_FACING_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_get_args(mrb,"iif",&a0, &a1, &a2);
  mrb_bool r0 = PED::IS_PED_FACING_PED(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_IN_MELEE_COMBAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_IN_MELEE_COMBAT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_STOPPED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_STOPPED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_SHOOTING_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_bool a7;
  mrb_bool a8;
  mrb_get_args(mrb,"iffffffbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  mrb_bool r0 = PED::IS_PED_SHOOTING_IN_AREA(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_ANY_PED_SHOOTING_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_get_args(mrb,"ffffffbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  mrb_bool r0 = PED::IS_ANY_PED_SHOOTING_IN_AREA(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_SHOOTING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_SHOOTING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_ACCURACY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_ACCURACY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_ACCURACY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PED::GET_PED_ACCURACY(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__IS_PED_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PED::IS_PED_MODEL(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__EXPLODE_PED_HEAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::EXPLODE_PED_HEAD(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__REMOVE_PED_ELEGANTLY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Ped a0;
  mrb_get_args(mrb,"i",&a0);
  PED::REMOVE_PED_ELEGANTLY(&a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__ADD_ARMOUR_TO_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::ADD_ARMOUR_TO_PED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_ARMOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_ARMOUR(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_INTO_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  PED::SET_PED_INTO_VEHICLE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_ALLOW_VEHICLES_OVERRIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_ALLOW_VEHICLES_OVERRIDE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__CAN_CREATE_RANDOM_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::CAN_CREATE_RANDOM_PED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__CREATE_RANDOM_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  Ped r0 = PED::CREATE_RANDOM_PED(a0, a1, a2);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED__CREATE_RANDOM_PED_AS_DRIVER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  Ped r0 = PED::CREATE_RANDOM_PED_AS_DRIVER(a0, a1);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED__CAN_CREATE_RANDOM_DRIVER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = PED::CAN_CREATE_RANDOM_DRIVER();
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__CAN_CREATE_RANDOM_BIKE_RIDER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = PED::CAN_CREATE_RANDOM_BIKE_RIDER();
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_MOVE_ANIMS_BLEND_OUT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::SET_PED_MOVE_ANIMS_BLEND_OUT(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_BE_DRAGGED_OUT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_BE_DRAGGED_OUT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xF2BEBCDFAFDAA19E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  PED::_0xF2BEBCDFAFDAA19E(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_MALE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_MALE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_HUMAN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_HUMAN(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__GET_VEHICLE_PED_IS_IN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  Vehicle r0 = PED::GET_VEHICLE_PED_IS_IN(a0, a1);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vehicle"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED__RESET_PED_LAST_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::RESET_PED_LAST_VEHICLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  PED::SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  PED::SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x5A7F62FDA59759BD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  PED::_0x5A7F62FDA59759BD();
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  PED::SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_NON_CREATION_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"ffffff",&a0, &a1, &a2, &a3, &a4, &a5);
  PED::SET_PED_NON_CREATION_AREA(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__PED__CLEAR_PED_NON_CREATION_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  PED::CLEAR_PED_NON_CREATION_AREA();
  return mrb_nil_value();
}

mrb_value mruby__PED___0x4759CC730F947C81(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  PED::_0x4759CC730F947C81();
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_ON_MOUNT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_ON_MOUNT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__GET_MOUNT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = PED::GET_MOUNT(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__IS_PED_ON_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_ON_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_ON_SPECIFIC_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PED::IS_PED_ON_SPECIFIC_VEHICLE(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_MONEY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_MONEY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_MONEY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PED::GET_PED_MONEY(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0xFF4803BC019852D9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_int a1;
  mrb_get_args(mrb,"fi",&a0, &a1);
  PED::_0xFF4803BC019852D9(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x6B0E6172C9A4D902(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  PED::_0x6B0E6172C9A4D902(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x9911F4A24485F653(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  PED::_0x9911F4A24485F653(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_SUFFERS_CRITICAL_HITS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_SUFFERS_CRITICAL_HITS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xAFC976FD0580C7B3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0xAFC976FD0580C7B3(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_SITTING_IN_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PED::IS_PED_SITTING_IN_VEHICLE(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_SITTING_IN_ANY_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_SITTING_IN_ANY_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_ON_FOOT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_ON_FOOT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_ON_ANY_BIKE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_ON_ANY_BIKE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_PLANTING_BOMB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_PLANTING_BOMB(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__GET_DEAD_PED_PICKUP_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"iff",&a0, &a1, &a2);
  Vector3 r0 = PED::GET_DEAD_PED_PICKUP_COORDS(a0, a1, a2);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__PED__IS_PED_IN_ANY_BOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_IN_ANY_BOAT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_IN_ANY_SUB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_IN_ANY_SUB(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_IN_ANY_HELI(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_IN_ANY_HELI(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_IN_ANY_PLANE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_IN_ANY_PLANE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_IN_FLYING_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_IN_FLYING_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_DIES_IN_WATER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_DIES_IN_WATER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_DIES_IN_SINKING_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_DIES_IN_SINKING_VEHICLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_ARMOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PED::GET_PED_ARMOUR(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_BE_SHOT_IN_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_BE_SHOT_IN_VEHICLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__CLEAR_PED_LAST_DAMAGE_BONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::CLEAR_PED_LAST_DAMAGE_BONE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_AI_WEAPON_DAMAGE_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  PED::SET_AI_WEAPON_DAMAGE_MODIFIER(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__RESET_AI_WEAPON_DAMAGE_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  PED::RESET_AI_WEAPON_DAMAGE_MODIFIER();
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  PED::SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  PED::RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER();
  return mrb_nil_value();
}

mrb_value mruby__PED___0x2F3C3D9F50681DE4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0x2F3C3D9F50681DE4(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_BE_TARGETTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_BE_TARGETTED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_BE_TARGETTED_BY_TEAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  PED::SET_PED_CAN_BE_TARGETTED_BY_TEAM(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_BE_TARGETTED_BY_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  PED::SET_PED_CAN_BE_TARGETTED_BY_PLAYER(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x061CB768363D6424(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0x061CB768363D6424(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_TIME_EXCLUSIVE_DISPLAY_TEXTURE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_TIME_EXCLUSIVE_DISPLAY_TEXTURE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_IN_ANY_POLICE_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_IN_ANY_POLICE_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__FORCE_PED_TO_OPEN_PARACHUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::FORCE_PED_TO_OPEN_PARACHUTE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_IN_PARACHUTE_FREE_FALL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_IN_PARACHUTE_FREE_FALL(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_FALLING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_FALLING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_JUMPING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_JUMPING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_CLIMBING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_CLIMBING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_VAULTING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_VAULTING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_DIVING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_DIVING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_JUMPING_OUT_OF_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_JUMPING_OUT_OF_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0x26AF0E8E30BD2A2C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0x26AF0E8E30BD2A2C(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__GET_PED_PARACHUTE_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PED::GET_PED_PARACHUTE_STATE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__GET_PED_PARACHUTE_LANDING_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PED::GET_PED_PARACHUTE_LANDING_TYPE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_PED_PARACHUTE_TINT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_PARACHUTE_TINT_INDEX(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_RESERVE_PARACHUTE_TINT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_RESERVE_PARACHUTE_TINT_INDEX(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x8C4F3BF23B6237DB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  Any r0 = PED::_0x8C4F3BF23B6237DB(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_PED_DUCKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_DUCKING(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_DUCKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_DUCKING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_IN_ANY_TAXI(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_IN_ANY_TAXI(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_ID_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_ID_RANGE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x52D59AB61DDC05DD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0x52D59AB61DDC05DD(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xEC4B4B3B9908052A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::_0xEC4B4B3B9908052A(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x733C87D4CE22BEA2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0x733C87D4CE22BEA2(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_SEEING_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_SEEING_RANGE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_HEARING_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_HEARING_RANGE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_VISUAL_FIELD_MIN_ANGLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_VISUAL_FIELD_MIN_ANGLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_VISUAL_FIELD_MAX_ANGLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_VISUAL_FIELD_MAX_ANGLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_VISUAL_FIELD_CENTER_ANGLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_VISUAL_FIELD_CENTER_ANGLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_STEALTH_MOVEMENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"ibs",&a0, &a1, &a2, &a2_size);
  PED::SET_PED_STEALTH_MOVEMENT(a0, a1, (a2_size == 0 ? 0 : a2));
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_STEALTH_MOVEMENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::GET_PED_STEALTH_MOVEMENT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__CREATE_GROUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PED::CREATE_GROUP(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_PED_AS_GROUP_LEADER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_AS_GROUP_LEADER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_AS_GROUP_MEMBER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_AS_GROUP_MEMBER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  PED::SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__REMOVE_GROUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::REMOVE_GROUP(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__REMOVE_PED_FROM_GROUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::REMOVE_PED_FROM_GROUP(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_GROUP_MEMBER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PED::IS_PED_GROUP_MEMBER(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_HANGING_ON_TO_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_HANGING_ON_TO_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_GROUP_SEPARATION_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_GROUP_SEPARATION_RANGE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_MIN_GROUND_TIME_FOR_STUNGUN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_MIN_GROUND_TIME_FOR_STUNGUN(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_PRONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_PRONE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_IN_COMBAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PED::IS_PED_IN_COMBAT(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__CAN_PED_IN_COMBAT_SEE_TARGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PED::CAN_PED_IN_COMBAT_SEE_TARGET(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_DOING_DRIVEBY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_DOING_DRIVEBY(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_JACKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_JACKING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_BEING_JACKED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_BEING_JACKED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_BEING_STUNNED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PED::IS_PED_BEING_STUNNED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__GET_PEDS_JACKER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Ped r0 = PED::GET_PEDS_JACKER(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED__GET_JACK_TARGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Ped r0 = PED::GET_JACK_TARGET(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED__IS_PED_FLEEING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_FLEEING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_IN_COVER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_bool r0 = PED::IS_PED_IN_COVER(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_IN_COVER_FACING_LEFT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_IN_COVER_FACING_LEFT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0x6A03BF943D767C93(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0x6A03BF943D767C93(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_GOING_INTO_COVER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_GOING_INTO_COVER(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_PINNED_DOWN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_get_args(mrb,"ibi",&a0, &a1, &a2);
  Any r0 = PED::SET_PED_PINNED_DOWN(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__GET_SEAT_PED_IS_TRYING_TO_ENTER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PED::GET_SEAT_PED_IS_TRYING_TO_ENTER(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__GET_VEHICLE_PED_IS_TRYING_TO_ENTER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vehicle r0 = PED::GET_VEHICLE_PED_IS_TRYING_TO_ENTER(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vehicle"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED___GET_PED_KILLER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Entity r0 = PED::_GET_PED_KILLER(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Entity"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED__GET_PED_CAUSE_OF_DEATH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Hash r0 = PED::GET_PED_CAUSE_OF_DEATH(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED___GET_PED_TIME_OF_DEATH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PED::_GET_PED_TIME_OF_DEATH(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0x5407B7288D0478B7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = PED::_0x5407B7288D0478B7(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0x336B3D200AB007CB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  Any r0 = PED::_0x336B3D200AB007CB(a0, a1, a2, a3, a4);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_RELATIONSHIP_GROUP_HASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_RELATIONSHIP_GROUP_HASH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_RELATIONSHIP_BETWEEN_GROUPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  PED::SET_RELATIONSHIP_BETWEEN_GROUPS(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__CLEAR_RELATIONSHIP_BETWEEN_GROUPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__REMOVE_RELATIONSHIP_GROUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::REMOVE_RELATIONSHIP_GROUP(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_RELATIONSHIP_BETWEEN_PEDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = PED::GET_RELATIONSHIP_BETWEEN_PEDS(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Hash r0 = PED::GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED__GET_PED_RELATIONSHIP_GROUP_HASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Hash r0 = PED::GET_PED_RELATIONSHIP_GROUP_HASH(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED__GET_RELATIONSHIP_BETWEEN_GROUPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = PED::GET_RELATIONSHIP_BETWEEN_GROUPS(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_TO_INFORM_RESPECTED_FRIENDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_int a2;
  mrb_get_args(mrb,"ifi",&a0, &a1, &a2);
  PED::SET_PED_TO_INFORM_RESPECTED_FRIENDS(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_RESPONDING_TO_EVENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PED::IS_PED_RESPONDING_TO_EVENT(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_FIRING_PATTERN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_FIRING_PATTERN(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_SHOOT_RATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_SHOOT_RATE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_COMBAT_FLOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_get_args(mrb,"iif",&a0, &a1, &a2);
  PED::SET_COMBAT_FLOAT(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_COMBAT_FLOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_float r0 = PED::GET_COMBAT_FLOAT(a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__PED__DOES_GROUP_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::DOES_GROUP_EXIST(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__GET_PED_GROUP_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PED::GET_PED_GROUP_INDEX(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__IS_PED_IN_GROUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_IN_GROUP(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__GET_PLAYER_PED_IS_FOLLOWING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Player r0 = PED::GET_PLAYER_PED_IS_FOLLOWING(a0);
  mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Player"), 0, NULL);
  (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
  return rret;
}

mrb_value mruby__PED__SET_GROUP_FORMATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_GROUP_FORMATION(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_GROUP_FORMATION_SPACING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  PED::SET_GROUP_FORMATION_SPACING(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__PED__RESET_GROUP_FORMATION_DEFAULT_SPACING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::RESET_GROUP_FORMATION_DEFAULT_SPACING(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_VEHICLE_PED_IS_USING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vehicle r0 = PED::GET_VEHICLE_PED_IS_USING(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vehicle"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED__SET_EXCLUSIVE_PHONE_RELATIONSHIPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = PED::SET_EXCLUSIVE_PHONE_RELATIONSHIPS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_PED_GRAVITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_GRAVITY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__APPLY_DAMAGE_TO_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  PED::APPLY_DAMAGE_TO_PED(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x36B77BB84687C318(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = PED::_0x36B77BB84687C318(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_PED_ALLOWED_TO_DUCK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_ALLOWED_TO_DUCK(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_NEVER_LEAVES_GROUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_NEVER_LEAVES_GROUP(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PED::GET_PED_TYPE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_PED_AS_COP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_AS_COP(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_MAX_HEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_MAX_HEALTH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_MAX_HEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PED::GET_PED_MAX_HEALTH(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_PED_MAX_TIME_IN_WATER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_MAX_TIME_IN_WATER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_MAX_TIME_UNDERWATER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_MAX_TIME_UNDERWATER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x2735233A786B1BEF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::_0x2735233A786B1BEF(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x952F06BEECD775CC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  PED::_0x952F06BEECD775CC(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xE6CA85E7259CE16B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0xE6CA85E7259CE16B(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__CAN_KNOCK_PED_OFF_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::CAN_KNOCK_PED_OFF_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__KNOCK_PED_OFF_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::KNOCK_PED_OFF_VEHICLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_COORDS_NO_GANG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  PED::SET_PED_COORDS_NO_GANG(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_AS_GROUP_MEMBER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Ped r0 = PED::GET_PED_AS_GROUP_MEMBER(a0, a1);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED___GET_PED_AS_GROUP_LEADER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Ped r0 = PED::_GET_PED_AS_GROUP_LEADER(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED__SET_PED_KEEP_TASK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_KEEP_TASK(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x49E50BDB8BA4DAB2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0x49E50BDB8BA4DAB2(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_SWIMMING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_SWIMMING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_SWIMMING_UNDER_WATER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_SWIMMING_UNDER_WATER(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_COORDS_KEEP_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  PED::SET_PED_COORDS_KEEP_VEHICLE(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_DIES_IN_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_DIES_IN_VEHICLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_CREATE_RANDOM_COPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  PED::SET_CREATE_RANDOM_COPS(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  PED::SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_CREATE_RANDOM_COPS_ON_SCENARIOS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  PED::SET_CREATE_RANDOM_COPS_ON_SCENARIOS(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__CAN_CREATE_RANDOM_COPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = PED::CAN_CREATE_RANDOM_COPS();
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_AS_ENEMY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_AS_ENEMY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_SMASH_GLASS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  PED::SET_PED_CAN_SMASH_GLASS(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_IN_ANY_TRAIN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_IN_ANY_TRAIN(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_GETTING_INTO_A_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_GETTING_INTO_A_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_ENABLE_HANDCUFFS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_ENABLE_HANDCUFFS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_ENABLE_BOUND_ANKLES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_ENABLE_BOUND_ANKLES(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_ENABLE_SCUBA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_ENABLE_SCUBA(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_CAN_ATTACK_FRIENDLY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  PED::SET_CAN_ATTACK_FRIENDLY(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_ALERTNESS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = PED::GET_PED_ALERTNESS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_PED_ALERTNESS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_ALERTNESS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_MOVEMENT_CLIPSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_get_args(mrb,"isf",&a0, &a1, &a1_size, &a2);
  PED::SET_PED_MOVEMENT_CLIPSET(a0, (a1_size == 0 ? 0 : a1), a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__RESET_PED_MOVEMENT_CLIPSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::RESET_PED_MOVEMENT_CLIPSET(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_STRAFE_CLIPSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  PED::SET_PED_STRAFE_CLIPSET(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__PED__RESET_PED_STRAFE_CLIPSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::RESET_PED_STRAFE_CLIPSET(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_WEAPON_MOVEMENT_CLIPSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  PED::SET_PED_WEAPON_MOVEMENT_CLIPSET(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__PED__RESET_PED_WEAPON_MOVEMENT_CLIPSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::RESET_PED_WEAPON_MOVEMENT_CLIPSET(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  PED::SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__PED__CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x9DBA107B4937F809(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  PED::_0x9DBA107B4937F809(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__PED___0xC79196DCB36F6121(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0xC79196DCB36F6121(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x80054D7FCC70EEC6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0x80054D7FCC70EEC6(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_IN_VEHICLE_CONTEXT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_IN_VEHICLE_CONTEXT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__RESET_PED_IN_VEHICLE_CONTEXT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::RESET_PED_IN_VEHICLE_CONTEXT(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iss",&a0, &a1, &a1_size, &a2, &a2_size);
  mrb_bool r0 = PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2));
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__CLEAR_PED_ALTERNATE_WALK_ANIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::CLEAR_PED_ALTERNATE_WALK_ANIM(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_ALTERNATE_MOVEMENT_ANIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  char* a2;
  int a2_size;
  char* a3;
  int a3_size;
  mrb_float a4;
  mrb_bool a5;
  mrb_get_args(mrb,"iissfb",&a0, &a1, &a2, &a2_size, &a3, &a3_size, &a4, &a5);
  PED::SET_PED_ALTERNATE_MOVEMENT_ANIM(a0, a1, (a2_size == 0 ? 0 : a2), (a3_size == 0 ? 0 : a3), a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__PED__CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_get_args(mrb,"iif",&a0, &a1, &a2);
  PED::CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_DRAWABLE_VARIATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = PED::GET_PED_DRAWABLE_VARIATION(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = PED::GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__GET_PED_TEXTURE_VARIATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = PED::GET_PED_TEXTURE_VARIATION(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_int r0 = PED::GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = PED::GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_int r0 = PED::GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__GET_PED_PALETTE_VARIATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = PED::GET_PED_PALETTE_VARIATION(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0x1E77FA7A62EE6C4C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = PED::_0x1E77FA7A62EE6C4C(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0xF033419D1B81FAE8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = PED::_0xF033419D1B81FAE8(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__IS_PED_COMPONENT_VARIATION_VALID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  mrb_bool r0 = PED::IS_PED_COMPONENT_VARIATION_VALID(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_COMPONENT_VARIATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  PED::SET_PED_COMPONENT_VARIATION(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_RANDOM_COMPONENT_VARIATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_RANDOM_COMPONENT_VARIATION(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_RANDOM_PROPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::SET_PED_RANDOM_PROPS(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_DEFAULT_COMPONENT_VARIATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::SET_PED_DEFAULT_COMPONENT_VARIATION(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_BLEND_FROM_PARENTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iiiff",&a0, &a1, &a2, &a3, &a4);
  PED::SET_PED_BLEND_FROM_PARENTS(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_HEAD_BLEND_DATA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_bool a10;
  mrb_get_args(mrb,"iiiiiiifffb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10);
  PED::SET_PED_HEAD_BLEND_DATA(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return mrb_nil_value();
}

mrb_value mruby__PED__UPDATE_PED_HEAD_BLEND_DATA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  PED::UPDATE_PED_HEAD_BLEND_DATA(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__PED___SET_PED_EYE_COLOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::_SET_PED_EYE_COLOR(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_HEAD_OVERLAY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_get_args(mrb,"iiif",&a0, &a1, &a2, &a3);
  PED::SET_PED_HEAD_OVERLAY(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__PED___GET_PED_HEAD_OVERLAY_VALUE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = PED::_GET_PED_HEAD_OVERLAY_VALUE(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___GET_NUM_HEAD_OVERLAY_VALUES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PED::_GET_NUM_HEAD_OVERLAY_VALUES(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___SET_PED_HEAD_OVERLAY_COLOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  PED::_SET_PED_HEAD_OVERLAY_COLOR(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__PED___SET_PED_HAIR_COLOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  PED::_SET_PED_HAIR_COLOR(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED___GET_NUM_HAIR_COLORS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = PED::_GET_NUM_HAIR_COLORS();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0xD1F7CA1535D22818(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = PED::_0xD1F7CA1535D22818();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0xED6D8E27A43B8CDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0xED6D8E27A43B8CDE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0xEA9960D07DADCF10(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PED::_0xEA9960D07DADCF10(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0x3E802F11FBE27674(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0x3E802F11FBE27674(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0xF41B5D290C99A3D6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0xF41B5D290C99A3D6(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0xE0D36E5D9E99CC21(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0xE0D36E5D9E99CC21(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0xAAA6A3698A69E048(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = PED::_0xAAA6A3698A69E048(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0x0525A2C2562F3CD4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0x0525A2C2562F3CD4(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0x604E810189EE3A59(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0x604E810189EE3A59(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0xC56FBF2F228E1DAC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  Any r0 = PED::_0xC56FBF2F228E1DAC(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___SET_PED_FACE_FEATURE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_get_args(mrb,"iif",&a0, &a1, &a2);
  PED::_SET_PED_FACE_FEATURE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__HAS_PED_HEAD_BLEND_FINISHED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::HAS_PED_HEAD_BLEND_FINISHED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0x4668D80430D6C299(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0x4668D80430D6C299(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xCC9682B8951C5229(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  PED::_0xCC9682B8951C5229(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xA21C118553BBDF02(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0xA21C118553BBDF02(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___GET_FIRST_PARENT_ID_FOR_PED_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PED::_GET_FIRST_PARENT_ID_FOR_PED_TYPE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___GET_NUM_PARENT_PEDS_OF_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PED::_GET_NUM_PARENT_PEDS_OF_TYPE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0x39D55A620FCB6A3A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  Any r0 = PED::_0x39D55A620FCB6A3A(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0x66680A92700F43DF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0x66680A92700F43DF(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0x5AAB586FFEC0FD96(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0x5AAB586FFEC0FD96(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x2B16A3BFF1FBCE49(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  Any r0 = PED::_0x2B16A3BFF1FBCE49(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0x784002A632822099(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0x784002A632822099(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0xF79F9DEF0AADE61A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0xF79F9DEF0AADE61A(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_PROP_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = PED::GET_PED_PROP_INDEX(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_PED_PROP_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_bool a4;
  mrb_get_args(mrb,"iiiib",&a0, &a1, &a2, &a3, &a4);
  PED::SET_PED_PROP_INDEX(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__PED__KNOCK_OFF_PED_PROP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ibbbb",&a0, &a1, &a2, &a3, &a4);
  PED::KNOCK_OFF_PED_PROP(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__PED__CLEAR_PED_PROP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::CLEAR_PED_PROP(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__CLEAR_ALL_PED_PROPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::CLEAR_ALL_PED_PROPS(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xAFF4710E2A0A6C12(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0xAFF4710E2A0A6C12(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_PROP_TEXTURE_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = PED::GET_PED_PROP_TEXTURE_INDEX(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0x1280804F7CFD2D6C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0x1280804F7CFD2D6C(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x36C6984C3ED0C911(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0x36C6984C3ED0C911(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xB50EB4CCB29704AC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0xB50EB4CCB29704AC(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xFEC9A3B1820F3331(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0xFEC9A3B1820F3331(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_BOUNDS_ORIENTATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"ifffff",&a0, &a1, &a2, &a3, &a4, &a5);
  PED::SET_PED_BOUNDS_ORIENTATION(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__PED__REGISTER_TARGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::REGISTER_TARGET(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__REGISTER_HATED_TARGETS_AROUND_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::REGISTER_HATED_TARGETS_AROUND_PED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_RANDOM_PED_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_get_args(mrb,"ffffffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  Ped r0 = PED::GET_RANDOM_PED_AT_COORD(a0, a1, a2, a3, a4, a5, a6);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED__SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  PED::SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x03EA03AF85A85CB7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_int a8;
  mrb_get_args(mrb,"ibbbbbbbi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  mrb_bool r0 = PED::_0x03EA03AF85A85CB7(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0xDED5AF5A0EA4B297(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::_0xDED5AF5A0EA4B297(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_DRIVER_ABILITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_DRIVER_ABILITY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_DRIVER_AGGRESSIVENESS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_DRIVER_AGGRESSIVENESS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__CAN_PED_RAGDOLL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::CAN_PED_RAGDOLL(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_TO_RAGDOLL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_get_args(mrb,"iiiibbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  mrb_bool r0 = PED::SET_PED_TO_RAGDOLL(a0, a1, a2, a3, a4, a5, a6);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_TO_RAGDOLL_WITH_FALL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_int a10;
  mrb_int a11;
  mrb_int a12;
  mrb_int a13;
  mrb_get_args(mrb,"iiiiiiiiiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13);
  Any r0 = PED::SET_PED_TO_RAGDOLL_WITH_FALL(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_PED_RAGDOLL_ON_COLLISION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_RAGDOLL_ON_COLLISION(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_RAGDOLL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_RAGDOLL(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_RUNNING_RAGDOLL_TASK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_RUNNING_RAGDOLL_TASK(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_RAGDOLL_FORCE_FALL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::SET_PED_RAGDOLL_FORCE_FALL(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__RESET_PED_RAGDOLL_TIMER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::RESET_PED_RAGDOLL_TIMER(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_RAGDOLL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_RAGDOLL(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xD1871251F3B5ACD7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0xD1871251F3B5ACD7(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_RUNNING_MOBILE_PHONE_TASK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_RUNNING_MOBILE_PHONE_TASK(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0xA3F3564A5B3646C0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0xA3F3564A5B3646C0(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___SET_PED_RAGDOLL_BLOCKING_FLAGS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::_SET_PED_RAGDOLL_BLOCKING_FLAGS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xD86D101FCFD00A4B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::_0xD86D101FCFD00A4B(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_ANGLED_DEFENSIVE_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_bool a8;
  mrb_bool a9;
  mrb_get_args(mrb,"ifffffffbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  PED::SET_PED_ANGLED_DEFENSIVE_AREA(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_SPHERE_DEFENSIVE_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_get_args(mrb,"iffffbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  PED::SET_PED_SPHERE_DEFENSIVE_AREA(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xF9B8F91AAD3B953E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_get_args(mrb,"iiffffb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  PED::_0xF9B8F91AAD3B953E(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xE4723DB6E736CCFF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_get_args(mrb,"iiffffb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  PED::_0xE4723DB6E736CCFF(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_bool a9;
  mrb_bool a10;
  mrb_get_args(mrb,"iifffffffbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10);
  PED::SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_DEFENSIVE_AREA_DIRECTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ifffb",&a0, &a1, &a2, &a3, &a4);
  PED::SET_PED_DEFENSIVE_AREA_DIRECTION(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__PED__REMOVE_PED_DEFENSIVE_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::REMOVE_PED_DEFENSIVE_AREA(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_DEFENSIVE_AREA_POSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  Vector3 r0 = PED::GET_PED_DEFENSIVE_AREA_POSITION(a0, a1);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__PED___0xBA63D9FE45412247(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_bool r0 = PED::_0xBA63D9FE45412247(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_PREFERRED_COVER_SET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_PREFERRED_COVER_SET(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__REMOVE_PED_PREFERRED_COVER_SET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::REMOVE_PED_PREFERRED_COVER_SET(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__REVIVE_INJURED_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::REVIVE_INJURED_PED(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__RESURRECT_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::RESURRECT_PED(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_NAME_DEBUG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  PED::SET_PED_NAME_DEBUG(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_EXTRACTED_DISPLACEMENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  Vector3 r0 = PED::GET_PED_EXTRACTED_DISPLACEMENT(a0, a1);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__PED__SET_PED_DIES_WHEN_INJURED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_DIES_WHEN_INJURED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_ENABLE_WEAPON_BLOCKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_ENABLE_WEAPON_BLOCKING(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xF9ACF4A08098EA25(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0xF9ACF4A08098EA25(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__RESET_PED_VISIBLE_DAMAGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::RESET_PED_VISIBLE_DAMAGE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__APPLY_PED_BLOOD_DAMAGE_BY_ZONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiffi",&a0, &a1, &a2, &a3, &a4);
  PED::APPLY_PED_BLOOD_DAMAGE_BY_ZONE(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__PED__APPLY_PED_BLOOD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  char* a5;
  int a5_size;
  mrb_get_args(mrb,"iifffs",&a0, &a1, &a2, &a3, &a4, &a5, &a5_size);
  PED::APPLY_PED_BLOOD(a0, a1, a2, a3, a4, (a5_size == 0 ? 0 : a5));
  return mrb_nil_value();
}

mrb_value mruby__PED__APPLY_PED_DAMAGE_DECAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_bool a8;
  char* a9;
  int a9_size;
  mrb_get_args(mrb,"iifffffibs",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a9_size);
  PED::APPLY_PED_DAMAGE_DECAL(a0, a1, a2, a3, a4, a5, a6, a7, a8, (a9_size == 0 ? 0 : a9));
  return mrb_nil_value();
}

mrb_value mruby__PED__APPLY_PED_DAMAGE_PACK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"isff",&a0, &a1, &a1_size, &a2, &a3);
  PED::APPLY_PED_DAMAGE_PACK(a0, (a1_size == 0 ? 0 : a1), a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__PED__CLEAR_PED_BLOOD_DAMAGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::CLEAR_PED_BLOOD_DAMAGE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__HIDE_PED_BLOOD_DAMAGE_BY_ZONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  PED::HIDE_PED_BLOOD_DAMAGE_BY_ZONE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__CLEAR_PED_DAMAGE_DECAL_BY_ZONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iis",&a0, &a1, &a2, &a2_size);
  PED::CLEAR_PED_DAMAGE_DECAL_BY_ZONE(a0, a1, (a2_size == 0 ? 0 : a2));
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_DECORATIONS_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = PED::GET_PED_DECORATIONS_STATE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0x2B694AFCF64E6994(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0x2B694AFCF64E6994(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__CLEAR_PED_WETNESS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::CLEAR_PED_WETNESS(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_WETNESS_HEIGHT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_WETNESS_HEIGHT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_WETNESS_ENABLED_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::SET_PED_WETNESS_ENABLED_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x6585D955A68452A5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0x6585D955A68452A5(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_SWEAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_SWEAT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___APPLY_PED_OVERLAY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  PED::_APPLY_PED_OVERLAY(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x5619BFA07CFD7833(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  PED::_0x5619BFA07CFD7833(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED___GET_TATTOO_ZONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = PED::_GET_TATTOO_ZONE(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__CLEAR_PED_DECORATIONS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::CLEAR_PED_DECORATIONS(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xE3B27E70CEAB9F0C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0xE3B27E70CEAB9F0C(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__WAS_PED_SKELETON_UPDATED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::WAS_PED_SKELETON_UPDATED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__GET_PED_BONE_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iifff",&a0, &a1, &a2, &a3, &a4);
  Vector3 r0 = PED::GET_PED_BONE_COORDS(a0, a1, a2, a3, a4);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__PED__CREATE_NM_MESSAGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_int a1;
  mrb_get_args(mrb,"bi",&a0, &a1);
  PED::CREATE_NM_MESSAGE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__GIVE_PED_NM_MESSAGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::GIVE_PED_NM_MESSAGE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__ADD_SCENARIO_BLOCKING_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_bool a8;
  mrb_bool a9;
  mrb_get_args(mrb,"ffffffbbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  Any r0 = PED::ADD_SCENARIO_BLOCKING_AREA(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__REMOVE_SCENARIO_BLOCKING_AREAS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  PED::REMOVE_SCENARIO_BLOCKING_AREAS();
  return mrb_nil_value();
}

mrb_value mruby__PED__REMOVE_SCENARIO_BLOCKING_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::REMOVE_SCENARIO_BLOCKING_AREA(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  PED::SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_USING_SCENARIO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_bool r0 = PED::IS_PED_USING_SCENARIO(a0, (a1_size == 0 ? 0 : a1));
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_USING_ANY_SCENARIO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_USING_ANY_SCENARIO(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0xFE07FF6495D52E2A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  Any r0 = PED::_0xFE07FF6495D52E2A(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0x9A77DFD295E29B09(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0x9A77DFD295E29B09(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x25361A96E0F7E419(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  Any r0 = PED::_0x25361A96E0F7E419(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0xEC6935EBE0847B90(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  Any r0 = PED::_0xEC6935EBE0847B90(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0xA3A9299C4F2ADB98(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0xA3A9299C4F2ADB98(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xF1C03A5352243A30(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0xF1C03A5352243A30(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xEEED8FAFEC331A70(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  Any r0 = PED::_0xEEED8FAFEC331A70(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0x425AECF167663F48(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0x425AECF167663F48(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x5B6010B3CBC29095(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0x5B6010B3CBC29095(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xCEDA60A74219D064(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0xCEDA60A74219D064(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__PLAY_FACIAL_ANIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iss",&a0, &a1, &a1_size, &a2, &a2_size);
  PED::PLAY_FACIAL_ANIM(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2));
  return mrb_nil_value();
}

mrb_value mruby__PED__CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_PLAY_GESTURE_ANIMS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_PLAY_GESTURE_ANIMS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_PLAY_VISEME_ANIMS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  PED::SET_PED_CAN_PLAY_VISEME_ANIMS(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x33A60D8BDD6E508C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0x33A60D8BDD6E508C(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_PLAY_AMBIENT_ANIMS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_PLAY_AMBIENT_ANIMS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xC2EE020F5FB4DB53(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0xC2EE020F5FB4DB53(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_ARM_IK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_ARM_IK(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_HEAD_IK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_HEAD_IK(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_LEG_IK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_LEG_IK(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_TORSO_IK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_TORSO_IK(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xF5846EDB26A98A24(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0xF5846EDB26A98A24(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x6647C5F6F5792496(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0x6647C5F6F5792496(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_HEADTRACKING_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PED::IS_PED_HEADTRACKING_PED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_HEADTRACKING_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PED::IS_PED_HEADTRACKING_ENTITY(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_PRIMARY_LOOKAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_PRIMARY_LOOKAT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x78C4E9961DB3EB5B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::_0x78C4E9961DB3EB5B(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x82A3D6D9CC2CB8E3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::_0x82A3D6D9CC2CB8E3(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xA660FAF550EB37E5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0xA660FAF550EB37E5(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CONFIG_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  PED::SET_PED_CONFIG_FLAG(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_RESET_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  PED::SET_PED_RESET_FLAG(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_CONFIG_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  mrb_bool r0 = PED::GET_PED_CONFIG_FLAG(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__GET_PED_RESET_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PED::GET_PED_RESET_FLAG(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_GROUP_MEMBER_PASSENGER_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_GROUP_MEMBER_PASSENGER_INDEX(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_EVASIVE_DIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_EVASIVE_DIVE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_SHOOTS_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ifffb",&a0, &a1, &a2, &a3, &a4);
  PED::SET_PED_SHOOTS_AT_COORD(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_MODEL_IS_SUPPRESSED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_MODEL_IS_SUPPRESSED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__STOP_ANY_PED_MODEL_BEING_SUPPRESSED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  PED::STOP_ANY_PED_MODEL_BEING_SUPPRESSED();
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_BE_TARGETED_WHEN_INJURED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_BE_TARGETED_WHEN_INJURED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_GENERATES_DEAD_BODY_EVENTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_GENERATES_DEAD_BODY_EVENTS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xE43A13C9E4CCCBCF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0xE43A13C9E4CCCBCF(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__GIVE_PED_HELMET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"ibii",&a0, &a1, &a2, &a3);
  PED::GIVE_PED_HELMET(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__PED__REMOVE_PED_HELMET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::REMOVE_PED_HELMET(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x14590DDBEDB1EC85(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0x14590DDBEDB1EC85(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_HELMET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_HELMET(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_HELMET_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_HELMET_FLAG(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_HELMET_PROP_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_HELMET_PROP_INDEX(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_HELMET_TEXTURE_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_HELMET_TEXTURE_INDEX(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PED_WEARING_HELMET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_WEARING_HELMET(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0x687C0B594907D2E8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0x687C0B594907D2E8(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x451294E859ECC018(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = PED::_0x451294E859ECC018(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0x9D728C1E12BF5518(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = PED::_0x9D728C1E12BF5518(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0xF2385935BFFD4D92(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0xF2385935BFFD4D92(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_TO_LOAD_COVER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_TO_LOAD_COVER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_COWER_IN_COVER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_COWER_IN_COVER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_PEEK_IN_COVER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_PEEK_IN_COVER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_LEG_IK_MODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_LEG_IK_MODE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_MOTION_BLUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_MOTION_BLUR(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAN_SWITCH_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_CAN_SWITCH_WEAPON(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_DIES_INSTANTLY_IN_WATER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_DIES_INSTANTLY_IN_WATER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x1A330D297AAC6BC1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::_0x1A330D297AAC6BC1(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__STOP_PED_WEAPON_FIRING_WHEN_DROPPED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::STOP_PED_WEAPON_FIRING_WHEN_DROPPED(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_SCRIPTED_ANIM_SEAT_OFFSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_SCRIPTED_ANIM_SEAT_OFFSET(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_COMBAT_MOVEMENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_COMBAT_MOVEMENT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_COMBAT_MOVEMENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = PED::GET_PED_COMBAT_MOVEMENT(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_PED_COMBAT_ABILITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_COMBAT_ABILITY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_COMBAT_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_COMBAT_RANGE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_COMBAT_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = PED::GET_PED_COMBAT_RANGE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_PED_COMBAT_ATTRIBUTES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  PED::SET_PED_COMBAT_ATTRIBUTES(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_TARGET_LOSS_RESPONSE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::SET_PED_TARGET_LOSS_RESPONSE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xDCCA191DF9980FD7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0xDCCA191DF9980FD7(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_PERFORMING_STEALTH_KILL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_PERFORMING_STEALTH_KILL(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0xEBD0EDBA5BE957CF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0xEBD0EDBA5BE957CF(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_BEING_STEALTH_KILLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_BEING_STEALTH_KILLED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__GET_MELEE_TARGET_FOR_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Ped r0 = PED::GET_MELEE_TARGET_FOR_PED(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__PED__WAS_PED_KILLED_BY_STEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::WAS_PED_KILLED_BY_STEALTH(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__WAS_PED_KILLED_BY_TAKEDOWN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::WAS_PED_KILLED_BY_TAKEDOWN(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0x61767F73EACEED21(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0x61767F73EACEED21(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_FLEE_ATTRIBUTES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  PED::SET_PED_FLEE_ATTRIBUTES(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_COWER_HASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  PED::SET_PED_COWER_HASH(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__PED___0x2016C603D6B8987C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0x2016C603D6B8987C(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_STEERS_AROUND_PEDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_STEERS_AROUND_PEDS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_STEERS_AROUND_OBJECTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_STEERS_AROUND_OBJECTS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_STEERS_AROUND_VEHICLES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_PED_STEERS_AROUND_VEHICLES(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xA9B61A329BFDCBEA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0xA9B61A329BFDCBEA(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x570389D1C3DE3C6B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0x570389D1C3DE3C6B(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x576594E8D64375E2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0x576594E8D64375E2(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xA52D5247A4227E14(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0xA52D5247A4227E14(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_ANY_PED_NEAR_POINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  mrb_bool r0 = PED::IS_ANY_PED_NEAR_POINT(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0x2208438012482A1A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  PED::_0x2208438012482A1A(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xFCF37A457CB96DC0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = PED::_0xFCF37A457CB96DC0(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0x7D7A2E43E74E2EB8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0x7D7A2E43E74E2EB8(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_FLOOD_INVINCIBILITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::GET_PED_FLOOD_INVINCIBILITY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xCD018C591F94CB43(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0xCD018C591F94CB43(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x75BA1CB3B7D40CAF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0x75BA1CB3B7D40CAF(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_TRACKED_PED_VISIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_TRACKED_PED_VISIBLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0x511F1A683387C7E2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = PED::_0x511F1A683387C7E2(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__IS_PED_TRACKED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_TRACKED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__HAS_PED_RECEIVED_EVENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PED::HAS_PED_RECEIVED_EVENT(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0x6CD5A433374D4CFB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PED::_0x6CD5A433374D4CFB(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__GET_PED_BONE_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = PED::GET_PED_BONE_INDEX(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__GET_PED_RAGDOLL_BONE_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = PED::GET_PED_RAGDOLL_BONE_INDEX(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_PED_ENVEFF_SCALE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_ENVEFF_SCALE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_PED_ENVEFF_SCALE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = PED::GET_PED_ENVEFF_SCALE(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__PED__SET_ENABLE_PED_ENVEFF_SCALE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_ENABLE_PED_ENVEFF_SCALE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x110F526AB784111F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::_0x110F526AB784111F(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xD69411AA0CEBF9E9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  PED::_0xD69411AA0CEBF9E9(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x1216E0BFA72CC703(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::_0x1216E0BFA72CC703(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x2B5AA717A181FB4C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0x2B5AA717A181FB4C(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xB8B52E498014F5B0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0xB8B52E498014F5B0(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__CREATE_SYNCHRONIZED_SCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_get_args(mrb,"ffffffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  Any r0 = PED::CREATE_SYNCHRONIZED_SCENE(a0, a1, a2, a3, a4, a5, a6);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0x62EC273D00187DCA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_get_args(mrb,"ffffi",&a0, &a1, &a2, &a3, &a4);
  Any r0 = PED::_0x62EC273D00187DCA(a0, a1, a2, a3, a4);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__IS_SYNCHRONIZED_SCENE_RUNNING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_SYNCHRONIZED_SCENE_RUNNING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_SYNCHRONIZED_SCENE_ORIGIN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_get_args(mrb,"iffffffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  PED::SET_SYNCHRONIZED_SCENE_ORIGIN(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_SYNCHRONIZED_SCENE_PHASE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_SYNCHRONIZED_SCENE_PHASE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_SYNCHRONIZED_SCENE_PHASE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = PED::GET_SYNCHRONIZED_SCENE_PHASE(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__PED__SET_SYNCHRONIZED_SCENE_RATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_SYNCHRONIZED_SCENE_RATE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__GET_SYNCHRONIZED_SCENE_RATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = PED::GET_SYNCHRONIZED_SCENE_RATE(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__PED__SET_SYNCHRONIZED_SCENE_LOOPED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::SET_SYNCHRONIZED_SCENE_LOOPED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_SYNCHRONIZED_SCENE_LOOPED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_SYNCHRONIZED_SCENE_LOOPED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0x394B9CD12435C981(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0x394B9CD12435C981(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x7F2F4F13AC5257EF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0x7F2F4F13AC5257EF(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  PED::ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED__DETACH_SYNCHRONIZED_SCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::DETACH_SYNCHRONIZED_SCENE(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xCD9CC7E200A52A6F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0xCD9CC7E200A52A6F(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__FORCE_PED_MOTION_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_bool a4;
  mrb_get_args(mrb,"iibbb",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = PED::FORCE_PED_MOTION_STATE(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_MAX_MOVE_BLEND_RATIO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_MAX_MOVE_BLEND_RATIO(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_MIN_MOVE_BLEND_RATIO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_MIN_MOVE_BLEND_RATIO(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_MOVE_RATE_OVERRIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_MOVE_RATE_OVERRIDE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x46B05BCAE43856B0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = PED::_0x46B05BCAE43856B0(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0x7350823473013C02(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0x7350823473013C02(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__IS_PED_USING_ACTION_MODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PED_USING_ACTION_MODE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__SET_PED_USING_ACTION_MODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  char* a3;
  int a3_size;
  mrb_get_args(mrb,"ibis",&a0, &a1, &a2, &a3, &a3_size);
  PED::SET_PED_USING_ACTION_MODE(a0, a1, a2, (a3_size == 0 ? 0 : a3));
  return mrb_nil_value();
}

mrb_value mruby__PED___0x781DE8FA214E87D2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  PED::_0x781DE8FA214E87D2(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_CAPSULE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_CAPSULE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED__REGISTER_PEDHEADSHOT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = PED::REGISTER_PEDHEADSHOT(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0x953563CE563143AF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = PED::_0x953563CE563143AF(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__UNREGISTER_PEDHEADSHOT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::UNREGISTER_PEDHEADSHOT(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__IS_PEDHEADSHOT_VALID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = PED::IS_PEDHEADSHOT_VALID(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__IS_PEDHEADSHOT_READY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::IS_PEDHEADSHOT_READY(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__GET_PEDHEADSHOT_TXD_STRING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  char* cstr = PED::GET_PEDHEADSHOT_TXD_STRING(a0);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__PED___0xF0DAEF2F545BEE25(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PED::_0xF0DAEF2F545BEE25(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0x5D517B27CF6ECD04(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0x5D517B27CF6ECD04(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xEBB376779A760AA8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = PED::_0xEBB376779A760AA8();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0x876928DDDFCCC9CD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = PED::_0x876928DDDFCCC9CD();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0xE8A169E666CBC541(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = PED::_0xE8A169E666CBC541();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0xC1F6EBF9A3D55538(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::_0xC1F6EBF9A3D55538(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x600048C60D5C2C51(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0x600048C60D5C2C51(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x2DF9038C90AD5264(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_float a6;
  mrb_int a7;
  mrb_get_args(mrb,"fffffifi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  PED::_0x2DF9038C90AD5264(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xB2AFF10216DEFA2F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_float a8;
  mrb_int a9;
  mrb_get_args(mrb,"fffffffifi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  PED::_0xB2AFF10216DEFA2F(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xFEE4A5459472A9F8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  PED::_0xFEE4A5459472A9F8();
  return mrb_nil_value();
}

mrb_value mruby__PED___0x3C67506996001F5E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = PED::_0x3C67506996001F5E();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0xA586FBEB32A53DBB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = PED::_0xA586FBEB32A53DBB();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0xF445DE8DA80A1792(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = PED::_0xF445DE8DA80A1792();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED___0xA635C11B8C44AFC2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = PED::_0xA635C11B8C44AFC2();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PED__SET_IK_TARGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_get_args(mrb,"iiiifffiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  PED::SET_IK_TARGET(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xED3C76ADFA6D07C4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0xED3C76ADFA6D07C4(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED__REQUEST_ACTION_MODE_ASSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  PED::REQUEST_ACTION_MODE_ASSET((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__PED__HAS_ACTION_MODE_ASSET_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = PED::HAS_ACTION_MODE_ASSET_LOADED((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__REMOVE_ACTION_MODE_ASSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  PED::REMOVE_ACTION_MODE_ASSET((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__PED__REQUEST_STEALTH_MODE_ASSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  PED::REQUEST_STEALTH_MODE_ASSET((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__PED__HAS_STEALTH_MODE_ASSET_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = PED::HAS_STEALTH_MODE_ASSET_LOADED((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__PED__REMOVE_STEALTH_MODE_ASSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  PED::REMOVE_STEALTH_MODE_ASSET((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__PED__SET_PED_LOD_MULTIPLIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::SET_PED_LOD_MULTIPLIER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xE861D0B05C7662B8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_get_args(mrb,"ibi",&a0, &a1, &a2);
  PED::_0xE861D0B05C7662B8(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x129466ED55140F8D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  PED::_0x129466ED55140F8D(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xCB968B53FC7F916D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"ibii",&a0, &a1, &a2, &a3);
  PED::_0xCB968B53FC7F916D(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x68772DB2B2526F9F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = PED::_0x68772DB2B2526F9F(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0x06087579E7AA85A9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"iiffff",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_bool r0 = PED::_0x06087579E7AA85A9(a0, a1, a2, a3, a4, a5);
  return mrb_bool_value(r0);
}

mrb_value mruby__PED___0xD8C3BE3EE94CAF2D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  PED::_0xD8C3BE3EE94CAF2D(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__PED___0xD33DAA36272177C4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PED::_0xD33DAA36272177C4(a0);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x83A169EABCDB10A2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  PED::_0x83A169EABCDB10A2(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__PED___0x288DF530C92DAD6F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  PED::_0x288DF530C92DAD6F(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__CREATE_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_get_args(mrb,"iffffbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  Vehicle r0 = VEHICLE::CREATE_VEHICLE(a0, a1, a2, a3, a4, a5, a6);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vehicle"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__VEHICLE__DELETE_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Vehicle a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::DELETE_VEHICLE(&a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x7D6F9A3EF26136A0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  VEHICLE::_0x7D6F9A3EF26136A0(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xE6B0E8CFC3633BF0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::_0xE6B0E8CFC3633BF0(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__IS_VEHICLE_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_MODEL(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__CREATE_SCRIPT_VEHICLE_GENERATOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_int a10;
  mrb_bool a11;
  mrb_bool a12;
  mrb_bool a13;
  mrb_bool a14;
  mrb_bool a15;
  mrb_int a16;
  mrb_get_args(mrb,"ffffffiiiiibbbbbi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14, &a15, &a16);
  Any r0 = VEHICLE::CREATE_SCRIPT_VEHICLE_GENERATOR(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__DELETE_SCRIPT_VEHICLE_GENERATOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::DELETE_SCRIPT_VEHICLE_GENERATOR(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_SCRIPT_VEHICLE_GENERATOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_SCRIPT_VEHICLE_GENERATOR(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_get_args(mrb,"ffffffbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  VEHICLE::SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_ALL_VEHICLE_GENERATORS_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  VEHICLE::SET_ALL_VEHICLE_GENERATORS_ACTIVE();
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  VEHICLE::SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x9A75585FB2E54FAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  VEHICLE::_0x9A75585FB2E54FAD(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x0A436B8643716D14(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  VEHICLE::_0x0A436B8643716D14();
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_ON_GROUND_PROPERLY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_ALL_VEHICLES_SPAWN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"ibbb",&a0, &a1, &a2, &a3);
  Any r0 = VEHICLE::SET_ALL_VEHICLES_SPAWN(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__IS_VEHICLE_STUCK_ON_ROOF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_STUCK_ON_ROOF(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__ADD_VEHICLE_UPSIDEDOWN_CHECK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::ADD_VEHICLE_UPSIDEDOWN_CHECK(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__REMOVE_VEHICLE_UPSIDEDOWN_CHECK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::REMOVE_VEHICLE_UPSIDEDOWN_CHECK(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_VEHICLE_STOPPED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_STOPPED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_NUMBER_OF_PASSENGERS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_VEHICLE_NUMBER_OF_PASSENGERS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE___GET_VEHICLE_MODEL_MAX_NUMBER_OF_PASSENGERS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::_GET_VEHICLE_MODEL_MAX_NUMBER_OF_PASSENGERS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE___0xF7F203E31F96F6A1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_bool r0 = VEHICLE::_0xF7F203E31F96F6A1(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0xE33FFA906CE74880(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::_0xE33FFA906CE74880(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  VEHICLE::SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  VEHICLE::SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  VEHICLE::SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xD4B8E3D1917BC86B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  VEHICLE::_0xD4B8E3D1917BC86B(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x90B6DA738A9A25DA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  VEHICLE::_0x90B6DA738A9A25DA(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_FAR_DRAW_VEHICLES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  VEHICLE::SET_FAR_DRAW_VEHICLES(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_NUMBER_OF_PARKED_VEHICLES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::SET_NUMBER_OF_PARKED_VEHICLES(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_DOORS_LOCKED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::SET_VEHICLE_DOORS_LOCKED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_PED_TARGETTABLE_VEHICLE_DESTROY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  VEHICLE::SET_PED_TARGETTABLE_VEHICLE_DESTROY(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__DISABLE_VEHICLE_IMPACT_EXPLOSION_ACTIVATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::DISABLE_VEHICLE_IMPACT_EXPLOSION_ACTIVATION(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x9737A37136F07E75(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x9737A37136F07E75(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__EXPLODE_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  VEHICLE::EXPLODE_VEHICLE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_OUT_OF_CONTROL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  VEHICLE::SET_VEHICLE_OUT_OF_CONTROL(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_TIMED_EXPLOSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  VEHICLE::SET_VEHICLE_TIMED_EXPLOSION(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x99AD4CCCB128CBC9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::_0x99AD4CCCB128CBC9(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x6ADAABD3068C5235(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = VEHICLE::_0x6ADAABD3068C5235();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE___0xEF49CF0270307CBE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  VEHICLE::_0xEF49CF0270307CBE();
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xAE3FEE8709B39DCB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_0xAE3FEE8709B39DCB(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_TAXI_LIGHTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_TAXI_LIGHTS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_TAXI_LIGHT_ON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_TAXI_LIGHT_ON(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_VEHICLE_IN_GARAGE_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_get_args(mrb,"si",&a0, &a0_size, &a1);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_IN_GARAGE_AREA((a0_size == 0 ? 0 : a0), a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_COLOURS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  VEHICLE::SET_VEHICLE_COLOURS(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_FULLBEAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_FULLBEAM(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__STEER_UNLOCK_BIAS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::STEER_UNLOCK_BIAS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___SET_VEHICLE_PAINT_FADE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_SET_VEHICLE_PAINT_FADE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___GET_VEHICLE_PAINT_FADE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::_GET_VEHICLE_PAINT_FADE(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__SET_CAN_RESPRAY_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_CAN_RESPRAY_VEHICLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x33506883545AC0DF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x33506883545AC0DF(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___JITTER_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"ibfff",&a0, &a1, &a2, &a3, &a4);
  VEHICLE::_JITTER_VEHICLE(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_BOAT_ANCHOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_BOAT_ANCHOR(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___GET_BOAT_ANCHOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_GET_BOAT_ANCHOR(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0xE3EBAAE484798530(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xE3EBAAE484798530(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xB28B1FE5BFADD7F5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xB28B1FE5BFADD7F5(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xE842A9398079BD82(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0xE842A9398079BD82(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x8F719973E1445BA2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x8F719973E1445BA2(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_SIREN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_SIREN(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_VEHICLE_SIREN_ON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_SIREN_ON(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0xB5CC40FBCB586380(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_0xB5CC40FBCB586380(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_STRONG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_STRONG(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__REMOVE_VEHICLE_STUCK_CHECK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::REMOVE_VEHICLE_STUCK_CHECK(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_VEHICLE_SEAT_FREE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_SEAT_FREE(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__GET_PED_IN_VEHICLE_SEAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Ped r0 = VEHICLE::GET_PED_IN_VEHICLE_SEAT(a0, a1);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__VEHICLE__GET_LAST_PED_IN_VEHICLE_SEAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Ped r0 = VEHICLE::GET_LAST_PED_IN_VEHICLE_SEAT(a0, a1);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__VEHICLE__IS_VEHICLE_TYRE_BURST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_TYRE_BURST(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_FORWARD_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::SET_VEHICLE_FORWARD_SPEED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___TASK_BRING_VEHICLE_TO_HALT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_get_args(mrb,"ifib",&a0, &a1, &a2, &a3);
  VEHICLE::_TASK_BRING_VEHICLE_TO_HALT(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x37EBBF3117BD6A25(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0x37EBBF3117BD6A25(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_PED_ENABLED_BIKE_RINGTONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::SET_PED_ENABLED_BIKE_RINGTONE(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0x62CA17B74C435651(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_0x62CA17B74C435651(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0x375E7FC44F21C8AB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = VEHICLE::_0x375E7FC44F21C8AB(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE___0x89D630CF5EA96D23(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::_0x89D630CF5EA96D23(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0x6A98C2ECF57FA5D4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::_0x6A98C2ECF57FA5D4(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x7C0043FDFF6436BC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::_0x7C0043FDFF6436BC(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x8AA9180DE2FEDD45(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x8AA9180DE2FEDD45(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x0A6A279F3AA4FD70(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x0A6A279F3AA4FD70(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x634148744F385576(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_0x634148744F385576(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0xE6F13851780394DA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0xE6F13851780394DA(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_TYRE_BURST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_float a3;
  mrb_get_args(mrb,"iibf",&a0, &a1, &a2, &a3);
  VEHICLE::SET_VEHICLE_TYRE_BURST(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_DOORS_SHUT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_DOORS_SHUT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_TYRES_CAN_BURST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_TYRES_CAN_BURST(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_TYRES_CAN_BURST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::GET_VEHICLE_TYRES_CAN_BURST(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_WHEELS_CAN_BREAK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_WHEELS_CAN_BREAK(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_DOOR_OPEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iibb",&a0, &a1, &a2, &a3);
  VEHICLE::SET_VEHICLE_DOOR_OPEN(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__REMOVE_VEHICLE_WINDOW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::REMOVE_VEHICLE_WINDOW(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__ROLL_DOWN_WINDOWS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::ROLL_DOWN_WINDOWS(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__ROLL_DOWN_WINDOW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::ROLL_DOWN_WINDOW(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__ROLL_UP_WINDOW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::ROLL_UP_WINDOW(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SMASH_VEHICLE_WINDOW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::SMASH_VEHICLE_WINDOW(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__FIX_VEHICLE_WINDOW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::FIX_VEHICLE_WINDOW(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___DETACH_VEHICLE_WINDSCREEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::_DETACH_VEHICLE_WINDSCREEN(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___EJECT_JB700_ROOF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  VEHICLE::_EJECT_JB700_ROOF(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_LIGHTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::SET_VEHICLE_LIGHTS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xC45C27EF50F36ADC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xC45C27EF50F36ADC(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x1FD09E7390A74D54(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::_0x1FD09E7390A74D54(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_ALARM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_ALARM(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__START_VEHICLE_ALARM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::START_VEHICLE_ALARM(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_VEHICLE_ALARM_ACTIVATED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_ALARM_ACTIVATED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_INTERIORLIGHT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_INTERIORLIGHT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_LIGHT_MULTIPLIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::SET_VEHICLE_LIGHT_MULTIPLIER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__ATTACH_VEHICLE_TO_TRAILER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_get_args(mrb,"iif",&a0, &a1, &a2);
  VEHICLE::ATTACH_VEHICLE_TO_TRAILER(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x16B5E274BDE402F8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_float a11;
  mrb_get_args(mrb,"iiffffffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  VEHICLE::_0x16B5E274BDE402F8(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x374706271354CB18(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_get_args(mrb,"iif",&a0, &a1, &a2);
  VEHICLE::_0x374706271354CB18(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__DETACH_VEHICLE_FROM_TRAILER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::DETACH_VEHICLE_FROM_TRAILER(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_VEHICLE_ATTACHED_TO_TRAILER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_ATTACHED_TO_TRAILER(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0x2A8F319B392E7B3F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0x2A8F319B392E7B3F(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x95CF53B3D687F9FA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::_0x95CF53B3D687F9FA(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_TYRE_FIXED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::SET_VEHICLE_TYRE_FIXED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_NUMBER_PLATE_TEXT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_NUMBER_PLATE_TEXT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  char* cstr = VEHICLE::GET_VEHICLE_NUMBER_PLATE_TEXT(a0);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__VEHICLE__GET_NUMBER_OF_VEHICLE_NUMBER_PLATES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = VEHICLE::GET_NUMBER_OF_VEHICLE_NUMBER_PLATES();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__SET_RANDOM_TRAINS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  VEHICLE::SET_RANDOM_TRAINS(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__CREATE_MISSION_TRAIN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ifffb",&a0, &a1, &a2, &a3, &a4);
  Vehicle r0 = VEHICLE::CREATE_MISSION_TRAIN(a0, a1, a2, a3, a4);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vehicle"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__VEHICLE__SWITCH_TRAIN_TRACK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SWITCH_TRAIN_TRACK(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x21973BBF8D17EDFA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::_0x21973BBF8D17EDFA(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__DELETE_ALL_TRAINS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  VEHICLE::DELETE_ALL_TRAINS();
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_TRAIN_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::SET_TRAIN_SPEED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_TRAIN_CRUISE_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::SET_TRAIN_CRUISE_SPEED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_RANDOM_BOATS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  VEHICLE::SET_RANDOM_BOATS(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_GARBAGE_TRUCKS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  VEHICLE::SET_GARBAGE_TRUCKS(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0x92523B76657A517D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  Vector3 r0 = VEHICLE::_0x92523B76657A517D(a0, a1);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__VEHICLE___0xF0F2103EFAF8CBA7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  Vector3 r0 = VEHICLE::_0xF0F2103EFAF8CBA7(a0, a1);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__VEHICLE__GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = VEHICLE::GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__GET_POSITION_IN_RECORDING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_POSITION_IN_RECORDING(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__GET_TIME_POSITION_IN_RECORDING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_TIME_POSITION_IN_RECORDING(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE___0x1F2E4E06DEA8992B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x1F2E4E06DEA8992B(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__STOP_PLAYBACK_RECORDED_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::STOP_PLAYBACK_RECORDED_VEHICLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__PAUSE_PLAYBACK_RECORDED_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::PAUSE_PLAYBACK_RECORDED_VEHICLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__UNPAUSE_PLAYBACK_RECORDED_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::UNPAUSE_PLAYBACK_RECORDED_VEHICLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_PLAYBACK_GOING_ON_FOR_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_PLAYBACK_GOING_ON_FOR_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__GET_CURRENT_PLAYBACK_FOR_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = VEHICLE::GET_CURRENT_PLAYBACK_FOR_VEHICLE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_PLAYBACK_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::SET_PLAYBACK_SPEED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_PLAYBACK_TO_USE_AI(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::SET_PLAYBACK_TO_USE_AI(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iiib",&a0, &a1, &a2, &a3);
  VEHICLE::SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x5845066D8A1EA7F7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_get_args(mrb,"ifffi",&a0, &a1, &a2, &a3, &a4);
  VEHICLE::_0x5845066D8A1EA7F7(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x796A877E459B99EA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  VEHICLE::_0x796A877E459B99EA(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xFAF2A78061FD9EF4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  VEHICLE::_0xFAF2A78061FD9EF4(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x063AE2B2CC273588(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x063AE2B2CC273588(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__EXPLODE_VEHICLE_IN_CUTSCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::EXPLODE_VEHICLE_IN_CUTSCENE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__ADD_VEHICLE_STUCK_CHECK_WITH_WARP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_int a6;
  mrb_get_args(mrb,"ifibbbi",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  VEHICLE::ADD_VEHICLE_STUCK_CHECK_WITH_WARP(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_MODEL_IS_SUPPRESSED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_RANDOM_VEHICLE_IN_SPHERE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"ffffii",&a0, &a1, &a2, &a3, &a4, &a5);
  Vehicle r0 = VEHICLE::GET_RANDOM_VEHICLE_IN_SPHERE(a0, a1, a2, a3, a4, a5);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vehicle"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__VEHICLE__GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_get_args(mrb,"ffffiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  Vehicle r0 = VEHICLE::GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(a0, a1, a2, a3, a4, a5, a6);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vehicle"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__VEHICLE__GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_get_args(mrb,"ffffiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  Vehicle r0 = VEHICLE::GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(a0, a1, a2, a3, a4, a5, a6);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vehicle"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__VEHICLE__GET_CLOSEST_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"ffffii",&a0, &a1, &a2, &a3, &a4, &a5);
  Vehicle r0 = VEHICLE::GET_CLOSEST_VEHICLE(a0, a1, a2, a3, a4, a5);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vehicle"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__VEHICLE__GET_TRAIN_CARRIAGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Entity r0 = VEHICLE::GET_TRAIN_CARRIAGE(a0, a1);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Entity"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__VEHICLE__DELETE_MISSION_TRAIN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Vehicle a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::DELETE_MISSION_TRAIN(&a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Vehicle a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(&a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_MISSION_TRAIN_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  VEHICLE::SET_MISSION_TRAIN_COORDS(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_THIS_MODEL_A_BOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_THIS_MODEL_A_BOAT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___IS_THIS_MODEL_A_SUBMERSIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_IS_THIS_MODEL_A_SUBMERSIBLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_THIS_MODEL_A_PLANE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_THIS_MODEL_A_PLANE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_THIS_MODEL_A_HELI(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_THIS_MODEL_A_HELI(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_THIS_MODEL_A_CAR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_THIS_MODEL_A_CAR(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_THIS_MODEL_A_TRAIN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_THIS_MODEL_A_TRAIN(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_THIS_MODEL_A_BIKE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_THIS_MODEL_A_BIKE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_THIS_MODEL_A_BICYCLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_THIS_MODEL_A_BICYCLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_THIS_MODEL_A_QUADBIKE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_THIS_MODEL_A_QUADBIKE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_HELI_BLADES_FULL_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::SET_HELI_BLADES_FULL_SPEED(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_HELI_BLADES_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::SET_HELI_BLADES_SPEED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x99CAD8E7AFDB60FA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"iff",&a0, &a1, &a2);
  VEHICLE::_0x99CAD8E7AFDB60FA(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_CAN_BE_TARGETTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_CAN_BE_TARGETTED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xDBC631F109350B8C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xDBC631F109350B8C(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x1AA8A837D2169D94(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x1AA8A837D2169D94(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x2311DD7159F00582(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x2311DD7159F00582(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_DIRT_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_VEHICLE_DIRT_LEVEL(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_DIRT_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::SET_VEHICLE_DIRT_LEVEL(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___IS_VEHICLE_DAMAGED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_IS_VEHICLE_DAMAGED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_VEHICLE_DOOR_FULLY_OPEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_DOOR_FULLY_OPEN(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_ENGINE_ON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"ibbb",&a0, &a1, &a2, &a3);
  VEHICLE::SET_VEHICLE_ENGINE_ON(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_UNDRIVEABLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_UNDRIVEABLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_PROVIDES_COVER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_PROVIDES_COVER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_DOOR_CONTROL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_get_args(mrb,"iiif",&a0, &a1, &a2, &a3);
  VEHICLE::SET_VEHICLE_DOOR_CONTROL(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_DOOR_LATCHED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_bool a4;
  mrb_get_args(mrb,"iibbb",&a0, &a1, &a2, &a3, &a4);
  VEHICLE::SET_VEHICLE_DOOR_LATCHED(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_DOOR_ANGLE_RATIO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_float r0 = VEHICLE::GET_VEHICLE_DOOR_ANGLE_RATIO(a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE___GET_PED_USING_VEHICLE_DOOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Ped r0 = VEHICLE::_GET_PED_USING_VEHICLE_DOOR(a0, a1);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__VEHICLE__SET_VEHICLE_DOOR_SHUT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  VEHICLE::SET_VEHICLE_DOOR_SHUT(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_DOOR_BROKEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  VEHICLE::SET_VEHICLE_DOOR_BROKEN(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_CAN_BREAK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_CAN_BREAK(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__DOES_VEHICLE_HAVE_ROOF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::DOES_VEHICLE_HAVE_ROOF(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_BIG_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_BIG_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__GET_NUMBER_OF_VEHICLE_COLOURS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_NUMBER_OF_VEHICLE_COLOURS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_COLOUR_COMBINATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::SET_VEHICLE_COLOUR_COMBINATION(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_COLOUR_COMBINATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_VEHICLE_COLOUR_COMBINATION(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xBE5C1255A1830FF5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xBE5C1255A1830FF5(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x9BECD4B9FEF3F8A6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x9BECD4B9FEF3F8A6(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x88BC673CA9E0AE99(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x88BC673CA9E0AE99(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xE851E480B814D4BA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xE851E480B814D4BA(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_DOOR_LOCK_STATUS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_VEHICLE_DOOR_LOCK_STATUS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__IS_VEHICLE_DOOR_DAMAGED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_DOOR_DAMAGED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___SET_VEHICLE_DOOR_BREAKABLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  VEHICLE::_SET_VEHICLE_DOOR_BREAKABLE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x27B926779DEB502D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_bool r0 = VEHICLE::_0x27B926779DEB502D(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_VEHICLE_BUMPER_BROKEN_OFF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_BUMPER_BROKEN_OFF(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_COP_VEHICLE_IN_AREA_3D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"ffffff",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_bool r0 = VEHICLE::IS_COP_VEHICLE_IN_AREA_3D(a0, a1, a2, a3, a4, a5);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_VEHICLE_ON_ALL_WHEELS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_ON_ALL_WHEELS(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_LAYOUT_HASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Hash r0 = VEHICLE::GET_VEHICLE_LAYOUT_HASH(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__VEHICLE___0xA01BC64DD4BFBBAC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = VEHICLE::_0xA01BC64DD4BFBBAC(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__SET_RENDER_TRAIN_AS_DERAILED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_RENDER_TRAIN_AS_DERAILED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_EXTRA_COLOURS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  VEHICLE::SET_VEHICLE_EXTRA_COLOURS(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__STOP_ALL_GARAGE_ACTIVITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  VEHICLE::STOP_ALL_GARAGE_ACTIVITY();
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_FIXED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::SET_VEHICLE_FIXED(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_DEFORMATION_FIXED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x206BC5DC9D1AC70A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x206BC5DC9D1AC70A(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x51BB2D88D31A914B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x51BB2D88D31A914B(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x192547247864DFDD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x192547247864DFDD(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x91A0BD635321F145(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x91A0BD635321F145(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xC50CE861B55EAB8B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xC50CE861B55EAB8B(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x6EBFB22D646FFC18(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x6EBFB22D646FFC18(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x25367DE49D64CF16(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x25367DE49D64CF16(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_get_args(mrb,"ffffffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  VEHICLE::REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_STEER_BIAS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::SET_VEHICLE_STEER_BIAS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_VEHICLE_EXTRA_TURNED_ON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_EXTRA_TURNED_ON(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_EXTRA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  VEHICLE::SET_VEHICLE_EXTRA(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__DOES_EXTRA_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::DOES_EXTRA_EXIST(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_CONVERTIBLE_ROOF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_CONVERTIBLE_ROOF(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__LOWER_CONVERTIBLE_ROOF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::LOWER_CONVERTIBLE_ROOF(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__RAISE_CONVERTIBLE_ROOF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::RAISE_CONVERTIBLE_ROOF(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_CONVERTIBLE_ROOF_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_CONVERTIBLE_ROOF_STATE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__IS_VEHICLE_A_CONVERTIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_A_CONVERTIBLE(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_DAMAGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_get_args(mrb,"ifffffb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  VEHICLE::SET_VEHICLE_DAMAGE(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_ENGINE_HEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_VEHICLE_ENGINE_HEALTH(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_ENGINE_HEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::SET_VEHICLE_ENGINE_HEALTH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_PETROL_TANK_HEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_VEHICLE_PETROL_TANK_HEALTH(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_PETROL_TANK_HEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::SET_VEHICLE_PETROL_TANK_HEALTH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_VEHICLE_STUCK_TIMER_UP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_STUCK_TIMER_UP(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__RESET_VEHICLE_STUCK_TIMER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::RESET_VEHICLE_STUCK_TIMER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_VEHICLE_DRIVEABLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_DRIVEABLE(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x9F3F689B814F2599(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x9F3F689B814F2599(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x4E74E62E0A97E901(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x4E74E62E0A97E901(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__START_VEHICLE_HORN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iiib",&a0, &a1, &a2, &a3);
  VEHICLE::START_VEHICLE_HORN(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x9D44FCCE98450843(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x9D44FCCE98450843(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_HAS_STRONG_AXLES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_HAS_STRONG_AXLES(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  char* cstr = VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(a0);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_DEFORMATION_AT_POS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  Vector3 r0 = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a0, a1, a2, a3);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__VEHICLE__SET_VEHICLE_LIVERY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::SET_VEHICLE_LIVERY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_LIVERY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_VEHICLE_LIVERY(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_LIVERY_COUNT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_VEHICLE_LIVERY_COUNT(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__IS_VEHICLE_WINDOW_INTACT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_WINDOW_INTACT(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___ARE_ALL_VEHICLE_WINDOWS_INTACT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_ARE_ALL_VEHICLE_WINDOWS_INTACT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___IS_ANY_VEHICLE_SEAT_EMPTY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_IS_ANY_VEHICLE_SEAT_EMPTY(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__RESET_VEHICLE_WHEELS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::RESET_VEHICLE_WHEELS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_HELI_PART_BROKEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"ibbb",&a0, &a1, &a2, &a3);
  mrb_bool r0 = VEHICLE::IS_HELI_PART_BROKEN(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___GET_HELI_MAIN_ROTOR_HEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::_GET_HELI_MAIN_ROTOR_HEALTH(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE___GET_HELI_TAIL_ROTOR_HEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::_GET_HELI_TAIL_ROTOR_HEALTH(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE___GET_HELI_ENGINE_HEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::_GET_HELI_ENGINE_HEALTH(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__WAS_COUNTER_ACTIVATED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::WAS_COUNTER_ACTIVATED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_NAME_DEBUG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  VEHICLE::SET_VEHICLE_NAME_DEBUG(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x3441CAD2F2231923(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x3441CAD2F2231923(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x2B6747FAA9DB9D6B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x2B6747FAA9DB9D6B(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___SET_VEHICLE_LANDING_GEAR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::_SET_VEHICLE_LANDING_GEAR(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___GET_VEHICLE_LANDING_GEAR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::_GET_VEHICLE_LANDING_GEAR(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__IS_ANY_VEHICLE_NEAR_POINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  mrb_bool r0 = VEHICLE::IS_ANY_VEHICLE_NEAR_POINT(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__REQUEST_VEHICLE_HIGH_DETAIL_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::REQUEST_VEHICLE_HIGH_DETAIL_MODEL(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__REMOVE_VEHICLE_HIGH_DETAIL_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::REMOVE_VEHICLE_HIGH_DETAIL_MODEL(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_VEHICLE_HIGH_DETAIL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_HIGH_DETAIL(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__REQUEST_VEHICLE_ASSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::REQUEST_VEHICLE_ASSET(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__HAS_VEHICLE_ASSET_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::HAS_VEHICLE_ASSET_LOADED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__REMOVE_VEHICLE_ASSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::REMOVE_VEHICLE_ASSET(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___SET_TOW_TRUCK_CRANE_RAISED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_SET_TOW_TRUCK_CRANE_RAISED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__ATTACH_VEHICLE_TO_TOW_TRUCK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"iibfff",&a0, &a1, &a2, &a3, &a4, &a5);
  VEHICLE::ATTACH_VEHICLE_TO_TOW_TRUCK(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__DETACH_VEHICLE_FROM_TOW_TRUCK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::DETACH_VEHICLE_FROM_TOW_TRUCK(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__GET_ENTITY_ATTACHED_TO_TOW_TRUCK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Entity r0 = VEHICLE::GET_ENTITY_ATTACHED_TO_TOW_TRUCK(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Entity"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__VEHICLE__SET_VEHICLE_AUTOMATICALLY_ATTACHES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  Any r0 = VEHICLE::SET_VEHICLE_AUTOMATICALLY_ATTACHES(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE___0xF8EBCCC96ADB9FB7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ifb",&a0, &a1, &a2);
  VEHICLE::_0xF8EBCCC96ADB9FB7(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x56B94C6D7127DFBA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ifb",&a0, &a1, &a2);
  VEHICLE::_0x56B94C6D7127DFBA(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x1093408B4B9D1146(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0x1093408B4B9D1146(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x30D779DE7C4F6DD3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0x30D779DE7C4F6DD3(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x9AA47FFF660CB932(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0x9AA47FFF660CB932(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_BURNOUT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_BURNOUT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_VEHICLE_IN_BURNOUT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_IN_BURNOUT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_REDUCE_GRIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_REDUCE_GRIP(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_INDICATOR_LIGHTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  VEHICLE::SET_VEHICLE_INDICATOR_LIGHTS(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_BRAKE_LIGHTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_BRAKE_LIGHTS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_HANDBRAKE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_HANDBRAKE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x48ADC8A773564670(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  VEHICLE::_0x48ADC8A773564670();
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x91D6DD290888CBAB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = VEHICLE::_0x91D6DD290888CBAB();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE___0x51DB102F4A3BA5E0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  VEHICLE::_0x51DB102F4A3BA5E0(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xCAC66558B944DA67(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xCAC66558B944DA67(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_RUDDER_BROKEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_RUDDER_BROKEN(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x1A78AD3D8240536F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x1A78AD3D8240536F(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___GET_VEHICLE_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::_GET_VEHICLE_SPEED(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_MAX_BRAKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_VEHICLE_MAX_BRAKING(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_MAX_TRACTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_VEHICLE_MAX_TRACTION(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_ACCELERATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_VEHICLE_ACCELERATION(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE___GET_VEHICLE_MAX_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::_GET_VEHICLE_MAX_SPEED(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_MODEL_MAX_BRAKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_VEHICLE_MODEL_MAX_BRAKING(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE___0xBFBA3BA79CFF7EBF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::_0xBFBA3BA79CFF7EBF(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_MODEL_MAX_TRACTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_VEHICLE_MODEL_MAX_TRACTION(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_MODEL_ACCELERATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_VEHICLE_MODEL_ACCELERATION(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE___0x53409B5163D5B846(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::_0x53409B5163D5B846(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE___0xC6AD107DDC9054CC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::_0xC6AD107DDC9054CC(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE___0x5AA3F878A178C4FC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::_0x5AA3F878A178C4FC(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE___0x00C09F246ABEDD82(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = VEHICLE::_0x00C09F246ABEDD82(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_CLASS_MAX_TRACTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_VEHICLE_CLASS_MAX_TRACTION(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_CLASS_MAX_AGILITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_VEHICLE_CLASS_MAX_AGILITY(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_CLASS_MAX_ACCELERATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_VEHICLE_CLASS_MAX_ACCELERATION(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_CLASS_MAX_BRAKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_VEHICLE_CLASS_MAX_BRAKING(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE___0x2CE544C68FB812A0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_get_args(mrb,"fffffb",&a0, &a1, &a2, &a3, &a4, &a5);
  Any r0 = VEHICLE::_0x2CE544C68FB812A0(a0, a1, a2, a3, a4, a5);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE___0x1033371FC8E842A7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_0x1033371FC8E842A7(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___OPEN_VEHICLE_BOMB_BAY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::_OPEN_VEHICLE_BOMB_BAY(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x3556041742A0DC74(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::_0x3556041742A0DC74(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_VEHICLE_SEARCHLIGHT_ON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_SEARCHLIGHT_ON(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_SEARCHLIGHT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  VEHICLE::SET_VEHICLE_SEARCHLIGHT(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x639431E895B9AA57(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_bool a4;
  mrb_get_args(mrb,"iiibb",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = VEHICLE::_0x639431E895B9AA57(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__CAN_SHUFFLE_SEAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::CAN_SHUFFLE_SEAT(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__GET_NUM_MOD_KITS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_NUM_MOD_KITS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_MOD_KIT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::SET_VEHICLE_MOD_KIT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_MOD_KIT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_VEHICLE_MOD_KIT(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_MOD_KIT_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_VEHICLE_MOD_KIT_TYPE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_WHEEL_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_VEHICLE_WHEEL_TYPE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_WHEEL_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::SET_VEHICLE_WHEEL_TYPE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_NUM_MOD_COLORS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  Any r0 = VEHICLE::GET_NUM_MOD_COLORS(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_MOD_COLOR_1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  VEHICLE::SET_VEHICLE_MOD_COLOR_1(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_MOD_COLOR_2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  VEHICLE::SET_VEHICLE_MOD_COLOR_2(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xB45085B721EFD38C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  Any r0 = VEHICLE::_0xB45085B721EFD38C(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE___0x4967A516ED23A5A1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = VEHICLE::_0x4967A516ED23A5A1(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE___0x9A83F5F9963775EF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_0x9A83F5F9963775EF(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_MOD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iiib",&a0, &a1, &a2, &a3);
  VEHICLE::SET_VEHICLE_MOD(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_MOD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = VEHICLE::GET_VEHICLE_MOD(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_MOD_VARIATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::GET_VEHICLE_MOD_VARIATION(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__GET_NUM_VEHICLE_MODS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = VEHICLE::GET_NUM_VEHICLE_MODS(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__REMOVE_VEHICLE_MOD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::REMOVE_VEHICLE_MOD(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__TOGGLE_VEHICLE_MOD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  VEHICLE::TOGGLE_VEHICLE_MOD(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_TOGGLE_MOD_ON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::IS_TOGGLE_MOD_ON(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__GET_MOD_TEXT_LABEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  char* cstr = VEHICLE::GET_MOD_TEXT_LABEL(a0, a1, a2);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__VEHICLE__GET_MOD_SLOT_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  char* cstr = VEHICLE::GET_MOD_SLOT_NAME(a0, a1);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__VEHICLE__GET_LIVERY_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  char* cstr = VEHICLE::GET_LIVERY_NAME(a0, a1);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_MOD_MODIFIER_VALUE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  Any r0 = VEHICLE::GET_VEHICLE_MOD_MODIFIER_VALUE(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE___0x4593CF82AA179706(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  Any r0 = VEHICLE::_0x4593CF82AA179706(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__PRELOAD_VEHICLE_MOD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  VEHICLE::PRELOAD_VEHICLE_MOD(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__HAS_PRELOAD_MODS_FINISHED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::HAS_PRELOAD_MODS_FINISHED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__RELEASE_PRELOAD_MODS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::RELEASE_PRELOAD_MODS(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_TYRE_SMOKE_COLOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_WINDOW_TINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::SET_VEHICLE_WINDOW_TINT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_WINDOW_TINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_VEHICLE_WINDOW_TINT(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__GET_NUM_VEHICLE_WINDOW_TINTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = VEHICLE::GET_NUM_VEHICLE_WINDOW_TINTS();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE___0xEEBFC7A7EFDC35B4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::_0xEEBFC7A7EFDC35B4(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_CAUSE_OF_DESTRUCTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Hash r0 = VEHICLE::GET_VEHICLE_CAUSE_OF_DESTRUCTION(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__VEHICLE___IS_HEADLIGHT_L_BROKEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_IS_HEADLIGHT_L_BROKEN(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___IS_HEADLIGHT_R_BROKEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_IS_HEADLIGHT_R_BROKEN(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___SET_VEHICLE_ENGINE_POWER_MULTIPLIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_SET_VEHICLE_ENGINE_POWER_MULTIPLIER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x1CF38D529D7441D9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x1CF38D529D7441D9(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x1F9FB66F3A3842D2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x1F9FB66F3A3842D2(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x54B0F614960F4A5F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_get_args(mrb,"fffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  Any r0 = VEHICLE::_0x54B0F614960F4A5F(a0, a1, a2, a3, a4, a5, a6);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE___0xE30524E1871F481D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::_0xE30524E1871F481D(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x291E373D483E7EE7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_0x291E373D483E7EE7(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___SET_VEHICLE_ENGINE_TORQUE_MULTIPLIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_SET_VEHICLE_ENGINE_TORQUE_MULTIPLIER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x0AD9E8F87FF7C16F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x0AD9E8F87FF7C16F(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_IS_WANTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_IS_WANTED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xF488C566413B4232(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0xF488C566413B4232(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xC1F981A6F74F0C23(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xC1F981A6F74F0C23(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x0F3B4D4E43177236(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x0F3B4D4E43177236(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x6636C535F6CC2725(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::_0x6636C535F6CC2725(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__DISABLE_PLANE_AILERON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  VEHICLE::DISABLE_PLANE_AILERON(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___IS_VEHICLE_ENGINE_ON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_IS_VEHICLE_ENGINE_ON(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0x1D97D1E3A70A649F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x1D97D1E3A70A649F(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___SET_BIKE_LEAN_ANGLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"iff",&a0, &a1, &a2);
  VEHICLE::_SET_BIKE_LEAN_ANGLE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xAB04325045427AAE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xAB04325045427AAE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xCFD778E7904C255E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::_0xCFD778E7904C255E(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xACFB2463CC22BED2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::_0xACFB2463CC22BED2(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xB2D06FAEDE65B577(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = VEHICLE::_0xB2D06FAEDE65B577();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE___0xE01903C47C7AC89E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  VEHICLE::_0xE01903C47C7AC89E();
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x02398B627547189C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x02398B627547189C(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___SET_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::_SET_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_LOD_MULTIPLIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::SET_VEHICLE_LOD_MULTIPLIER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x428BACCDF5E26EAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x428BACCDF5E26EAD(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x42A4BEB35D372407(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = VEHICLE::_0x42A4BEB35D372407(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE___0x2C8CBFE1EA5FC631(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = VEHICLE::_0x2C8CBFE1EA5FC631(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE___0x4D9D109F63FEE1D4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x4D9D109F63FEE1D4(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x279D50DE5652D935(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x279D50DE5652D935(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xE44A982368A4AF23(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::_0xE44A982368A4AF23(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xF25E02CB9C5818F8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  VEHICLE::_0xF25E02CB9C5818F8();
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xBC3CCA5844452B06(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  VEHICLE::_0xBC3CCA5844452B06(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_SHOOT_AT_TARGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iifff",&a0, &a1, &a2, &a3, &a4);
  VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x97CE68CB032583F0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x97CE68CB032583F0(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x182F266C2D9E2BEB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0x182F266C2D9E2BEB(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_PLATE_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_VEHICLE_PLATE_TYPE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__TRACK_VEHICLE_VISIBILITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::TRACK_VEHICLE_VISIBILITY(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_VEHICLE_VISIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_VISIBLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_GRAVITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_GRAVITY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xE6C0C80B8C867537(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  VEHICLE::_0xE6C0C80B8C867537(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x36492C2F0D134C56(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = VEHICLE::_0x36492C2F0D134C56(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE___0x06582AFF74894C75(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x06582AFF74894C75(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xDFFCEF48E511DB48(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xDFFCEF48E511DB48(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x8D474C8FAEFF6CDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_0x8D474C8FAEFF6CDE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_ENGINE_CAN_DEGRADE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_ENGINE_CAN_DEGRADE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xF0E4BA16D1DB546C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  VEHICLE::_0xF0E4BA16D1DB546C(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xF87D9F2301F7D206(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::_0xF87D9F2301F7D206(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x4198AB0022B15F87(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_0x4198AB0022B15F87(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0x755D6D5267CBBD7E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_0x755D6D5267CBBD7E(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0x0CDDA42F9E360CA6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x0CDDA42F9E360CA6(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__IS_VEHICLE_STOLEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_STOLEN(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_IS_STOLEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_IS_STOLEN(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xAD2D28A1AFDFF131(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0xAD2D28A1AFDFF131(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x5991A01434CE9677(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_0x5991A01434CE9677(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0xB264C4D2F2B0A78B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::_0xB264C4D2F2B0A78B(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__DETACH_VEHICLE_FROM_CARGOBOB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::DETACH_VEHICLE_FROM_CARGOBOB(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__DETACH_VEHICLE_FROM_ANY_CARGOBOB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::DETACH_VEHICLE_FROM_ANY_CARGOBOB(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__IS_VEHICLE_ATTACHED_TO_CARGOBOB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::IS_VEHICLE_ATTACHED_TO_CARGOBOB(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_ATTACHED_TO_CARGOBOB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vehicle r0 = VEHICLE::GET_VEHICLE_ATTACHED_TO_CARGOBOB(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vehicle"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__VEHICLE__ATTACH_VEHICLE_TO_CARGOBOB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"iiifff",&a0, &a1, &a2, &a3, &a4, &a5);
  VEHICLE::ATTACH_VEHICLE_TO_CARGOBOB(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x571FEB383F629926(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x571FEB383F629926(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xCBDB9B923CACC92D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = VEHICLE::_0xCBDB9B923CACC92D(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__VEHICLE___IS_CARGOBOB_HOOK_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_IS_CARGOBOB_HOOK_ACTIVE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___ENABLE_CARGOBOB_HOOK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::_ENABLE_CARGOBOB_HOOK(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___RETRACT_CARGOBOB_HOOK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::_RETRACT_CARGOBOB_HOOK(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x877C1EAEAC531023(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iffb",&a0, &a1, &a2, &a3);
  VEHICLE::_0x877C1EAEAC531023(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xCF1182F682F65307(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0xCF1182F682F65307(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___IS_CARGOBOB_MAGNET_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_IS_CARGOBOB_MAGNET_ACTIVE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___CARGOBOB_MAGNET_GRAB_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_CARGOBOB_MAGNET_GRAB_VEHICLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xBCBFCD9D1DAC19E2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0xBCBFCD9D1DAC19E2(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xA17BAD153B51547E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0xA17BAD153B51547E(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x66979ACF5102FD2F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0x66979ACF5102FD2F(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x6D8EAC07506291FB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0x6D8EAC07506291FB(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xED8286F71A819BAA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0xED8286F71A819BAA(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x685D5561680D088B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0x685D5561680D088B(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xE301BD63E9E13CF0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::_0xE301BD63E9E13CF0(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x9BDDC73CC6A115D4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  VEHICLE::_0x9BDDC73CC6A115D4(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x56EB5E94318D3FB6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x56EB5E94318D3FB6(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__DOES_VEHICLE_HAVE_WEAPONS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::DOES_VEHICLE_HAVE_WEAPONS(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0x2C4A1590ABF43E8B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x2C4A1590ABF43E8B(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__DISABLE_VEHICLE_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"biii",&a0, &a1, &a2, &a3);
  VEHICLE::DISABLE_VEHICLE_WEAPON(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xE05DD0E9707003A3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xE05DD0E9707003A3(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x21115BCD6E44656A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x21115BCD6E44656A(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_CLASS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_VEHICLE_CLASS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__GET_VEHICLE_CLASS_FROM_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = VEHICLE::GET_VEHICLE_CLASS_FROM_NAME(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__VEHICLE__SET_PLAYERS_LAST_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::SET_PLAYERS_LAST_VEHICLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x300504B23BD3B711(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x300504B23BD3B711(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xE5810AC70602F2F5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0xE5810AC70602F2F5(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x068F64F2470F9656(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x068F64F2470F9656(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xB8FBC8B1330CA9B4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xB8FBC8B1330CA9B4(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x10655FAB9915623D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::_0x10655FAB9915623D(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x79DF7E806202CE01(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::_0x79DF7E806202CE01(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x9007A2F21DC108D4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_0x9007A2F21DC108D4(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___SET_HELICOPTER_ROLL_PITCH_YAW_MULT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::_SET_HELICOPTER_ROLL_PITCH_YAW_MULT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_FRICTION_OVERRIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::SET_VEHICLE_FRICTION_OVERRIDE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xF78F94D60248C737(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_bool r0 = VEHICLE::_0xF78F94D60248C737(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_CEILING_HEIGHT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::SET_VEHICLE_CEILING_HEIGHT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x5E569EC46EC21CAE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x5E569EC46EC21CAE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x6D6AF961B72728AE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::_0x6D6AF961B72728AE(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__DOES_VEHICLE_EXIST_WITH_DECORATOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = VEHICLE::DOES_VEHICLE_EXIST_WITH_DECORATOR((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0x41062318F23ED854(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x41062318F23ED854(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___SET_EXCLUSIVE_DRIVER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  VEHICLE::_SET_EXCLUSIVE_DRIVER(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x500873A45724C863(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  VEHICLE::_0x500873A45724C863(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xB055A34527CB8FD7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xB055A34527CB8FD7(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xF796359A959DF65D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  VEHICLE::_0xF796359A959DF65D(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___SET_VEHICLE_NEON_LIGHTS_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___SET_VEHICLE_NEON_LIGHT_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___IS_VEHICLE_NEON_LIGHT_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0x35E0654F4BAD7971(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  VEHICLE::_0x35E0654F4BAD7971(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xB088E9A47AE6EDD5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xB088E9A47AE6EDD5(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xDBA3C090E3D74690(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  VEHICLE::_0xDBA3C090E3D74690(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE__GET_VEHICLE_BODY_HEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::GET_VEHICLE_BODY_HEALTH(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE__SET_VEHICLE_BODY_HEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  VEHICLE::SET_VEHICLE_BODY_HEALTH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xDF7E3EEB29642C38(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  VEHICLE::_0xDF7E3EEB29642C38(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___GET_VEHICLE_SUSPENSION_HEIGHT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::_GET_VEHICLE_SUSPENSION_HEIGHT(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE___0x84FD40F56075E816(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  VEHICLE::_0x84FD40F56075E816(a0);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xA7DCDF4DED40A8F4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xA7DCDF4DED40A8F4(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___GET_VEHICLE_BODY_HEALTH_2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = VEHICLE::_GET_VEHICLE_BODY_HEALTH_2(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__VEHICLE___0xD4C4642CB7F50B5D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = VEHICLE::_0xD4C4642CB7F50B5D(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__VEHICLE___0xC361AA040D6637A8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xC361AA040D6637A8(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0x99C82F8A139F3E4E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0x99C82F8A139F3E4E(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__VEHICLE___0xE16142B94664DEFD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  VEHICLE::_0xE16142B94664DEFD(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT__CREATE_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_get_args(mrb,"ifffbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  Object r0 = OBJECT::CREATE_OBJECT(a0, a1, a2, a3, a4, a5, a6);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Object"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__OBJECT__CREATE_OBJECT_NO_OFFSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_get_args(mrb,"ifffbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  Object r0 = OBJECT::CREATE_OBJECT_NO_OFFSET(a0, a1, a2, a3, a4, a5, a6);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Object"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__OBJECT__PLACE_OBJECT_ON_GROUND_PROPERLY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = OBJECT::PLACE_OBJECT_ON_GROUND_PROPERLY(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT__SLIDE_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_bool a7;
  mrb_get_args(mrb,"iffffffb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  mrb_bool r0 = OBJECT::SLIDE_OBJECT(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT__SET_OBJECT_TARGETTABLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  OBJECT::SET_OBJECT_TARGETTABLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x77F33F2CCF64B3AA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  OBJECT::_0x77F33F2CCF64B3AA(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT__GET_CLOSEST_OBJECT_OF_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_get_args(mrb,"ffffibbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  Object r0 = OBJECT::GET_CLOSEST_OBJECT_OF_TYPE(a0, a1, a2, a3, a4, a5, a6, a7);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Object"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__OBJECT__HAS_OBJECT_BEEN_BROKEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = OBJECT::HAS_OBJECT_BEEN_BROKEN(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT__HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"ffffii",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_bool r0 = OBJECT::HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(a0, a1, a2, a3, a4, a5);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT___0x46494A2475701343(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"ffffii",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_bool r0 = OBJECT::_0x46494A2475701343(a0, a1, a2, a3, a4, a5);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT___GET_OBJECT_OFFSET_FROM_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_get_args(mrb,"fffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  Vector3 r0 = OBJECT::_GET_OBJECT_OFFSET_FROM_COORDS(a0, a1, a2, a3, a4, a5, a6);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__OBJECT__SET_STATE_OF_CLOSEST_DOOR_OF_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_get_args(mrb,"ifffbfb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  OBJECT::SET_STATE_OF_CLOSEST_DOOR_OF_TYPE(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___DOOR_CONTROL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_get_args(mrb,"ifffbfff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  OBJECT::_DOOR_CONTROL(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT__ADD_DOOR_TO_SYSTEM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_get_args(mrb,"iifffbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  OBJECT::ADD_DOOR_TO_SYSTEM(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT__REMOVE_DOOR_FROM_SYSTEM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  OBJECT::REMOVE_DOOR_FROM_SYSTEM(a0);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x6BAB9442830C7F53(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iibb",&a0, &a1, &a2, &a3);
  OBJECT::_0x6BAB9442830C7F53(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x160AA1B32F6139B8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = OBJECT::_0x160AA1B32F6139B8(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__OBJECT___0x4BC2854478F3A749(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = OBJECT::_0x4BC2854478F3A749(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__OBJECT___0x03C27E13B42A0E82(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"ifbb",&a0, &a1, &a2, &a3);
  OBJECT::_0x03C27E13B42A0E82(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x9BA001CB45CBF627(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"ifbb",&a0, &a1, &a2, &a3);
  OBJECT::_0x9BA001CB45CBF627(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0xB6E6FBA95C7324AC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"ifbb",&a0, &a1, &a2, &a3);
  OBJECT::_0xB6E6FBA95C7324AC(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x65499865FCA6E5EC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = OBJECT::_0x65499865FCA6E5EC(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__OBJECT___0xC485E07E4F0B7958(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"ibbb",&a0, &a1, &a2, &a3);
  OBJECT::_0xC485E07E4F0B7958(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0xD9B71952F78A2640(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  OBJECT::_0xD9B71952F78A2640(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0xA85A21582451E951(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  OBJECT::_0xA85A21582451E951(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___DOES_DOOR_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = OBJECT::_DOES_DOOR_EXIST(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT__IS_DOOR_CLOSED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = OBJECT::IS_DOOR_CLOSED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT___0xC7F29CA00F46350E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  OBJECT::_0xC7F29CA00F46350E(a0);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x701FDA1E82076BA4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  OBJECT::_0x701FDA1E82076BA4();
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0xDF97CDD4FC08FD34(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = OBJECT::_0xDF97CDD4FC08FD34(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT__IS_GARAGE_EMPTY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_get_args(mrb,"ibi",&a0, &a1, &a2);
  mrb_bool r0 = OBJECT::IS_GARAGE_EMPTY(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT___0x024A60DEB0EA69F0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_int a3;
  mrb_get_args(mrb,"iifi",&a0, &a1, &a2, &a3);
  mrb_bool r0 = OBJECT::_0x024A60DEB0EA69F0(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT___0x1761DC5D8471CBAA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = OBJECT::_0x1761DC5D8471CBAA(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT___0x85B6C850546FDDE2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_int a4;
  mrb_get_args(mrb,"ibbbi",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = OBJECT::_0x85B6C850546FDDE2(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT___0x673ED815D6E323B7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_int a4;
  mrb_get_args(mrb,"ibbbi",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = OBJECT::_0x673ED815D6E323B7(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT___0x372EF6699146A1E4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_int a3;
  mrb_get_args(mrb,"iifi",&a0, &a1, &a2, &a3);
  mrb_bool r0 = OBJECT::_0x372EF6699146A1E4(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT___0xF0EED5A6BC7B237A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = OBJECT::_0xF0EED5A6BC7B237A(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT___0x190428512B240692(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ibbbb",&a0, &a1, &a2, &a3, &a4);
  OBJECT::_0x190428512B240692(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0xF2E1A7133DD356A6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  OBJECT::_0xF2E1A7133DD356A6(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x66A49D021870FE88(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  OBJECT::_0x66A49D021870FE88();
  return mrb_nil_value();
}

mrb_value mruby__OBJECT__DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_bool a5;
  mrb_get_args(mrb,"ffffib",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_bool r0 = OBJECT::DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(a0, a1, a2, a3, a4, a5);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT__IS_POINT_IN_ANGLED_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_get_args(mrb,"ffffffffffbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  mrb_bool r0 = OBJECT::IS_POINT_IN_ANGLED_AREA(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT___0x4D89D607CB3DD1D2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  OBJECT::_0x4D89D607CB3DD1D2(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT__SET_OBJECT_PHYSICS_PARAMS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_float a11;
  mrb_get_args(mrb,"ifffffffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  OBJECT::SET_OBJECT_PHYSICS_PARAMS(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT__GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_float r0 = OBJECT::GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__OBJECT__SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  OBJECT::SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT__IS_ANY_OBJECT_NEAR_POINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ffffb",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = OBJECT::IS_ANY_OBJECT_NEAR_POINT(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT__IS_OBJECT_NEAR_POINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = OBJECT::IS_OBJECT_NEAR_POINT(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT___0x4A39DB43E47CF3AA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  OBJECT::_0x4A39DB43E47CF3AA(a0);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0xE7E4C198B0185900(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  OBJECT::_0xE7E4C198B0185900(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0xF9C1681347C8BD15(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  OBJECT::_0xF9C1681347C8BD15(a0);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT__TRACK_OBJECT_VISIBILITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  OBJECT::TRACK_OBJECT_VISIBILITY(a0);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT__IS_OBJECT_VISIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = OBJECT::IS_OBJECT_VISIBLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT___0xC6033D32241F6FB5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  OBJECT::_0xC6033D32241F6FB5(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0xEB6F1A9B5510A5D2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  OBJECT::_0xEB6F1A9B5510A5D2(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0xBCE595371A5FBAAF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  OBJECT::_0xBCE595371A5FBAAF(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0xB48FCED898292E52(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  char* a4;
  int a4_size;
  mrb_get_args(mrb,"ffffs",&a0, &a1, &a2, &a3, &a4, &a4_size);
  Any r0 = OBJECT::_0xB48FCED898292E52(a0, a1, a2, a3, (a4_size == 0 ? 0 : a4));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__OBJECT___0x5C29F698D404C5E1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  OBJECT::_0x5C29F698D404C5E1(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x899BA936634A322E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = OBJECT::_0x899BA936634A322E(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__OBJECT___0x52AF537A0C5B8AAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = OBJECT::_0x52AF537A0C5B8AAD(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT___0x260EE4FDBDF4DB01(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = OBJECT::_0x260EE4FDBDF4DB01(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__OBJECT__CREATE_PICKUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_bool a6;
  mrb_int a7;
  mrb_get_args(mrb,"ifffiibi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  Pickup r0 = OBJECT::CREATE_PICKUP(a0, a1, a2, a3, a4, a5, a6, a7);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Pickup"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__OBJECT__CREATE_PICKUP_ROTATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_bool a10;
  mrb_int a11;
  mrb_get_args(mrb,"iffffffiiibi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  Pickup r0 = OBJECT::CREATE_PICKUP_ROTATE(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Pickup"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__OBJECT__CREATE_AMBIENT_PICKUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_bool a7;
  mrb_bool a8;
  mrb_get_args(mrb,"ifffiiibb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  Pickup r0 = OBJECT::CREATE_AMBIENT_PICKUP(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Pickup"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__OBJECT__CREATE_PORTABLE_PICKUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_int a5;
  mrb_get_args(mrb,"ifffbi",&a0, &a1, &a2, &a3, &a4, &a5);
  Pickup r0 = OBJECT::CREATE_PORTABLE_PICKUP(a0, a1, a2, a3, a4, a5);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Pickup"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__OBJECT___CREATE_PICKUP_2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_int a5;
  mrb_get_args(mrb,"ifffbi",&a0, &a1, &a2, &a3, &a4, &a5);
  Pickup r0 = OBJECT::_CREATE_PICKUP_2(a0, a1, a2, a3, a4, a5);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Pickup"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__OBJECT__ATTACH_PORTABLE_PICKUP_TO_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  OBJECT::ATTACH_PORTABLE_PICKUP_TO_PED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT__DETACH_PORTABLE_PICKUP_FROM_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  OBJECT::DETACH_PORTABLE_PICKUP_FROM_PED(a0);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x0BF3B3BD47D79C08(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  OBJECT::_0x0BF3B3BD47D79C08(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x78857FC65CADB909(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  OBJECT::_0x78857FC65CADB909(a0);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT__GET_SAFE_PICKUP_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"fffii",&a0, &a1, &a2, &a3, &a4);
  Vector3 r0 = OBJECT::GET_SAFE_PICKUP_COORDS(a0, a1, a2, a3, a4);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__OBJECT__GET_PICKUP_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = OBJECT::GET_PICKUP_COORDS(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__OBJECT__REMOVE_ALL_PICKUPS_OF_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  OBJECT::REMOVE_ALL_PICKUPS_OF_TYPE(a0);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT__HAS_PICKUP_BEEN_COLLECTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = OBJECT::HAS_PICKUP_BEEN_COLLECTED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT__REMOVE_PICKUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  OBJECT::REMOVE_PICKUP(a0);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT__CREATE_MONEY_PICKUPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"fffiii",&a0, &a1, &a2, &a3, &a4, &a5);
  OBJECT::CREATE_MONEY_PICKUPS(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT__DOES_PICKUP_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = OBJECT::DOES_PICKUP_EXIST(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT__DOES_PICKUP_OBJECT_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = OBJECT::DOES_PICKUP_OBJECT_EXIST(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT__GET_PICKUP_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = OBJECT::GET_PICKUP_OBJECT(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__OBJECT___0x0378C08504160D0D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = OBJECT::_0x0378C08504160D0D(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT___IS_PICKUP_WITHIN_RADIUS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = OBJECT::_IS_PICKUP_WITHIN_RADIUS(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT__SET_PICKUP_REGENERATION_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  OBJECT::SET_PICKUP_REGENERATION_TIME(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x616093EC6B139DD9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  OBJECT::_0x616093EC6B139DD9(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x88EAEC617CD26926(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  OBJECT::_0x88EAEC617CD26926(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT__SET_TEAM_PICKUP_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  OBJECT::SET_TEAM_PICKUP_OBJECT(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x92AEFB5F6E294023(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  OBJECT::_0x92AEFB5F6E294023(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0xA08FE5E49BDC39DD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ifb",&a0, &a1, &a2);
  OBJECT::_0xA08FE5E49BDC39DD(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0xDB41D07A45A6D4B7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = OBJECT::_0xDB41D07A45A6D4B7(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__OBJECT___0x318516E02DE3ECE2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  OBJECT::_0x318516E02DE3ECE2(a0);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x31F924B53EADDF65(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  OBJECT::_0x31F924B53EADDF65(a0);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0xF92099527DB8E2A7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  OBJECT::_0xF92099527DB8E2A7(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0xA2C1F5E92AFE49ED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  OBJECT::_0xA2C1F5E92AFE49ED();
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x762DB2D380B48D04(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  OBJECT::_0x762DB2D380B48D04(a0);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x3430676B11CDF21D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_get_args(mrb,"fffi",&a0, &a1, &a2, &a3);
  OBJECT::_0x3430676B11CDF21D(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0xB2D0BDE54F0E8E5A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  OBJECT::_0xB2D0BDE54F0E8E5A(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x08F96CA6C551AD51(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Hash r0 = OBJECT::_0x08F96CA6C551AD51(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__OBJECT___0x11D1E53A726891FE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = OBJECT::_0x11D1E53A726891FE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__OBJECT___0x971DA0055324D033(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  OBJECT::_0x971DA0055324D033(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___0x5EAAD83F8CFB4575(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = OBJECT::_0x5EAAD83F8CFB4575(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__OBJECT__SET_FORCE_OBJECT_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  OBJECT::SET_FORCE_OBJECT_THIS_FRAME(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__OBJECT___MARK_OBJECT_FOR_DELETION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  OBJECT::_MARK_OBJECT_FOR_DELETION(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_PAUSE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::TASK_PAUSE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_STAND_STILL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::TASK_STAND_STILL(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_JUMP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AI::TASK_JUMP(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_COWER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::TASK_COWER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_HANDS_UP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  AI::TASK_HANDS_UP(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__AI__UPDATE_TASK_HANDS_UP_DURATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::UPDATE_TASK_HANDS_UP_DURATION(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_OPEN_VEHICLE_DOOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_float a4;
  mrb_get_args(mrb,"iiiif",&a0, &a1, &a2, &a3, &a4);
  AI::TASK_OPEN_VEHICLE_DOOR(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_ENTER_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_float a4;
  mrb_int a5;
  mrb_int a6;
  mrb_get_args(mrb,"iiiifii",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  AI::TASK_ENTER_VEHICLE(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_LEAVE_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  AI::TASK_LEAVE_VEHICLE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI___TASK_GET_OFF_BOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::_TASK_GET_OFF_BOAT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_SKY_DIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::TASK_SKY_DIVE(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_PARACHUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AI::TASK_PARACHUTE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_PARACHUTE_TO_TARGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  AI::TASK_PARACHUTE_TO_TARGET(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_PARACHUTE_TASK_TARGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  AI::SET_PARACHUTE_TASK_TARGET(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_PARACHUTE_TASK_THRUST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  AI::SET_PARACHUTE_TASK_THRUST(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_RAPPEL_FROM_HELI(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::TASK_RAPPEL_FROM_HELI(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_VEHICLE_DRIVE_TO_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_float a9;
  mrb_float a10;
  mrb_get_args(mrb,"iiffffiiiff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10);
  AI::TASK_VEHICLE_DRIVE_TO_COORD(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_float a7;
  mrb_get_args(mrb,"iiffffif",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  AI::TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_VEHICLE_DRIVE_WANDER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_int a3;
  mrb_get_args(mrb,"iifi",&a0, &a1, &a2, &a3);
  AI::TASK_VEHICLE_DRIVE_WANDER(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_FOLLOW_TO_OFFSET_OF_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_float a7;
  mrb_bool a8;
  mrb_get_args(mrb,"iiffffifb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  AI::TASK_FOLLOW_TO_OFFSET_OF_ENTITY(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_GO_STRAIGHT_TO_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_float a6;
  mrb_float a7;
  mrb_get_args(mrb,"iffffiff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  AI::TASK_GO_STRAIGHT_TO_COORD(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_get_args(mrb,"iiffffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  AI::TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_ACHIEVE_HEADING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_int a2;
  mrb_get_args(mrb,"ifi",&a0, &a1, &a2);
  AI::TASK_ACHIEVE_HEADING(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_FLUSH_ROUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AI::TASK_FLUSH_ROUTE();
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_EXTEND_ROUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  AI::TASK_EXTEND_ROUTE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_FOLLOW_POINT_ROUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_int a2;
  mrb_get_args(mrb,"ifi",&a0, &a1, &a2);
  AI::TASK_FOLLOW_POINT_ROUTE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_GO_TO_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_get_args(mrb,"iiifffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  AI::TASK_GO_TO_ENTITY(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_SMART_FLEE_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_get_args(mrb,"iffffibb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  AI::TASK_SMART_FLEE_COORD(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_SMART_FLEE_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_int a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_get_args(mrb,"iifibb",&a0, &a1, &a2, &a3, &a4, &a5);
  AI::TASK_SMART_FLEE_PED(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_REACT_AND_FLEE_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::TASK_REACT_AND_FLEE_PED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_SHOCKING_EVENT_REACT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::TASK_SHOCKING_EVENT_REACT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_WANDER_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_get_args(mrb,"iffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  AI::TASK_WANDER_IN_AREA(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_WANDER_STANDARD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_int a2;
  mrb_get_args(mrb,"ifi",&a0, &a1, &a2);
  AI::TASK_WANDER_STANDARD(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_VEHICLE_PARK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_float a7;
  mrb_bool a8;
  mrb_get_args(mrb,"iiffffifb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  AI::TASK_VEHICLE_PARK(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_STEALTH_KILL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_get_args(mrb,"iiifb",&a0, &a1, &a2, &a3, &a4);
  AI::TASK_STEALTH_KILL(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_PLANT_BOMB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  AI::TASK_PLANT_BOMB(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_FOLLOW_NAV_MESH_TO_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_float a6;
  mrb_int a7;
  mrb_float a8;
  mrb_get_args(mrb,"iffffifif",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  AI::TASK_FOLLOW_NAV_MESH_TO_COORD(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_float a6;
  mrb_int a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_float a11;
  mrb_get_args(mrb,"iffffififfff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  AI::TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_PED_PATH_CAN_USE_CLIMBOVERS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AI::SET_PED_PATH_CAN_USE_CLIMBOVERS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_PED_PATH_CAN_USE_LADDERS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AI::SET_PED_PATH_CAN_USE_LADDERS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_PED_PATH_CAN_DROP_FROM_HEIGHT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AI::SET_PED_PATH_CAN_DROP_FROM_HEIGHT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI___0x88E32DB8C1A4AA4B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  AI::_0x88E32DB8C1A4AA4B(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_PED_PATHS_WIDTH_PLANT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AI::SET_PED_PATHS_WIDTH_PLANT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_PED_PATH_PREFER_TO_AVOID_WATER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AI::SET_PED_PATH_PREFER_TO_AVOID_WATER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_PED_PATH_AVOID_FIRE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AI::SET_PED_PATH_AVOID_FIRE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  AI::SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__GET_NAVMESH_ROUTE_RESULT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = AI::GET_NAVMESH_ROUTE_RESULT(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AI___0x3E38E28A1D80DDF6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::_0x3E38E28A1D80DDF6(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__TASK_GO_TO_COORD_ANY_MEANS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_bool a6;
  mrb_int a7;
  mrb_float a8;
  mrb_get_args(mrb,"iffffibif",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  AI::TASK_GO_TO_COORD_ANY_MEANS(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_int a10;
  mrb_int a11;
  mrb_get_args(mrb,"ifffiiiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  AI::TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_PLAY_ANIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_int a6;
  mrb_float a7;
  mrb_bool a8;
  mrb_bool a9;
  mrb_bool a10;
  mrb_get_args(mrb,"issffiifbbb",&a0, &a1, &a1_size, &a2, &a2_size, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10);
  AI::TASK_PLAY_ANIM(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), a3, a4, a5, a6, a7, a8, a9, a10);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_PLAY_ANIM_ADVANCED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_int a11;
  mrb_int a12;
  mrb_float a13;
  mrb_int a14;
  mrb_int a15;
  mrb_get_args(mrb,"issffffffffiifii",&a0, &a1, &a1_size, &a2, &a2_size, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14, &a15);
  AI::TASK_PLAY_ANIM_ADVANCED(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return mrb_nil_value();
}

mrb_value mruby__AI__STOP_ANIM_TASK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_float a3;
  mrb_get_args(mrb,"issf",&a0, &a1, &a1_size, &a2, &a2_size, &a3);
  AI::STOP_ANIM_TASK(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__STOP_ANIM_PLAYBACK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  AI::STOP_ANIM_PLAYBACK(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_ANIM_WEIGHT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_int a2;
  mrb_int a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ifiib",&a0, &a1, &a2, &a3, &a4);
  AI::SET_ANIM_WEIGHT(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_ANIM_RATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_get_args(mrb,"ifib",&a0, &a1, &a2, &a3);
  AI::SET_ANIM_RATE(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_ANIM_LOOPED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_get_args(mrb,"ibib",&a0, &a1, &a2, &a3);
  AI::SET_ANIM_LOOPED(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI___TASK_STOP_PHONE_GESTURE_ANIMATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::_TASK_STOP_PHONE_GESTURE_ANIMATION(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__IS_PLAYING_PHONE_GESTURE_ANIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_PLAYING_PHONE_GESTURE_ANIM(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__GET_PHONE_GESTURE_ANIM_CURRENT_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = AI::GET_PHONE_GESTURE_ANIM_CURRENT_TIME(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__AI__GET_PHONE_GESTURE_ANIM_TOTAL_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = AI::GET_PHONE_GESTURE_ANIM_TOTAL_TIME(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__AI__TASK_VEHICLE_PLAY_ANIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iss",&a0, &a1, &a1_size, &a2, &a2_size);
  AI::TASK_VEHICLE_PLAY_ANIM(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2));
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_LOOK_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_int a6;
  mrb_get_args(mrb,"iffffii",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  AI::TASK_LOOK_AT_COORD(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_LOOK_AT_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  AI::TASK_LOOK_AT_ENTITY(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_CLEAR_LOOK_AT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::TASK_CLEAR_LOOK_AT(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__CLOSE_SEQUENCE_TASK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::CLOSE_SEQUENCE_TASK(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_PERFORM_SEQUENCE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::TASK_PERFORM_SEQUENCE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_SEQUENCE_TO_REPEAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AI::SET_SEQUENCE_TO_REPEAT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__GET_SEQUENCE_PROGRESS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = AI::GET_SEQUENCE_PROGRESS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AI__GET_IS_TASK_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = AI::GET_IS_TASK_ACTIVE(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__GET_SCRIPT_TASK_STATUS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = AI::GET_SCRIPT_TASK_STATUS(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AI__GET_ACTIVE_VEHICLE_MISSION_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = AI::GET_ACTIVE_VEHICLE_MISSION_TYPE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AI__TASK_LEAVE_ANY_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  AI::TASK_LEAVE_ANY_VEHICLE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_AIM_GUN_SCRIPTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iibb",&a0, &a1, &a2, &a3);
  AI::TASK_AIM_GUN_SCRIPTED(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_AIM_GUN_SCRIPTED_WITH_TARGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_get_args(mrb,"iifffibb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  AI::TASK_AIM_GUN_SCRIPTED_WITH_TARGET(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__AI__UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_get_args(mrb,"iifffb",&a0, &a1, &a2, &a3, &a4, &a5);
  AI::UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AI__GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = AI::GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AI__TASK_AIM_GUN_AT_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iiib",&a0, &a1, &a2, &a3);
  AI::TASK_AIM_GUN_AT_ENTITY(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_TURN_PED_TO_FACE_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  AI::TASK_TURN_PED_TO_FACE_ENTITY(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_AIM_GUN_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_get_args(mrb,"ifffibb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  AI::TASK_AIM_GUN_AT_COORD(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_SHOOT_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"ifffii",&a0, &a1, &a2, &a3, &a4, &a5);
  AI::TASK_SHOOT_AT_COORD(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__CLEAR_PED_TASKS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::CLEAR_PED_TASKS(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__CLEAR_PED_SECONDARY_TASK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::CLEAR_PED_SECONDARY_TASK(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_EVERYONE_LEAVE_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::TASK_EVERYONE_LEAVE_VEHICLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_GOTO_ENTITY_OFFSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_get_args(mrb,"iiifffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  AI::TASK_GOTO_ENTITY_OFFSET(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_GOTO_ENTITY_OFFSET_XY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_get_args(mrb,"iiiffffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  AI::TASK_GOTO_ENTITY_OFFSET_XY(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_TURN_PED_TO_FACE_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_get_args(mrb,"ifffi",&a0, &a1, &a2, &a3, &a4);
  AI::TASK_TURN_PED_TO_FACE_COORD(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_VEHICLE_TEMP_ACTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  AI::TASK_VEHICLE_TEMP_ACTION(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_VEHICLE_MISSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_float a4;
  mrb_int a5;
  mrb_float a6;
  mrb_float a7;
  mrb_bool a8;
  mrb_get_args(mrb,"iiiififfb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  AI::TASK_VEHICLE_MISSION(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_VEHICLE_MISSION_PED_TARGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_float a4;
  mrb_int a5;
  mrb_float a6;
  mrb_float a7;
  mrb_bool a8;
  mrb_get_args(mrb,"iiiififfb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  AI::TASK_VEHICLE_MISSION_PED_TARGET(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_VEHICLE_MISSION_COORS_TARGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_float a6;
  mrb_int a7;
  mrb_float a8;
  mrb_float a9;
  mrb_bool a10;
  mrb_get_args(mrb,"iifffififfb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10);
  AI::TASK_VEHICLE_MISSION_COORS_TARGET(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_VEHICLE_ESCORT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_float a4;
  mrb_int a5;
  mrb_float a6;
  mrb_int a7;
  mrb_float a8;
  mrb_get_args(mrb,"iiiififif",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  AI::TASK_VEHICLE_ESCORT(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__AI___TASK_VEHICLE_FOLLOW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"iiiiff",&a0, &a1, &a2, &a3, &a4, &a5);
  AI::_TASK_VEHICLE_FOLLOW(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_VEHICLE_CHASE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::TASK_VEHICLE_CHASE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_VEHICLE_HELI_PROTECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_int a4;
  mrb_float a5;
  mrb_int a6;
  mrb_int a7;
  mrb_get_args(mrb,"iiififii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  AI::TASK_VEHICLE_HELI_PROTECT(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  AI::SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  AI::SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_HELI_CHASE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iifff",&a0, &a1, &a2, &a3, &a4);
  AI::TASK_HELI_CHASE(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_PLANE_CHASE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iifff",&a0, &a1, &a2, &a3, &a4);
  AI::TASK_PLANE_CHASE(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_PLANE_LAND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_get_args(mrb,"iiffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  AI::TASK_PLANE_LAND(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_HELI_MISSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_int a11;
  mrb_int a12;
  mrb_float a13;
  mrb_int a14;
  mrb_get_args(mrb,"iiiifffifffiifi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14);
  AI::TASK_HELI_MISSION(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_PLANE_MISSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_float a11;
  mrb_float a12;
  mrb_get_args(mrb,"iiiifffifffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12);
  AI::TASK_PLANE_MISSION(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_BOAT_MISSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_float a8;
  mrb_int a9;
  mrb_float a10;
  mrb_int a11;
  mrb_get_args(mrb,"iiiifffififi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  AI::TASK_BOAT_MISSION(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_DRIVE_BY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_bool a8;
  mrb_int a9;
  mrb_get_args(mrb,"iiiffffibi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  AI::TASK_DRIVE_BY(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_DRIVEBY_TASK_TARGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"iiifff",&a0, &a1, &a2, &a3, &a4, &a5);
  AI::SET_DRIVEBY_TASK_TARGET(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AI__CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__CONTROL_MOUNTED_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::CONTROL_MOUNTED_WEAPON(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__SET_MOUNTED_WEAPON_TARGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"iiifff",&a0, &a1, &a2, &a3, &a4, &a5);
  AI::SET_MOUNTED_WEAPON_TARGET(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AI__IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__TASK_USE_MOBILE_PHONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::TASK_USE_MOBILE_PHONE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_USE_MOBILE_PHONE_TIMED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::TASK_USE_MOBILE_PHONE_TIMED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_CHAT_TO_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_get_args(mrb,"iiifffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  AI::TASK_CHAT_TO_PED(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_WARP_PED_INTO_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  AI::TASK_WARP_PED_INTO_VEHICLE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_SHOOT_AT_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  AI::TASK_SHOOT_AT_ENTITY(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_CLIMB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AI::TASK_CLIMB(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_CLIMB_LADDER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AI::TASK_CLIMB_LADDER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__CLEAR_PED_TASKS_IMMEDIATELY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::CLEAR_PED_TASKS_IMMEDIATELY(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_PERFORM_SEQUENCE_FROM_PROGRESS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  AI::TASK_PERFORM_SEQUENCE_FROM_PROGRESS(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_NEXT_DESIRED_MOVE_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::SET_NEXT_DESIRED_MOVE_STATE(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_PED_DESIRED_MOVE_BLEND_RATIO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  AI::SET_PED_DESIRED_MOVE_BLEND_RATIO(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__GET_PED_DESIRED_MOVE_BLEND_RATIO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = AI::GET_PED_DESIRED_MOVE_BLEND_RATIO(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__AI__TASK_GOTO_ENTITY_AIMING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"iiff",&a0, &a1, &a2, &a3);
  AI::TASK_GOTO_ENTITY_AIMING(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_SET_DECISION_MAKER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::TASK_SET_DECISION_MAKER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_SET_SPHERE_DEFENSIVE_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  AI::TASK_SET_SPHERE_DEFENSIVE_AREA(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_CLEAR_DEFENSIVE_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::TASK_CLEAR_DEFENSIVE_AREA(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_PED_SLIDE_TO_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"ifffff",&a0, &a1, &a2, &a3, &a4, &a5);
  AI::TASK_PED_SLIDE_TO_COORD(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_PED_SLIDE_TO_COORD_HDG_RATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_get_args(mrb,"iffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  AI::TASK_PED_SLIDE_TO_COORD_HDG_RATE(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__AI__ADD_COVER_POINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_bool a7;
  mrb_get_args(mrb,"ffffiiib",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  ScrHandle r0 = AI::ADD_COVER_POINT(a0, a1, a2, a3, a4, a5, a6, a7);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "ScrHandle"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__AI__REMOVE_COVER_POINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::REMOVE_COVER_POINT(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  mrb_bool r0 = AI::DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__GET_SCRIPTED_COVER_POINT_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = AI::GET_SCRIPTED_COVER_POINT_COORDS(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__AI__TASK_COMBAT_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  AI::TASK_COMBAT_PED(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_COMBAT_PED_TIMED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  AI::TASK_COMBAT_PED_TIMED(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_SEEK_COVER_FROM_POS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_bool a5;
  mrb_get_args(mrb,"ifffib",&a0, &a1, &a2, &a3, &a4, &a5);
  AI::TASK_SEEK_COVER_FROM_POS(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_SEEK_COVER_FROM_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iiib",&a0, &a1, &a2, &a3);
  AI::TASK_SEEK_COVER_FROM_PED(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_SEEK_COVER_TO_COVER_POINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_bool a6;
  mrb_get_args(mrb,"iifffib",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  AI::TASK_SEEK_COVER_TO_COVER_POINT(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_SEEK_COVER_TO_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_bool a8;
  mrb_get_args(mrb,"iffffffib",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  AI::TASK_SEEK_COVER_TO_COORDS(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_PUT_PED_DIRECTLY_INTO_COVER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_bool a5;
  mrb_float a6;
  mrb_bool a7;
  mrb_bool a8;
  mrb_int a9;
  mrb_bool a10;
  mrb_get_args(mrb,"ifffibfbbib",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10);
  AI::TASK_PUT_PED_DIRECTLY_INTO_COVER(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_EXIT_COVER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iifff",&a0, &a1, &a2, &a3, &a4);
  AI::TASK_EXIT_COVER(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_PUT_PED_DIRECTLY_INTO_MELEE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_get_args(mrb,"iifffb",&a0, &a1, &a2, &a3, &a4, &a5);
  AI::TASK_PUT_PED_DIRECTLY_INTO_MELEE(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_TOGGLE_DUCK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  AI::TASK_TOGGLE_DUCK(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_GUARD_CURRENT_POSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iffb",&a0, &a1, &a2, &a3);
  AI::TASK_GUARD_CURRENT_POSITION(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_get_args(mrb,"ifffffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  AI::TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_GUARD_SPHERE_DEFENSIVE_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_get_args(mrb,"ifffffiffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10);
  AI::TASK_GUARD_SPHERE_DEFENSIVE_AREA(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_STAND_GUARD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  char* a5;
  int a5_size;
  mrb_get_args(mrb,"iffffs",&a0, &a1, &a2, &a3, &a4, &a5, &a5_size);
  AI::TASK_STAND_GUARD(a0, a1, a2, a3, a4, (a5_size == 0 ? 0 : a5));
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_DRIVE_TASK_CRUISE_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  AI::SET_DRIVE_TASK_CRUISE_SPEED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_DRIVE_TASK_MAX_CRUISE_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  AI::SET_DRIVE_TASK_MAX_CRUISE_SPEED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_DRIVE_TASK_DRIVING_STYLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::SET_DRIVE_TASK_DRIVING_STYLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__ADD_COVER_BLOCKING_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_bool a8;
  mrb_bool a9;
  mrb_get_args(mrb,"ffffffbbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  AI::ADD_COVER_BLOCKING_AREA(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__AI__REMOVE_ALL_COVER_BLOCKING_AREAS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AI::REMOVE_ALL_COVER_BLOCKING_AREAS();
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_START_SCENARIO_IN_PLACE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_int a2;
  mrb_bool a3;
  mrb_get_args(mrb,"isib",&a0, &a1, &a1_size, &a2, &a3);
  AI::TASK_START_SCENARIO_IN_PLACE(a0, (a1_size == 0 ? 0 : a1), a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_START_SCENARIO_AT_POSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_bool a7;
  mrb_bool a8;
  mrb_get_args(mrb,"isffffibb",&a0, &a1, &a1_size, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  AI::TASK_START_SCENARIO_AT_POSITION(a0, (a1_size == 0 ? 0 : a1), a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_USE_NEAREST_SCENARIO_TO_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_get_args(mrb,"iffffi",&a0, &a1, &a2, &a3, &a4, &a5);
  AI::TASK_USE_NEAREST_SCENARIO_TO_COORD(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_get_args(mrb,"iffffi",&a0, &a1, &a2, &a3, &a4, &a5);
  AI::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_get_args(mrb,"iffffi",&a0, &a1, &a2, &a3, &a4, &a5);
  AI::TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_get_args(mrb,"iffffi",&a0, &a1, &a2, &a3, &a4, &a5);
  AI::TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AI__DOES_SCENARIO_EXIST_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ffffb",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = AI::DOES_SCENARIO_EXIST_IN_AREA(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__IS_SCENARIO_OCCUPIED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ffffb",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = AI::IS_SCENARIO_OCCUPIED(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__PED_HAS_USE_SCENARIO_TASK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::PED_HAS_USE_SCENARIO_TASK(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__PLAY_ANIM_ON_RUNNING_SCENARIO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iss",&a0, &a1, &a1_size, &a2, &a2_size);
  AI::PLAY_ANIM_ON_RUNNING_SCENARIO(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2));
  return mrb_nil_value();
}

mrb_value mruby__AI__DOES_SCENARIO_GROUP_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = AI::DOES_SCENARIO_GROUP_EXIST((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__IS_SCENARIO_GROUP_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = AI::IS_SCENARIO_GROUP_ENABLED((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__SET_SCENARIO_GROUP_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_get_args(mrb,"sb",&a0, &a0_size, &a1);
  AI::SET_SCENARIO_GROUP_ENABLED((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__RESET_SCENARIO_GROUPS_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AI::RESET_SCENARIO_GROUPS_ENABLED();
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_EXCLUSIVE_SCENARIO_GROUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  AI::SET_EXCLUSIVE_SCENARIO_GROUP((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__AI__RESET_EXCLUSIVE_SCENARIO_GROUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AI::RESET_EXCLUSIVE_SCENARIO_GROUP();
  return mrb_nil_value();
}

mrb_value mruby__AI__IS_SCENARIO_TYPE_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = AI::IS_SCENARIO_TYPE_ENABLED((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__SET_SCENARIO_TYPE_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_get_args(mrb,"sb",&a0, &a0_size, &a1);
  AI::SET_SCENARIO_TYPE_ENABLED((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__RESET_SCENARIO_TYPES_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AI::RESET_SCENARIO_TYPES_ENABLED();
  return mrb_nil_value();
}

mrb_value mruby__AI__IS_PED_ACTIVE_IN_SCENARIO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_PED_ACTIVE_IN_SCENARIO(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI___0x621C6E4729388E41(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::_0x621C6E4729388E41(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI___0x8FD89A6240813FD0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  AI::_0x8FD89A6240813FD0(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_COMBAT_HATED_TARGETS_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_get_args(mrb,"iffffi",&a0, &a1, &a2, &a3, &a4, &a5);
  AI::TASK_COMBAT_HATED_TARGETS_IN_AREA(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_COMBAT_HATED_TARGETS_AROUND_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_int a2;
  mrb_get_args(mrb,"ifi",&a0, &a1, &a2);
  AI::TASK_COMBAT_HATED_TARGETS_AROUND_PED(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"ifii",&a0, &a1, &a2, &a3);
  AI::TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_THROW_PROJECTILE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  AI::TASK_THROW_PROJECTILE(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_SWAP_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AI::TASK_SWAP_WEAPON(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_RELOAD_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AI::TASK_RELOAD_WEAPON(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__IS_PED_GETTING_UP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_PED_GETTING_UP(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__TASK_WRITHE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iiib",&a0, &a1, &a2, &a3);
  AI::TASK_WRITHE(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__IS_PED_IN_WRITHE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_PED_IN_WRITHE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__OPEN_PATROL_ROUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  AI::OPEN_PATROL_ROUTE((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__AI__CLOSE_PATROL_ROUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AI::CLOSE_PATROL_ROUTE();
  return mrb_nil_value();
}

mrb_value mruby__AI__ADD_PATROL_ROUTE_NODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_int a8;
  mrb_get_args(mrb,"isffffffi",&a0, &a1, &a1_size, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  AI::ADD_PATROL_ROUTE_NODE(a0, (a1_size == 0 ? 0 : a1), a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__AI__ADD_PATROL_ROUTE_LINK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::ADD_PATROL_ROUTE_LINK(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__CREATE_PATROL_ROUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AI::CREATE_PATROL_ROUTE();
  return mrb_nil_value();
}

mrb_value mruby__AI__DELETE_PATROL_ROUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  AI::DELETE_PATROL_ROUTE((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_PATROL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_int a2;
  mrb_bool a3;
  mrb_bool a4;
  mrb_get_args(mrb,"isibb",&a0, &a1, &a1_size, &a2, &a3, &a4);
  AI::TASK_PATROL(a0, (a1_size == 0 ? 0 : a1), a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_STAY_IN_COVER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::TASK_STAY_IN_COVER(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__ADD_VEHICLE_SUBTASK_ATTACK_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  AI::ADD_VEHICLE_SUBTASK_ATTACK_COORD(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__ADD_VEHICLE_SUBTASK_ATTACK_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::ADD_VEHICLE_SUBTASK_ATTACK_PED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_VEHICLE_SHOOT_AT_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_get_args(mrb,"iif",&a0, &a1, &a2);
  AI::TASK_VEHICLE_SHOOT_AT_PED(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_VEHICLE_AIM_AT_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::TASK_VEHICLE_AIM_AT_PED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_VEHICLE_SHOOT_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  AI::TASK_VEHICLE_SHOOT_AT_COORD(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_VEHICLE_AIM_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  AI::TASK_VEHICLE_AIM_AT_COORD(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_VEHICLE_GOTO_NAVMESH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_float a7;
  mrb_get_args(mrb,"iiffffif",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  AI::TASK_VEHICLE_GOTO_NAVMESH(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_bool a8;
  mrb_float a9;
  mrb_float a10;
  mrb_bool a11;
  mrb_int a12;
  mrb_bool a13;
  mrb_int a14;
  mrb_get_args(mrb,"ifffffffbffbibi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14);
  AI::TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_float a7;
  mrb_float a8;
  mrb_bool a9;
  mrb_int a10;
  mrb_bool a11;
  mrb_int a12;
  mrb_int a13;
  mrb_get_args(mrb,"ifffifbffbibii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13);
  AI::TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_bool a8;
  mrb_float a9;
  mrb_float a10;
  mrb_bool a11;
  mrb_int a12;
  mrb_bool a13;
  mrb_int a14;
  mrb_get_args(mrb,"ifffffffbffbibi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14);
  AI::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_float a7;
  mrb_float a8;
  mrb_bool a9;
  mrb_bool a10;
  mrb_int a11;
  mrb_get_args(mrb,"iiffffbffbbi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  AI::TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_float a5;
  mrb_float a6;
  mrb_bool a7;
  mrb_bool a8;
  mrb_int a9;
  mrb_get_args(mrb,"iiifbffbbi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  AI::TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__AI__SET_HIGH_FALL_TASK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  AI::SET_HIGH_FALL_TASK(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__REQUEST_WAYPOINT_RECORDING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  AI::REQUEST_WAYPOINT_RECORDING((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__AI__GET_IS_WAYPOINT_RECORDING_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = AI::GET_IS_WAYPOINT_RECORDING_LOADED((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__REMOVE_WAYPOINT_RECORDING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  AI::REMOVE_WAYPOINT_RECORDING((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__AI__WAYPOINT_RECORDING_GET_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  Any r0 = AI::WAYPOINT_RECORDING_GET_COORD(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AI__WAYPOINT_RECORDING_GET_SPEED_AT_POINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_float r0 = AI::WAYPOINT_RECORDING_GET_SPEED_AT_POINT(&a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__AI__IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__GET_PED_WAYPOINT_PROGRESS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = AI::GET_PED_WAYPOINT_PROGRESS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AI__GET_PED_WAYPOINT_DISTANCE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = AI::GET_PED_WAYPOINT_DISTANCE(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__AI__SET_PED_WAYPOINT_ROUTE_OFFSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  Any r0 = AI::SET_PED_WAYPOINT_ROUTE_OFFSET(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AI__GET_WAYPOINT_DISTANCE_ALONG_ROUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_float r0 = AI::GET_WAYPOINT_DISTANCE_ALONG_ROUTE(&a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__AI__WAYPOINT_PLAYBACK_GET_IS_PAUSED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::WAYPOINT_PLAYBACK_GET_IS_PAUSED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__WAYPOINT_PLAYBACK_PAUSE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  AI::WAYPOINT_PLAYBACK_PAUSE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI__WAYPOINT_PLAYBACK_RESUME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"ibii",&a0, &a1, &a2, &a3);
  AI::WAYPOINT_PLAYBACK_RESUME(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__WAYPOINT_PLAYBACK_OVERRIDE_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ifb",&a0, &a1, &a2);
  AI::WAYPOINT_PLAYBACK_OVERRIDE_SPEED(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI__WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_bool a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ibff",&a0, &a1, &a2, &a3);
  AI::USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(&a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__WAYPOINT_PLAYBACK_START_AIMING_AT_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  AI::WAYPOINT_PLAYBACK_START_AIMING_AT_PED(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI__WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ifffb",&a0, &a1, &a2, &a3, &a4);
  AI::WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__AI___0xE70BA7B90F8390DC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_int a3;
  mrb_get_args(mrb,"iibi",&a0, &a1, &a2, &a3);
  AI::_0xE70BA7B90F8390DC(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_int a5;
  mrb_get_args(mrb,"ifffbi",&a0, &a1, &a2, &a3, &a4, &a5);
  AI::WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AI__WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__ASSISTED_MOVEMENT_REQUEST_ROUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  AI::ASSISTED_MOVEMENT_REQUEST_ROUTE((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__AI__ASSISTED_MOVEMENT_REMOVE_ROUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  AI::ASSISTED_MOVEMENT_REMOVE_ROUTE((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__AI__ASSISTED_MOVEMENT_IS_ROUTE_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = AI::ASSISTED_MOVEMENT_IS_ROUTE_LOADED((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_get_args(mrb,"si",&a0, &a0_size, &a1);
  AI::ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  AI::ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__GET_VEHICLE_WAYPOINT_PROGRESS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = AI::GET_VEHICLE_WAYPOINT_PROGRESS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AI__GET_VEHICLE_WAYPOINT_TARGET_POINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = AI::GET_VEHICLE_WAYPOINT_TARGET_POINT(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AI__VEHICLE_WAYPOINT_PLAYBACK_PAUSE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::VEHICLE_WAYPOINT_PLAYBACK_PAUSE(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__VEHICLE_WAYPOINT_PLAYBACK_RESUME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::VEHICLE_WAYPOINT_PLAYBACK_RESUME(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  AI::VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AI::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_FORCE_MOTION_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  AI::TASK_FORCE_MOTION_STATE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AI___0x2D537BA194896636(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_bool a3;
  char* a4;
  int a4_size;
  mrb_int a5;
  mrb_get_args(mrb,"isfbsi",&a0, &a1, &a1_size, &a2, &a3, &a4, &a4_size, &a5);
  AI::_0x2D537BA194896636(a0, (a1_size == 0 ? 0 : a1), a2, a3, (a4_size == 0 ? 0 : a4), a5);
  return mrb_nil_value();
}

mrb_value mruby__AI___0xD5B35BEA41919ACB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_int a8;
  mrb_float a9;
  mrb_bool a10;
  char* a11;
  int a11_size;
  mrb_int a12;
  mrb_get_args(mrb,"isffffffifbsi",&a0, &a1, &a1_size, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a11_size, &a12);
  AI::_0xD5B35BEA41919ACB(a0, (a1_size == 0 ? 0 : a1), a2, a3, a4, a5, a6, a7, a8, a9, a10, (a11_size == 0 ? 0 : a11), a12);
  return mrb_nil_value();
}

mrb_value mruby__AI___0x921CE12C489C4C41(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::_0x921CE12C489C4C41(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI___0x30ED88D5E0C56A37(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::_0x30ED88D5E0C56A37(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI___0xD01015C7316AE176(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = AI::_0xD01015C7316AE176(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AI___0xAB13A5565480B6D9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = AI::_0xAB13A5565480B6D9(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AI___0x717E4D1F2048376D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  char* cstr = AI::_0x717E4D1F2048376D(a0);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__AI___0xD5BB4025AE449A4E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_get_args(mrb,"isf",&a0, &a1, &a1_size, &a2);
  AI::_0xD5BB4025AE449A4E(a0, (a1_size == 0 ? 0 : a1), a2);
  return mrb_nil_value();
}

mrb_value mruby__AI___0xA7FFBA498E4AAF67(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_bool r0 = AI::_0xA7FFBA498E4AAF67(a0, (a1_size == 0 ? 0 : a1));
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__IS_MOVE_BLEND_RATIO_STILL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_MOVE_BLEND_RATIO_STILL(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__IS_MOVE_BLEND_RATIO_WALKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_MOVE_BLEND_RATIO_WALKING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__IS_MOVE_BLEND_RATIO_RUNNING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_MOVE_BLEND_RATIO_RUNNING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__IS_MOVE_BLEND_RATIO_SPRINTING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_MOVE_BLEND_RATIO_SPRINTING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__IS_PED_STILL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_PED_STILL(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__IS_PED_WALKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_PED_WALKING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__IS_PED_RUNNING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_PED_RUNNING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__IS_PED_SPRINTING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_PED_SPRINTING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__IS_PED_STRAFING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_PED_STRAFING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__TASK_SYNCHRONIZED_SCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  char* a2;
  int a2_size;
  char* a3;
  int a3_size;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_int a7;
  mrb_float a8;
  mrb_int a9;
  mrb_get_args(mrb,"iissffiifi",&a0, &a1, &a2, &a2_size, &a3, &a3_size, &a4, &a5, &a6, &a7, &a8, &a9);
  AI::TASK_SYNCHRONIZED_SCENE(a0, a1, (a2_size == 0 ? 0 : a2), (a3_size == 0 ? 0 : a3), a4, a5, a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_SWEEP_AIM_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  char* a3;
  int a3_size;
  char* a4;
  int a4_size;
  mrb_int a5;
  mrb_int a6;
  mrb_float a7;
  mrb_float a8;
  mrb_get_args(mrb,"issssiiff",&a0, &a1, &a1_size, &a2, &a2_size, &a3, &a3_size, &a4, &a4_size, &a5, &a6, &a7, &a8);
  AI::TASK_SWEEP_AIM_ENTITY(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), (a3_size == 0 ? 0 : a3), (a4_size == 0 ? 0 : a4), a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__AI__UPDATE_TASK_SWEEP_AIM_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::UPDATE_TASK_SWEEP_AIM_ENTITY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__UPDATE_TASK_SWEEP_AIM_POSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  AI::UPDATE_TASK_SWEEP_AIM_POSITION(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AI__TASK_ARREST_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AI::TASK_ARREST_PED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AI__IS_PED_RUNNING_ARREST_TASK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_PED_RUNNING_ARREST_TASK(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__IS_PED_BEING_ARRESTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_PED_BEING_ARRESTED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AI__UNCUFF_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AI::UNCUFF_PED(a0);
  return mrb_nil_value();
}

mrb_value mruby__AI__IS_PED_CUFFED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AI::IS_PED_CUFFED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__GET_ALLOCATED_STACK_SIZE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = GAMEPLAY::GET_ALLOCATED_STACK_SIZE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___GET_FREE_STACK_SLOTS_COUNT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = GAMEPLAY::_GET_FREE_STACK_SLOTS_COUNT(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__SET_RANDOM_SEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::SET_RANDOM_SEED(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_TIME_SCALE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::SET_TIME_SCALE(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_MISSION_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::SET_MISSION_FLAG(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__GET_MISSION_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::GET_MISSION_FLAG();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__SET_RANDOM_EVENT_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::SET_RANDOM_EVENT_FLAG(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__GET_RANDOM_EVENT_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::GET_RANDOM_EVENT_FLAG();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x24DA7D7667FD7B09(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x24DA7D7667FD7B09();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x4DCDF92BF64236CD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  GAMEPLAY::_0x4DCDF92BF64236CD(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x31125FD509D9043F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::_0x31125FD509D9043F(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xEBD3205A207939ED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::_0xEBD3205A207939ED(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x97E7E2C04245115B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::_0x97E7E2C04245115B(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xEB078CA2B5E82ADD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  GAMEPLAY::_0xEB078CA2B5E82ADD(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x703CC7F60CBB2B57(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::_0x703CC7F60CBB2B57(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x8951EB9C6906D3C8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_0x8951EB9C6906D3C8();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xBA4B8D83BDC75551(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::_0xBA4B8D83BDC75551(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xE8B9C0EC9E183F35(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0xE8B9C0EC9E183F35();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x65D2EBB47E1CEC21(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::_0x65D2EBB47E1CEC21(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x6F2135B6129620C1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::_0x6F2135B6129620C1(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x8D74E26F54B4E5C3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GAMEPLAY::_0x8D74E26F54B4E5C3((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___GET_CURRENT_WEATHER_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Hash r0 = GAMEPLAY::_GET_CURRENT_WEATHER_TYPE();
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__GAMEPLAY___GET_NEXT_WEATHER_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Hash r0 = GAMEPLAY::_GET_NEXT_WEATHER_TYPE();
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__GAMEPLAY__IS_PREV_WEATHER_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = GAMEPLAY::IS_PREV_WEATHER_TYPE((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_NEXT_WEATHER_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = GAMEPLAY::IS_NEXT_WEATHER_TYPE((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__SET_WEATHER_TYPE_PERSIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GAMEPLAY::SET_WEATHER_TYPE_PERSIST((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_WEATHER_TYPE_NOW_PERSIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GAMEPLAY::SET_WEATHER_TYPE_NOW_PERSIST((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_WEATHER_TYPE_NOW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GAMEPLAY::SET_WEATHER_TYPE_NOW((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___SET_WEATHER_TYPE_OVER_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  mrb_get_args(mrb,"sf",&a0, &a0_size, &a1);
  GAMEPLAY::_SET_WEATHER_TYPE_OVER_TIME((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_RANDOM_WEATHER_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::SET_RANDOM_WEATHER_TYPE();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__CLEAR_WEATHER_TYPE_PERSIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::CLEAR_WEATHER_TYPE_PERSIST();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___SET_WEATHER_TYPE_TRANSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_get_args(mrb,"iif",&a0, &a1, &a2);
  GAMEPLAY::_SET_WEATHER_TYPE_TRANSITION(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_OVERRIDE_WEATHER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GAMEPLAY::SET_OVERRIDE_WEATHER((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__CLEAR_OVERRIDE_WEATHER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::CLEAR_OVERRIDE_WEATHER();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xB8F87EAD7533B176(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::_0xB8F87EAD7533B176(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xC3EAD29AB273ECE8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::_0xC3EAD29AB273ECE8(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xA7A1127490312C36(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::_0xA7A1127490312C36(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x31727907B2C43C55(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::_0x31727907B2C43C55(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x405591EC8FD9096D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::_0x405591EC8FD9096D(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xF751B16FB32ABC1D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::_0xF751B16FB32ABC1D(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xB3E6360DDE733E82(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::_0xB3E6360DDE733E82(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x7C9C0B1EEB1F9072(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::_0x7C9C0B1EEB1F9072(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x6216B116083A7CB4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::_0x6216B116083A7CB4(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x9F5E6BB6B34540DA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::_0x9F5E6BB6B34540DA(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xB9854DFDE0D833D6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::_0xB9854DFDE0D833D6(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xC54A08C85AE4D410(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::_0xC54A08C85AE4D410(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xA8434F1DFF41D6E7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::_0xA8434F1DFF41D6E7(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xC3C221ADDDE31A11(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::_0xC3C221ADDDE31A11(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_WIND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::SET_WIND(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_WIND_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::SET_WIND_SPEED(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__GET_WIND_SPEED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float r0 = GAMEPLAY::GET_WIND_SPEED();
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GAMEPLAY__SET_WIND_DIRECTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::SET_WIND_DIRECTION(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__GET_WIND_DIRECTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Vector3 r0 = GAMEPLAY::GET_WIND_DIRECTION();
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__GAMEPLAY___SET_RAIN_FX_INTENSITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::_SET_RAIN_FX_INTENSITY(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__GET_RAIN_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::GET_RAIN_LEVEL();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__GET_SNOW_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::GET_SNOW_LEVEL();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___CREATE_LIGHTNING_THUNDER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_CREATE_LIGHTNING_THUNDER();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x02DEAAC8F8EA7FE7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GAMEPLAY::_0x02DEAAC8F8EA7FE7((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x11B56FBBF7224868(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GAMEPLAY::_0x11B56FBBF7224868((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___SET_CLOUD_HAT_TRANSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  mrb_get_args(mrb,"sf",&a0, &a0_size, &a1);
  GAMEPLAY::_SET_CLOUD_HAT_TRANSITION((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xA74802FB8D0B7814(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  mrb_get_args(mrb,"sf",&a0, &a0_size, &a1);
  GAMEPLAY::_0xA74802FB8D0B7814((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___CLEAR_CLOUD_HAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_CLEAR_CLOUD_HAT();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xF36199225D6D8C86(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::_0xF36199225D6D8C86(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x20AC25E781AE4A84(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float r0 = GAMEPLAY::_0x20AC25E781AE4A84();
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GAMEPLAY__GET_GAME_TIMER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::GET_GAME_TIMER();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__GET_FRAME_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float r0 = GAMEPLAY::GET_FRAME_TIME();
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GAMEPLAY___0xE599A503B3837E1B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float r0 = GAMEPLAY::_0xE599A503B3837E1B();
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GAMEPLAY__GET_FRAME_COUNT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = GAMEPLAY::GET_FRAME_COUNT();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__GET_RANDOM_FLOAT_IN_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  mrb_float r0 = GAMEPLAY::GET_RANDOM_FLOAT_IN_RANGE(a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GAMEPLAY__GET_RANDOM_INT_IN_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__ASIN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  mrb_float r0 = GAMEPLAY::ASIN(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GAMEPLAY__ACOS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  mrb_float r0 = GAMEPLAY::ACOS(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GAMEPLAY__TAN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  mrb_float r0 = GAMEPLAY::TAN(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GAMEPLAY__ATAN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  mrb_float r0 = GAMEPLAY::ATAN(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GAMEPLAY__ATAN2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  mrb_float r0 = GAMEPLAY::ATAN2(a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GAMEPLAY__GET_DISTANCE_BETWEEN_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_get_args(mrb,"ffffffb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  mrb_float r0 = GAMEPLAY::GET_DISTANCE_BETWEEN_COORDS(a0, a1, a2, a3, a4, a5, a6);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GAMEPLAY__GET_ANGLE_BETWEEN_2D_VECTORS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  mrb_float r0 = GAMEPLAY::GET_ANGLE_BETWEEN_2D_VECTORS(a0, a1, a2, a3);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GAMEPLAY__GET_HEADING_FROM_VECTOR_2D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  mrb_float r0 = GAMEPLAY::GET_HEADING_FROM_VECTOR_2D(a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GAMEPLAY___0x7F8F6405F4777AF6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_bool a9;
  mrb_get_args(mrb,"fffffffffb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  mrb_float r0 = GAMEPLAY::_0x7F8F6405F4777AF6(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GAMEPLAY___0x21C235BC64831E5A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_bool a9;
  mrb_get_args(mrb,"fffffffffb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  Vector3 r0 = GAMEPLAY::_0x21C235BC64831E5A(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__GAMEPLAY__GET_HASH_KEY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  Hash r0 = GAMEPLAY::GET_HASH_KEY((a0_size == 0 ? 0 : a0));
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__GAMEPLAY__IS_AREA_OCCUPIED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_bool a8;
  mrb_bool a9;
  mrb_bool a10;
  mrb_int a11;
  mrb_bool a12;
  mrb_get_args(mrb,"ffffffbbbbbib",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12);
  mrb_bool r0 = GAMEPLAY::IS_AREA_OCCUPIED(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_POSITION_OCCUPIED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_bool a8;
  mrb_int a9;
  mrb_bool a10;
  mrb_get_args(mrb,"ffffbbbbbib",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10);
  mrb_bool r0 = GAMEPLAY::IS_POSITION_OCCUPIED(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_POINT_OBSCURED_BY_A_MISSION_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_get_args(mrb,"ffffffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  mrb_bool r0 = GAMEPLAY::IS_POINT_OBSCURED_BY_A_MISSION_ENTITY(a0, a1, a2, a3, a4, a5, a6);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__CLEAR_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_get_args(mrb,"ffffbbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  GAMEPLAY::CLEAR_AREA(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x957838AAF91BD12D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_get_args(mrb,"ffffbbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  GAMEPLAY::_0x957838AAF91BD12D(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__CLEAR_AREA_OF_VEHICLES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_bool a8;
  mrb_get_args(mrb,"ffffbbbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  GAMEPLAY::CLEAR_AREA_OF_VEHICLES(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__CLEAR_ANGLED_AREA_OF_VEHICLES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_bool a7;
  mrb_bool a8;
  mrb_bool a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_get_args(mrb,"fffffffbbbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  GAMEPLAY::CLEAR_ANGLED_AREA_OF_VEHICLES(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__CLEAR_AREA_OF_OBJECTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_get_args(mrb,"ffffi",&a0, &a1, &a2, &a3, &a4);
  GAMEPLAY::CLEAR_AREA_OF_OBJECTS(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__CLEAR_AREA_OF_PEDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ffffb",&a0, &a1, &a2, &a3, &a4);
  GAMEPLAY::CLEAR_AREA_OF_PEDS(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__CLEAR_AREA_OF_COPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ffffb",&a0, &a1, &a2, &a3, &a4);
  GAMEPLAY::CLEAR_AREA_OF_COPS(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__CLEAR_AREA_OF_PROJECTILES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ffffb",&a0, &a1, &a2, &a3, &a4);
  GAMEPLAY::CLEAR_AREA_OF_PROJECTILES(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x7EC6F9A478A6A512(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_0x7EC6F9A478A6A512();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_SAVE_MENU_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::SET_SAVE_MENU_ACTIVE(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x397BAA01068BAA96(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x397BAA01068BAA96();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__SET_CREDITS_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::SET_CREDITS_ACTIVE(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xB51B9AB9EF81868C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::_0xB51B9AB9EF81868C(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x075F1D57402C93BA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x075F1D57402C93BA();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GAMEPLAY::TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__ADD_HOSPITAL_RESTART(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_get_args(mrb,"ffffi",&a0, &a1, &a2, &a3, &a4);
  mrb_int r0 = GAMEPLAY::ADD_HOSPITAL_RESTART(a0, a1, a2, a3, a4);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__DISABLE_HOSPITAL_RESTART(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  GAMEPLAY::DISABLE_HOSPITAL_RESTART(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__ADD_POLICE_RESTART(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_get_args(mrb,"ffffi",&a0, &a1, &a2, &a3, &a4);
  Any r0 = GAMEPLAY::ADD_POLICE_RESTART(a0, a1, a2, a3, a4);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__DISABLE_POLICE_RESTART(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  GAMEPLAY::DISABLE_POLICE_RESTART(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x706B5EDCAA7FA663(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  GAMEPLAY::_0x706B5EDCAA7FA663(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xA2716D40842EAF79(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_0xA2716D40842EAF79();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___DISABLE_AUTOMATIC_RESPAWN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::_DISABLE_AUTOMATIC_RESPAWN(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__IGNORE_NEXT_RESTART(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::IGNORE_NEXT_RESTART(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_FADE_OUT_AFTER_DEATH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::SET_FADE_OUT_AFTER_DEATH(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_FADE_OUT_AFTER_ARREST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::SET_FADE_OUT_AFTER_ARREST(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_FADE_IN_AFTER_DEATH_ARREST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::SET_FADE_IN_AFTER_DEATH_ARREST(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_FADE_IN_AFTER_LOAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::SET_FADE_IN_AFTER_LOAD(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_SAVE_HOUSE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  GAMEPLAY::SET_SAVE_HOUSE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__OVERRIDE_SAVE_HOUSE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_float a6;
  mrb_float a7;
  mrb_get_args(mrb,"bffffbff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  mrb_bool r0 = GAMEPLAY::OVERRIDE_SAVE_HOUSE(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___0xA4A0065E39C9F25C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  Any r0 = GAMEPLAY::_0xA4A0065E39C9F25C(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__DO_AUTO_SAVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::DO_AUTO_SAVE();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x6E04F06094C87047(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x6E04F06094C87047();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_AUTO_SAVE_IN_PROGRESS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::IS_AUTO_SAVE_IN_PROGRESS();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___0x2107A3773771186D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x2107A3773771186D();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x06462A961E94B67C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_0x06462A961E94B67C();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__BEGIN_REPLAY_STATS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  GAMEPLAY::BEGIN_REPLAY_STATS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x69FE6DC87BD2A5E9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::_0x69FE6DC87BD2A5E9(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__END_REPLAY_STATS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::END_REPLAY_STATS();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xD642319C54AADEB6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0xD642319C54AADEB6();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x5B1F2E327B6B6FE1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x5B1F2E327B6B6FE1();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x2B626A0150E4D449(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x2B626A0150E4D449();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0xDC9274A7EF6B2867(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0xDC9274A7EF6B2867();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x8098C8D6597AAE18(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = GAMEPLAY::_0x8098C8D6597AAE18(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__CLEAR_REPLAY_STATS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::CLEAR_REPLAY_STATS();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x72DE52178C291CB5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x72DE52178C291CB5();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x44A0BDC559B35F6E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x44A0BDC559B35F6E();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0xEB2104E905C6F2E9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0xEB2104E905C6F2E9();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x2B5E102E4A42F2BF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x2B5E102E4A42F2BF();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_MEMORY_CARD_IN_USE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::IS_MEMORY_CARD_IN_USE();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__SHOOT_SINGLE_BULLET_BETWEEN_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_bool a7;
  mrb_int a8;
  mrb_int a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_float a12;
  mrb_get_args(mrb,"ffffffibiibbf",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12);
  GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xE3A7742E0B7A2F8B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_bool a7;
  mrb_int a8;
  mrb_int a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_float a12;
  mrb_int a13;
  mrb_get_args(mrb,"ffffffibiibbfi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13);
  GAMEPLAY::_0xE3A7742E0B7A2F8B(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xBFE5756E7407064A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_bool a7;
  mrb_int a8;
  mrb_int a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_float a12;
  mrb_int a13;
  mrb_bool a14;
  mrb_bool a15;
  mrb_bool a16;
  mrb_bool a17;
  mrb_get_args(mrb,"ffffffibiibbfibbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14, &a15, &a16, &a17);
  GAMEPLAY::_0xBFE5756E7407064A(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_FAKE_WANTED_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::SET_FAKE_WANTED_LEVEL(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x4C9296CBCD1B971E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x4C9296CBCD1B971E();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_BIT_SET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = GAMEPLAY::IS_BIT_SET(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__USING_MISSION_CREATOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::USING_MISSION_CREATOR(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xDEA36202FC3382DF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::_0xDEA36202FC3382DF(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_MINIGAME_IN_PROGRESS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::SET_MINIGAME_IN_PROGRESS(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__IS_MINIGAME_IN_PROGRESS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::IS_MINIGAME_IN_PROGRESS();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_THIS_A_MINIGAME_SCRIPT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::IS_THIS_A_MINIGAME_SCRIPT();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_SNIPER_INVERTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::IS_SNIPER_INVERTED();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___0xD3D15555431AB793(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0xD3D15555431AB793();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__GET_PROFILE_SETTING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = GAMEPLAY::GET_PROFILE_SETTING(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__ARE_STRINGS_EQUAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"ss",&a0, &a0_size, &a1, &a1_size);
  mrb_bool r0 = GAMEPLAY::ARE_STRINGS_EQUAL((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1));
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__COMPARE_STRINGS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_bool a2;
  mrb_int a3;
  mrb_get_args(mrb,"ssbi",&a0, &a0_size, &a1, &a1_size, &a2, &a3);
  mrb_int r0 = GAMEPLAY::COMPARE_STRINGS((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1), a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__ABSI(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = GAMEPLAY::ABSI(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__ABSF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  mrb_float r0 = GAMEPLAY::ABSF(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GAMEPLAY__IS_SNIPER_BULLET_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"ffffff",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_bool r0 = GAMEPLAY::IS_SNIPER_BULLET_IN_AREA(a0, a1, a2, a3, a4, a5);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_PROJECTILE_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_get_args(mrb,"ffffffb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  mrb_bool r0 = GAMEPLAY::IS_PROJECTILE_IN_AREA(a0, a1, a2, a3, a4, a5, a6);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_PROJECTILE_TYPE_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_bool a7;
  mrb_get_args(mrb,"ffffffib",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  mrb_bool r0 = GAMEPLAY::IS_PROJECTILE_TYPE_IN_AREA(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_PROJECTILE_TYPE_IN_ANGLED_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_bool a8;
  mrb_get_args(mrb,"fffffffib",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  mrb_bool r0 = GAMEPLAY::IS_PROJECTILE_TYPE_IN_ANGLED_AREA(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___0x34318593248C8FB2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_get_args(mrb,"fffifb",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_bool r0 = GAMEPLAY::_0x34318593248C8FB2(a0, a1, a2, a3, a4, a5);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___0x8D7A43EC6A5FEA45(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_get_args(mrb,"iiiiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  Any r0 = GAMEPLAY::_0x8D7A43EC6A5FEA45(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0xDFB4138EEFED7B81(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  Any r0 = GAMEPLAY::_0xDFB4138EEFED7B81(a0, a1, a2, a3, a4);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x82FDE6A57EE4EE44(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"iiffff",&a0, &a1, &a2, &a3, &a4, &a5);
  Any r0 = GAMEPLAY::_0x82FDE6A57EE4EE44(a0, a1, a2, a3, a4, a5);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_BULLET_IN_ANGLED_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_bool a7;
  mrb_get_args(mrb,"fffffffb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  mrb_bool r0 = GAMEPLAY::IS_BULLET_IN_ANGLED_AREA(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_BULLET_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ffffb",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = GAMEPLAY::IS_BULLET_IN_AREA(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_BULLET_IN_BOX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_get_args(mrb,"ffffffb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  mrb_bool r0 = GAMEPLAY::IS_BULLET_IN_BOX(a0, a1, a2, a3, a4, a5, a6);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__HAS_BULLET_IMPACTED_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_get_args(mrb,"ffffbb",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_bool r0 = GAMEPLAY::HAS_BULLET_IMPACTED_IN_AREA(a0, a1, a2, a3, a4, a5);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__HAS_BULLET_IMPACTED_IN_BOX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_get_args(mrb,"ffffffbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  mrb_bool r0 = GAMEPLAY::HAS_BULLET_IMPACTED_IN_BOX(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_ORBIS_VERSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::IS_ORBIS_VERSION();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_DURANGO_VERSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::IS_DURANGO_VERSION();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_XBOX360_VERSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::IS_XBOX360_VERSION();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_PS3_VERSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::IS_PS3_VERSION();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_PC_VERSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::IS_PC_VERSION();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_AUSSIE_VERSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::IS_AUSSIE_VERSION();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_STRING_NULL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = GAMEPLAY::IS_STRING_NULL((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_STRING_NULL_OR_EMPTY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = GAMEPLAY::IS_STRING_NULL_OR_EMPTY((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__GET_BITS_IN_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  Any r0 = GAMEPLAY::GET_BITS_IN_RANGE(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__ADD_STUNT_JUMP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_float a11;
  mrb_float a12;
  mrb_float a13;
  mrb_float a14;
  mrb_int a15;
  mrb_int a16;
  mrb_get_args(mrb,"fffffffffffffffii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14, &a15, &a16);
  Any r0 = GAMEPLAY::ADD_STUNT_JUMP(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__ADD_STUNT_JUMP_ANGLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_float a11;
  mrb_float a12;
  mrb_float a13;
  mrb_float a14;
  mrb_float a15;
  mrb_float a16;
  mrb_int a17;
  mrb_int a18;
  mrb_get_args(mrb,"fffffffffffffffffii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14, &a15, &a16, &a17, &a18);
  Any r0 = GAMEPLAY::ADD_STUNT_JUMP_ANGLED(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__DELETE_STUNT_JUMP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::DELETE_STUNT_JUMP(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__ENABLE_STUNT_JUMP_SET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::ENABLE_STUNT_JUMP_SET(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__DISABLE_STUNT_JUMP_SET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::DISABLE_STUNT_JUMP_SET(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xD79185689F8FD5DF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::_0xD79185689F8FD5DF(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__IS_STUNT_JUMP_IN_PROGRESS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::IS_STUNT_JUMP_IN_PROGRESS();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___0x2272B0A1343129F4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::_0x2272B0A1343129F4();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___0x996DD1E1E02F1008(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x996DD1E1E02F1008();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x6856EC3D35C81EA4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x6856EC3D35C81EA4();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__CANCEL_STUNT_JUMP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::CANCEL_STUNT_JUMP();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_GAME_PAUSED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::SET_GAME_PAUSED(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_THIS_SCRIPT_CAN_BE_PAUSED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::SET_THIS_SCRIPT_CAN_BE_PAUSED(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x071E2A839DE82D90(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = GAMEPLAY::_0x071E2A839DE82D90(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___0x557E43C447E700A8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GAMEPLAY::_0x557E43C447E700A8(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___ENABLE_MP_DLC_MAPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::_ENABLE_MP_DLC_MAPS(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___SET_UNK_MAP_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::_SET_UNK_MAP_FLAG(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__IS_FRONTEND_FADING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::IS_FRONTEND_FADING();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY__POPULATE_NOW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::POPULATE_NOW();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__GET_INDEX_OF_CURRENT_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = GAMEPLAY::GET_INDEX_OF_CURRENT_LEVEL();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__SET_GRAVITY_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::SET_GRAVITY_LEVEL(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__START_SAVE_DATA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  GAMEPLAY::START_SAVE_DATA(&a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__STOP_SAVE_DATA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::STOP_SAVE_DATA();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xA09F896CE912481F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  Any r0 = GAMEPLAY::_0xA09F896CE912481F(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__REGISTER_INT_TO_SAVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  GAMEPLAY::REGISTER_INT_TO_SAVE(&a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__REGISTER_ENUM_TO_SAVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  GAMEPLAY::REGISTER_ENUM_TO_SAVE(&a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__REGISTER_FLOAT_TO_SAVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  GAMEPLAY::REGISTER_FLOAT_TO_SAVE(&a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__REGISTER_BOOL_TO_SAVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  GAMEPLAY::REGISTER_BOOL_TO_SAVE(&a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__REGISTER_TEXT_LABEL_TO_SAVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  GAMEPLAY::REGISTER_TEXT_LABEL_TO_SAVE(&a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x6F7794F28C6B2535(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  GAMEPLAY::_0x6F7794F28C6B2535(&a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x48F069265A0E4BEC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  GAMEPLAY::_0x48F069265A0E4BEC(&a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x8269816F6CFD40F8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  GAMEPLAY::_0x8269816F6CFD40F8(&a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xFAA457EF263E8763(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  GAMEPLAY::_0xFAA457EF263E8763(&a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___START_SAVE_STRUCT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iis",&a0, &a1, &a2, &a2_size);
  GAMEPLAY::_START_SAVE_STRUCT(&a0, a1, (a2_size == 0 ? 0 : a2));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__STOP_SAVE_STRUCT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::STOP_SAVE_STRUCT();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___START_SAVE_ARRAY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iis",&a0, &a1, &a2, &a2_size);
  GAMEPLAY::_START_SAVE_ARRAY(&a0, a1, (a2_size == 0 ? 0 : a2));
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__STOP_SAVE_ARRAY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::STOP_SAVE_ARRAY();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xDC0F817884CDD856(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  GAMEPLAY::_0xDC0F817884CDD856(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x9B2BD3773123EA2F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  GAMEPLAY::_0x9B2BD3773123EA2F(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xEB4A0C2D56441717(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = GAMEPLAY::_0xEB4A0C2D56441717(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__CREATE_INCIDENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_get_args(mrb,"iiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  Any r0 = GAMEPLAY::CREATE_INCIDENT(a0, a1, a2, a3, a4, a5, a6);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__IS_INCIDENT_VALID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GAMEPLAY::IS_INCIDENT_VALID(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___0xB08B85D860E7BA3C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  GAMEPLAY::_0xB08B85D860E7BA3C(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xD261BA3E7E998072(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  GAMEPLAY::_0xD261BA3E7E998072(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x67F6413D3220E18D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_get_args(mrb,"iiiiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  Any r0 = GAMEPLAY::_0x67F6413D3220E18D(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x1327E2FE9746BAEE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GAMEPLAY::_0x1327E2FE9746BAEE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___0xB129E447A2EDA4BF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  GAMEPLAY::_0xB129E447A2EDA4BF(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x32C7A7E8C43A1F80(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_get_args(mrb,"ffffffbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  Any r0 = GAMEPLAY::_0x32C7A7E8C43A1F80(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0xE6869BECDD8F2403(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  GAMEPLAY::_0xE6869BECDD8F2403(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__ENABLE_TENNIS_MODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  GAMEPLAY::ENABLE_TENNIS_MODE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__IS_TENNIS_MODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GAMEPLAY::IS_TENNIS_MODE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___0x17DF68D720AA77F8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GAMEPLAY::_0x17DF68D720AA77F8(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___0x19BFED045C647C49(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GAMEPLAY::_0x19BFED045C647C49(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___0xE95B0C7D5BA3B96B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GAMEPLAY::_0xE95B0C7D5BA3B96B(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___0x8FA9C42FC5D7C64B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_get_args(mrb,"iifffb",&a0, &a1, &a2, &a3, &a4, &a5);
  GAMEPLAY::_0x8FA9C42FC5D7C64B(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x54F157E0336A3822(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_get_args(mrb,"isf",&a0, &a1, &a1_size, &a2);
  GAMEPLAY::_0x54F157E0336A3822(a0, (a1_size == 0 ? 0 : a1), a2);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xD10F442036302D50(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  GAMEPLAY::_0xD10F442036302D50(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__RESET_DISPATCH_IDEAL_SPAWN_DISTANCE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::RESET_DISPATCH_IDEAL_SPAWN_DISTANCE();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_DISPATCH_IDEAL_SPAWN_DISTANCE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GAMEPLAY::SET_DISPATCH_IDEAL_SPAWN_DISTANCE(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  GAMEPLAY::SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  GAMEPLAY::SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x918C7B2D2FF3928B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_get_args(mrb,"fffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  Any r0 = GAMEPLAY::_0x918C7B2D2FF3928B(a0, a1, a2, a3, a4, a5, a6);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x2D4259F1FEB81DA9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  Any r0 = GAMEPLAY::_0x2D4259F1FEB81DA9(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__RESET_DISPATCH_SPAWN_BLOCKING_AREAS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::RESET_DISPATCH_SPAWN_BLOCKING_AREAS();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xD9F692D349249528(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_0xD9F692D349249528();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xE532EC1A63231B4F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  GAMEPLAY::_0xE532EC1A63231B4F(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xB8721407EE9C3FF6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  GAMEPLAY::_0xB8721407EE9C3FF6(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xB3CD58CCA6CDA852(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_0xB3CD58CCA6CDA852();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x2587A48BC88DFADF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::_0x2587A48BC88DFADF(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__DISPLAY_ONSCREEN_KEYBOARD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  char* a3;
  int a3_size;
  char* a4;
  int a4_size;
  char* a5;
  int a5_size;
  char* a6;
  int a6_size;
  mrb_int a7;
  mrb_get_args(mrb,"bssssssi",&a0, &a1, &a1_size, &a2, &a2_size, &a3, &a3_size, &a4, &a4_size, &a5, &a5_size, &a6, &a6_size, &a7);
  GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), (a3_size == 0 ? 0 : a3), (a4_size == 0 ? 0 : a4), (a5_size == 0 ? 0 : a5), (a6_size == 0 ? 0 : a6), a7);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__UPDATE_ONSCREEN_KEYBOARD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY__GET_ONSCREEN_KEYBOARD_RESULT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* cstr = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT();
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__GAMEPLAY___0x3ED1438C1F5C6612(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::_0x3ED1438C1F5C6612(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xA6A12939F16D85BE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  GAMEPLAY::_0xA6A12939F16D85BE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x1EAE0A6E978894A2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  GAMEPLAY::_0x1EAE0A6E978894A2(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_EXPLOSIVE_AMMO_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::SET_EXPLOSIVE_AMMO_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_FIRE_AMMO_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::SET_FIRE_AMMO_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_EXPLOSIVE_MELEE_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::SET_EXPLOSIVE_MELEE_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY__SET_SUPER_JUMP_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GAMEPLAY::SET_SUPER_JUMP_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x6FDDF453C0C756EC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x6FDDF453C0C756EC();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0xFB00CA71DA386228(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_0xFB00CA71DA386228();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x5AA3BEFA29F03AD4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x5AA3BEFA29F03AD4();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0xE3D969D2785FFB5E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_0xE3D969D2785FFB5E();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___RESET_LOCALPLAYER_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_RESET_LOCALPLAYER_STATE();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x0A60017F841A54F2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  GAMEPLAY::_0x0A60017F841A54F2(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x1FF6BF9A63E5757F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_0x1FF6BF9A63E5757F();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x1BB299305C3E8C13(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  GAMEPLAY::_0x1BB299305C3E8C13(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x92790862E36C2ADA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_0x92790862E36C2ADA();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xC7DB36C24634F52B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_0xC7DB36C24634F52B();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x437138B6A830166A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_0x437138B6A830166A();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x37DEB0AA183FB6D8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_0x37DEB0AA183FB6D8();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xEA2F2061875EED90(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0xEA2F2061875EED90();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x3BBBD13E5041A79E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x3BBBD13E5041A79E();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0xA049A5BE0F04F2F8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0xA049A5BE0F04F2F8();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x4750FC27570311EC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x4750FC27570311EC();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x1B2366C3F2A5C8DF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x1B2366C3F2A5C8DF();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___FORCE_SOCIAL_CLUB_UPDATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_FORCE_SOCIAL_CLUB_UPDATE();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x14832BF2ABA53FC5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0x14832BF2ABA53FC5();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0xC79AE21974B01FB2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_0xC79AE21974B01FB2();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x684A41975F077262(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::_0x684A41975F077262();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___0xABB2FA71C83A1B72(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0xABB2FA71C83A1B72();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GAMEPLAY___0x4EBB7E87AA0DBED4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::_0x4EBB7E87AA0DBED4(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x9689123E3F213AA5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GAMEPLAY::_0x9689123E3F213AA5();
  return mrb_bool_value(r0);
}

mrb_value mruby__GAMEPLAY___0x9D8D44ADBBA61EF2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GAMEPLAY::_0x9D8D44ADBBA61EF2(a0);
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0x23227DF0B2115469(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GAMEPLAY::_0x23227DF0B2115469();
  return mrb_nil_value();
}

mrb_value mruby__GAMEPLAY___0xD10282B6E3751BA0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GAMEPLAY::_0xD10282B6E3751BA0();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__PLAY_PED_RINGTONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"sib",&a0, &a0_size, &a1, &a2);
  AUDIO::PLAY_PED_RINGTONE((a0_size == 0 ? 0 : a0), a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__IS_PED_RINGTONE_PLAYING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AUDIO::IS_PED_RINGTONE_PLAYING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__STOP_PED_RINGTONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::STOP_PED_RINGTONE(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__IS_MOBILE_PHONE_CALL_ONGOING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = AUDIO::IS_MOBILE_PHONE_CALL_ONGOING();
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO___0xC8B1B2425604CDD0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = AUDIO::_0xC8B1B2425604CDD0();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__CREATE_NEW_SCRIPTED_CONVERSATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::CREATE_NEW_SCRIPTED_CONVERSATION();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__ADD_PED_TO_CONVERSATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iis",&a0, &a1, &a2, &a2_size);
  AUDIO::ADD_PED_TO_CONVERSATION(a0, a1, (a2_size == 0 ? 0 : a2));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x33E3C6C6F2F0B506(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  AUDIO::_0x33E3C6C6F2F0B506(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x892B6AB8F33606F5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AUDIO::_0x892B6AB8F33606F5(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_MICROPHONE_POSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_get_args(mrb,"bfffffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  AUDIO::SET_MICROPHONE_POSITION(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x0B568201DD99F0EB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  AUDIO::_0x0B568201DD99F0EB(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x61631F5DF50D1C34(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  AUDIO::_0x61631F5DF50D1C34(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__START_SCRIPT_PHONE_CONVERSATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  AUDIO::START_SCRIPT_PHONE_CONVERSATION(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__PRELOAD_SCRIPT_PHONE_CONVERSATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  AUDIO::PRELOAD_SCRIPT_PHONE_CONVERSATION(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__START_SCRIPT_CONVERSATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"bbbb",&a0, &a1, &a2, &a3);
  AUDIO::START_SCRIPT_CONVERSATION(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__PRELOAD_SCRIPT_CONVERSATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"bbbb",&a0, &a1, &a2, &a3);
  AUDIO::PRELOAD_SCRIPT_CONVERSATION(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__START_PRELOADED_CONVERSATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::START_PRELOADED_CONVERSATION();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xE73364DB90778FFA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = AUDIO::_0xE73364DB90778FFA();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__IS_SCRIPTED_CONVERSATION_ONGOING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = AUDIO::IS_SCRIPTED_CONVERSATION_ONGOING();
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__IS_SCRIPTED_CONVERSATION_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = AUDIO::IS_SCRIPTED_CONVERSATION_LOADED();
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__GET_CURRENT_SCRIPTED_CONVERSATION_LINE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = AUDIO::GET_CURRENT_SCRIPTED_CONVERSATION_LINE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__PAUSE_SCRIPTED_CONVERSATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  AUDIO::PAUSE_SCRIPTED_CONVERSATION(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__RESTART_SCRIPTED_CONVERSATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::RESTART_SCRIPTED_CONVERSATION();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__STOP_SCRIPTED_CONVERSATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  Any r0 = AUDIO::STOP_SCRIPTED_CONVERSATION(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x8A694D7A68F8DC38(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iss",&a0, &a1, &a1_size, &a2, &a2_size);
  AUDIO::_0x8A694D7A68F8DC38(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xAA19F5572C38B564(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = AUDIO::_0xAA19F5572C38B564(&a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO___0xB542DE8C3D1CB210(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  AUDIO::_0xB542DE8C3D1CB210(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__REGISTER_SCRIPT_WITH_AUDIO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::REGISTER_SCRIPT_WITH_AUDIO(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__UNREGISTER_SCRIPT_WITH_AUDIO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::UNREGISTER_SCRIPT_WITH_AUDIO();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__REQUEST_MISSION_AUDIO_BANK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_get_args(mrb,"sb",&a0, &a0_size, &a1);
  mrb_bool r0 = AUDIO::REQUEST_MISSION_AUDIO_BANK((a0_size == 0 ? 0 : a0), a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__REQUEST_AMBIENT_AUDIO_BANK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_get_args(mrb,"sb",&a0, &a0_size, &a1);
  mrb_bool r0 = AUDIO::REQUEST_AMBIENT_AUDIO_BANK((a0_size == 0 ? 0 : a0), a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__REQUEST_SCRIPT_AUDIO_BANK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_get_args(mrb,"sb",&a0, &a0_size, &a1);
  mrb_bool r0 = AUDIO::REQUEST_SCRIPT_AUDIO_BANK((a0_size == 0 ? 0 : a0), a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__HINT_AMBIENT_AUDIO_BANK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = AUDIO::HINT_AMBIENT_AUDIO_BANK(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__HINT_SCRIPT_AUDIO_BANK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = AUDIO::HINT_SCRIPT_AUDIO_BANK(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__RELEASE_MISSION_AUDIO_BANK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::RELEASE_MISSION_AUDIO_BANK();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__RELEASE_AMBIENT_AUDIO_BANK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::RELEASE_AMBIENT_AUDIO_BANK();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__RELEASE_NAMED_SCRIPT_AUDIO_BANK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  AUDIO::RELEASE_NAMED_SCRIPT_AUDIO_BANK((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__RELEASE_SCRIPT_AUDIO_BANK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::RELEASE_SCRIPT_AUDIO_BANK();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x19AF7ED9B9D23058(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::_0x19AF7ED9B9D23058();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x9AC92EED5E4793AB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::_0x9AC92EED5E4793AB();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__GET_SOUND_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = AUDIO::GET_SOUND_ID();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__RELEASE_SOUND_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::RELEASE_SOUND_ID(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__PLAY_SOUND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_bool a3;
  mrb_int a4;
  mrb_bool a5;
  mrb_get_args(mrb,"issbib",&a0, &a1, &a1_size, &a2, &a2_size, &a3, &a4, &a5);
  AUDIO::PLAY_SOUND(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__PLAY_SOUND_FRONTEND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_bool a3;
  mrb_get_args(mrb,"issb",&a0, &a1, &a1_size, &a2, &a2_size, &a3);
  AUDIO::PLAY_SOUND_FRONTEND(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), a3);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xCADA5A0D0702381E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"ss",&a0, &a0_size, &a1, &a1_size);
  AUDIO::_0xCADA5A0D0702381E((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__PLAY_SOUND_FROM_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_int a2;
  char* a3;
  int a3_size;
  mrb_bool a4;
  mrb_int a5;
  mrb_get_args(mrb,"isisbi",&a0, &a1, &a1_size, &a2, &a3, &a3_size, &a4, &a5);
  AUDIO::PLAY_SOUND_FROM_ENTITY(a0, (a1_size == 0 ? 0 : a1), a2, (a3_size == 0 ? 0 : a3), a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__PLAY_SOUND_FROM_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  char* a5;
  int a5_size;
  mrb_bool a6;
  mrb_int a7;
  mrb_bool a8;
  mrb_get_args(mrb,"isfffsbib",&a0, &a1, &a1_size, &a2, &a3, &a4, &a5, &a5_size, &a6, &a7, &a8);
  AUDIO::PLAY_SOUND_FROM_COORD(a0, (a1_size == 0 ? 0 : a1), a2, a3, a4, (a5_size == 0 ? 0 : a5), a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__STOP_SOUND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::STOP_SOUND(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__GET_NETWORK_ID_FROM_SOUND_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = AUDIO::GET_NETWORK_ID_FROM_SOUND_ID(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO___0x75262FD12D0A1C84(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = AUDIO::_0x75262FD12D0A1C84(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__SET_VARIABLE_ON_STREAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  mrb_get_args(mrb,"sf",&a0, &a0_size, &a1);
  AUDIO::SET_VARIABLE_ON_STREAM((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__OVERRIDE_UNDERWATER_STREAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::OVERRIDE_UNDERWATER_STREAM(&a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x733ADF241531E5C2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  AUDIO::_0x733ADF241531E5C2(&a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__HAS_SOUND_FINISHED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AUDIO::HAS_SOUND_FINISHED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO___PLAY_AMBIENT_SPEECH1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iss",&a0, &a1, &a1_size, &a2, &a2_size);
  AUDIO::_PLAY_AMBIENT_SPEECH1(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___PLAY_AMBIENT_SPEECH2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iss",&a0, &a1, &a1_size, &a2, &a2_size);
  AUDIO::_PLAY_AMBIENT_SPEECH2(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___PLAY_AMBIENT_SPEECH_WITH_VOICE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  char* a3;
  int a3_size;
  mrb_bool a4;
  mrb_get_args(mrb,"isssb",&a0, &a1, &a1_size, &a2, &a2_size, &a3, &a3_size, &a4);
  AUDIO::_PLAY_AMBIENT_SPEECH_WITH_VOICE(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), (a3_size == 0 ? 0 : a3), a4);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__OVERRIDE_TREVOR_RAGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::OVERRIDE_TREVOR_RAGE(&a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__RESET_TREVOR_RAGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::RESET_TREVOR_RAGE();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_PLAYER_ANGRY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::SET_PLAYER_ANGRY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__PLAY_PAIN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_int a2;
  mrb_get_args(mrb,"ifi",&a0, &a1, &a2);
  AUDIO::PLAY_PAIN(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xD01005D2BA2EB778(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::_0xD01005D2BA2EB778(&a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xDDC635D5B3262C56(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::_0xDDC635D5B3262C56(&a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_AMBIENT_VOICE_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  AUDIO::SET_AMBIENT_VOICE_NAME(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x40CF0D12D142A9E8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::_0x40CF0D12D142A9E8(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x7CDC8C3B89F661B3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AUDIO::_0x7CDC8C3B89F661B3(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xA5342D390CDA41D6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::_0xA5342D390CDA41D6(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x7A73D05A607734C7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::_0x7A73D05A607734C7(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__STOP_CURRENT_PLAYING_AMBIENT_SPEECH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::STOP_CURRENT_PLAYING_AMBIENT_SPEECH(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__IS_AMBIENT_SPEECH_PLAYING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AUDIO::IS_AMBIENT_SPEECH_PLAYING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__IS_SCRIPTED_SPEECH_PLAYING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AUDIO::IS_SCRIPTED_SPEECH_PLAYING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__IS_ANY_SPEECH_PLAYING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AUDIO::IS_ANY_SPEECH_PLAYING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__IS_PED_IN_CURRENT_CONVERSATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AUDIO::IS_PED_IN_CURRENT_CONVERSATION(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__SET_PED_IS_DRUNK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::SET_PED_IS_DRUNK(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xC265DF9FB44A9FBD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AUDIO::_0xC265DF9FB44A9FBD(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__SET_ANIMAL_MOOD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AUDIO::SET_ANIMAL_MOOD(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__IS_MOBILE_PHONE_RADIO_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = AUDIO::IS_MOBILE_PHONE_RADIO_ACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__SET_MOBILE_PHONE_RADIO_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  AUDIO::SET_MOBILE_PHONE_RADIO_STATE(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__GET_PLAYER_RADIO_STATION_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = AUDIO::GET_PLAYER_RADIO_STATION_INDEX();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__GET_PLAYER_RADIO_STATION_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* cstr = AUDIO::GET_PLAYER_RADIO_STATION_NAME();
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__AUDIO__GET_RADIO_STATION_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  char* cstr = AUDIO::GET_RADIO_STATION_NAME(a0);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__AUDIO__GET_PLAYER_RADIO_STATION_GENRE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = AUDIO::GET_PLAYER_RADIO_STATION_GENRE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__IS_RADIO_RETUNING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = AUDIO::IS_RADIO_RETUNING();
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO___0x0626A247D2405330(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = AUDIO::_0x0626A247D2405330();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO___0xFF266D1D0EB1195D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::_0xFF266D1D0EB1195D();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xDD6BCF9E94425DF9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::_0xDD6BCF9E94425DF9();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_RADIO_TO_STATION_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  AUDIO::SET_RADIO_TO_STATION_NAME((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_VEH_RADIO_STATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  AUDIO::SET_VEH_RADIO_STATION(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xC1805D05E6D4FE10(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::_0xC1805D05E6D4FE10(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_EMITTER_RADIO_STATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"ss",&a0, &a0_size, &a1, &a1_size);
  AUDIO::SET_EMITTER_RADIO_STATION((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_STATIC_EMITTER_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_get_args(mrb,"sb",&a0, &a0_size, &a1);
  AUDIO::SET_STATIC_EMITTER_ENABLED((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_RADIO_TO_STATION_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::SET_RADIO_TO_STATION_INDEX(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_FRONTEND_RADIO_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  AUDIO::SET_FRONTEND_RADIO_ACTIVE(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__UNLOCK_MISSION_NEWS_STORY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::UNLOCK_MISSION_NEWS_STORY(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__GET_NUMBER_OF_PASSENGER_VOICE_VARIATIONS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = AUDIO::GET_NUMBER_OF_PASSENGER_VOICE_VARIATIONS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__GET_AUDIBLE_MUSIC_TRACK_TEXT_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = AUDIO::GET_AUDIBLE_MUSIC_TRACK_TEXT_ID();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__PLAY_END_CREDITS_MUSIC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  AUDIO::PLAY_END_CREDITS_MUSIC(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SKIP_RADIO_FORWARD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::SKIP_RADIO_FORWARD();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__FREEZE_RADIO_STATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  AUDIO::FREEZE_RADIO_STATION((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__UNFREEZE_RADIO_STATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  AUDIO::UNFREEZE_RADIO_STATION((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_RADIO_AUTO_UNFREEZE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  AUDIO::SET_RADIO_AUTO_UNFREEZE(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_INITIAL_PLAYER_STATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  AUDIO::SET_INITIAL_PLAYER_STATION((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_USER_RADIO_CONTROL_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  AUDIO::SET_USER_RADIO_CONTROL_ENABLED(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_RADIO_TRACK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"ss",&a0, &a0_size, &a1, &a1_size);
  AUDIO::SET_RADIO_TRACK((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_VEHICLE_RADIO_LOUD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::SET_VEHICLE_RADIO_LOUD(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___IS_VEHICLE_RADIO_LOUD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AUDIO::_IS_VEHICLE_RADIO_LOUD(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  AUDIO::SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x109697E2FFBAC8A1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = AUDIO::_0x109697E2FFBAC8A1();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO___0x5F43D83FD6738741(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = AUDIO::_0x5F43D83FD6738741();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__SET_VEHICLE_RADIO_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::SET_VEHICLE_RADIO_ENABLED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x1654F24A88A8E3FE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  AUDIO::_0x1654F24A88A8E3FE((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___MAX_RADIO_STATION_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = AUDIO::_MAX_RADIO_STATION_INDEX();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__FIND_RADIO_STATION_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = AUDIO::FIND_RADIO_STATION_INDEX(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO___0x774BD811F656A122(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_get_args(mrb,"sb",&a0, &a0_size, &a1);
  AUDIO::_0x774BD811F656A122((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x2C96CDB04FCA358E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  AUDIO::_0x2C96CDB04FCA358E(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x031ACB6ABA18C729(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"ss",&a0, &a0_size, &a1, &a1_size);
  AUDIO::_0x031ACB6ABA18C729((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xF3365489E0DD50F9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::_0xF3365489E0DD50F9(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_AMBIENT_ZONE_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  AUDIO::SET_AMBIENT_ZONE_STATE(&a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__CLEAR_AMBIENT_ZONE_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::CLEAR_AMBIENT_ZONE_STATE(&a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_AMBIENT_ZONE_LIST_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  AUDIO::SET_AMBIENT_ZONE_LIST_STATE(&a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__CLEAR_AMBIENT_ZONE_LIST_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::CLEAR_AMBIENT_ZONE_LIST_STATE(&a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_AMBIENT_ZONE_STATE_PERSISTENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"sbb",&a0, &a0_size, &a1, &a2);
  AUDIO::SET_AMBIENT_ZONE_STATE_PERSISTENT((a0_size == 0 ? 0 : a0), a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"sbb",&a0, &a0_size, &a1, &a2);
  AUDIO::SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT((a0_size == 0 ? 0 : a0), a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__IS_AMBIENT_ZONE_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AUDIO::IS_AMBIENT_ZONE_ENABLED(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__SET_CUTSCENE_AUDIO_OVERRIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE(&a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__GET_PLAYER_HEADSET_SOUND_ALTERNATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  AUDIO::GET_PLAYER_HEADSET_SOUND_ALTERNATE(&a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__PLAY_POLICE_REPORT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  mrb_get_args(mrb,"sf",&a0, &a0_size, &a1);
  Any r0 = AUDIO::PLAY_POLICE_REPORT((a0_size == 0 ? 0 : a0), a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO___0xB4F90FAF7670B16F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::_0xB4F90FAF7670B16F();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__BLIP_SIREN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::BLIP_SIREN(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__OVERRIDE_VEH_HORN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_get_args(mrb,"ibi",&a0, &a1, &a2);
  AUDIO::OVERRIDE_VEH_HORN(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__IS_HORN_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AUDIO::IS_HORN_ACTIVE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__SET_AGGRESSIVE_HORNS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  AUDIO::SET_AGGRESSIVE_HORNS(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x02E93C796ABD3A97(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::_0x02E93C796ABD3A97(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x58BB377BEC7CD5F4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  AUDIO::_0x58BB377BEC7CD5F4(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__IS_STREAM_PLAYING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = AUDIO::IS_STREAM_PLAYING();
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__GET_STREAM_PLAY_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = AUDIO::GET_STREAM_PLAY_TIME();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__LOAD_STREAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"ss",&a0, &a0_size, &a1, &a1_size);
  mrb_bool r0 = AUDIO::LOAD_STREAM((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1));
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__LOAD_STREAM_WITH_START_OFFSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"sis",&a0, &a0_size, &a1, &a2, &a2_size);
  mrb_bool r0 = AUDIO::LOAD_STREAM_WITH_START_OFFSET((a0_size == 0 ? 0 : a0), a1, (a2_size == 0 ? 0 : a2));
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO___0x89049DD63C08B5D1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::_0x89049DD63C08B5D1(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__PLAY_STREAM_FROM_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::PLAY_STREAM_FROM_VEHICLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__PLAY_STREAM_FROM_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::PLAY_STREAM_FROM_OBJECT(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__PLAY_STREAM_FRONTEND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::PLAY_STREAM_FRONTEND();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SPECIAL_FRONTEND_EQUAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  AUDIO::SPECIAL_FRONTEND_EQUAL(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__STOP_STREAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::STOP_STREAM();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__STOP_PED_SPEAKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::STOP_PED_SPEAKING(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__DISABLE_PED_PAIN_AUDIO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::DISABLE_PED_PAIN_AUDIO(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__IS_AMBIENT_SPEECH_DISABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AUDIO::IS_AMBIENT_SPEECH_DISABLED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__SET_SIREN_WITH_NO_DRIVER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::SET_SIREN_WITH_NO_DRIVER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x9C11908013EA4715(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::_0x9C11908013EA4715(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_HORN_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::SET_HORN_ENABLED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_AUDIO_VEHICLE_PRIORITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AUDIO::SET_AUDIO_VEHICLE_PRIORITY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x9D3AF56E94C9AE98(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  AUDIO::_0x9D3AF56E94C9AE98(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__USE_SIREN_AS_HORN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::USE_SIREN_AS_HORN(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x4F0C413926060B38(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  AUDIO::_0x4F0C413926060B38(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xF1F8157B8C3F171C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iss",&a0, &a1, &a1_size, &a2, &a2_size);
  AUDIO::_0xF1F8157B8C3F171C(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xD2DCCD8E16E20997(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::_0xD2DCCD8E16E20997(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x5DB8010EE71FDEF2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AUDIO::_0x5DB8010EE71FDEF2(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO___0x59E7B488451F4D3A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  AUDIO::_0x59E7B488451F4D3A(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x01BB4D577D38BD9E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  AUDIO::_0x01BB4D577D38BD9E(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x1C073274E065C6D2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::_0x1C073274E065C6D2(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x2BE4BC731D039D5A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::_0x2BE4BC731D039D5A(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_VEHICLE_BOOST_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::SET_VEHICLE_BOOST_ACTIVE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x6FDDAD856E36988A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::_0x6FDDAD856E36988A(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x06C0023BED16DD6B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::_0x06C0023BED16DD6B(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__PLAY_VEHICLE_DOOR_OPEN_SOUND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AUDIO::PLAY_VEHICLE_DOOR_OPEN_SOUND(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__PLAY_VEHICLE_DOOR_CLOSE_SOUND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  AUDIO::PLAY_VEHICLE_DOOR_CLOSE_SOUND(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xC15907D667F7CFB2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::_0xC15907D667F7CFB2(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__IS_GAME_IN_CONTROL_OF_MUSIC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = AUDIO::IS_GAME_IN_CONTROL_OF_MUSIC();
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__SET_GPS_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  AUDIO::SET_GPS_ACTIVE(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__PLAY_MISSION_COMPLETE_AUDIO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  AUDIO::PLAY_MISSION_COMPLETE_AUDIO((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__IS_MISSION_COMPLETE_PLAYING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = AUDIO::IS_MISSION_COMPLETE_PLAYING();
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO___0x6F259F82D873B8B8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = AUDIO::_0x6F259F82D873B8B8();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO___0xF154B8D1775B2DEC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  AUDIO::_0xF154B8D1775B2DEC(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__START_AUDIO_SCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = AUDIO::START_AUDIO_SCENE((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__STOP_AUDIO_SCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  AUDIO::STOP_AUDIO_SCENE((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__STOP_AUDIO_SCENES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::STOP_AUDIO_SCENES();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__IS_AUDIO_SCENE_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = AUDIO::IS_AUDIO_SCENE_ACTIVE((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO___0xA5F377B175A699C5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::_0xA5F377B175A699C5(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x153973AB99FE8980(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_get_args(mrb,"isf",&a0, &a1, &a1_size, &a2);
  AUDIO::_0x153973AB99FE8980(a0, (a1_size == 0 ? 0 : a1), a2);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x18EB48CFC41F2EA0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  AUDIO::_0x18EB48CFC41F2EA0(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__AUDIO_IS_SCRIPTED_MUSIC_PLAYING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = AUDIO::AUDIO_IS_SCRIPTED_MUSIC_PLAYING();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__PREPARE_MUSIC_EVENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = AUDIO::PREPARE_MUSIC_EVENT((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__CANCEL_MUSIC_EVENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = AUDIO::CANCEL_MUSIC_EVENT((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__TRIGGER_MUSIC_EVENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = AUDIO::TRIGGER_MUSIC_EVENT((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO___0xA097AB275061FB21(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = AUDIO::_0xA097AB275061FB21();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__GET_MUSIC_PLAYTIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = AUDIO::GET_MUSIC_PLAYTIME();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO___0xFBE20329593DEC9D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  AUDIO::_0xFBE20329593DEC9D(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__CLEAR_ALL_BROKEN_GLASS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::CLEAR_ALL_BROKEN_GLASS();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x70B8EC8FC108A634(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_int a1;
  mrb_get_args(mrb,"bi",&a0, &a1);
  AUDIO::_0x70B8EC8FC108A634(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x149AEE66F0CB3A99(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  AUDIO::_0x149AEE66F0CB3A99(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x8BF907833BE275DE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  AUDIO::_0x8BF907833BE275DE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x062D5EAD4DA2FA6A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::_0x062D5EAD4DA2FA6A();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__PREPARE_ALARM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = AUDIO::PREPARE_ALARM((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__START_ALARM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_get_args(mrb,"sb",&a0, &a0_size, &a1);
  AUDIO::START_ALARM((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__STOP_ALARM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_get_args(mrb,"sb",&a0, &a0_size, &a1);
  AUDIO::STOP_ALARM((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__STOP_ALL_ALARMS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  AUDIO::STOP_ALL_ALARMS(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__IS_ALARM_PLAYING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = AUDIO::IS_ALARM_PLAYING((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__GET_VEHICLE_DEFAULT_HORN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Hash r0 = AUDIO::GET_VEHICLE_DEFAULT_HORN(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__AUDIO___0xACB5DCCA1EC76840(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = AUDIO::_0xACB5DCCA1EC76840(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__RESET_PED_AUDIO_FLAGS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::RESET_PED_AUDIO_FLAGS(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xD2CC78CD3D0B50F9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::_0xD2CC78CD3D0B50F9(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xBF4DC1784BE94DFA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_get_args(mrb,"ibi",&a0, &a1, &a2);
  AUDIO::_0xBF4DC1784BE94DFA(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x75773E11BA459E90(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::_0x75773E11BA459E90(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xD57AAAE0E2214D11(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::_0xD57AAAE0E2214D11();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x552369F549563AD5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  AUDIO::_0x552369F549563AD5(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x43FA0DFC5DF87815(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  AUDIO::_0x43FA0DFC5DF87815(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__SET_AUDIO_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_get_args(mrb,"sb",&a0, &a0_size, &a1);
  AUDIO::SET_AUDIO_FLAG((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO__PREPARE_SYNCHRONIZED_AUDIO_EVENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = AUDIO::PREPARE_SYNCHRONIZED_AUDIO_EVENT(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO__PLAY_SYNCHRONIZED_AUDIO_EVENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AUDIO::PLAY_SYNCHRONIZED_AUDIO_EVENT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO__STOP_SYNCHRONIZED_AUDIO_EVENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = AUDIO::STOP_SYNCHRONIZED_AUDIO_EVENT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__AUDIO___0xC8EDE9BDBCCBA6D4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  AUDIO::_0xC8EDE9BDBCCBA6D4(&a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x950A154B8DAB6185(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_get_args(mrb,"si",&a0, &a0_size, &a1);
  AUDIO::_0x950A154B8DAB6185((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x12561FCBB62D5B9C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::_0x12561FCBB62D5B9C(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x044DBAD7A7FA2BE5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"ss",&a0, &a0_size, &a1, &a1_size);
  AUDIO::_0x044DBAD7A7FA2BE5((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xB4BBFD9CD8B3922B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  AUDIO::_0xB4BBFD9CD8B3922B((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xE4E6DD5566D28C82(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::_0xE4E6DD5566D28C82();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x3A48AB4445D499BE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = AUDIO::_0x3A48AB4445D499BE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO___0x4ADA3F19BE4A6047(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  AUDIO::_0x4ADA3F19BE4A6047(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x0150B6FF25A9E2E5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::_0x0150B6FF25A9E2E5();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0xBEF34B1D9624D5DD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  AUDIO::_0xBEF34B1D9624D5DD(a0);
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x806058BBDC136E06(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  AUDIO::_0x806058BBDC136E06();
  return mrb_nil_value();
}

mrb_value mruby__AUDIO___0x544810ED9DB6BBE6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = AUDIO::_0x544810ED9DB6BBE6();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__AUDIO___0x5B50ABB1FE3746F4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = AUDIO::_0x5B50ABB1FE3746F4();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CUTSCENE__REQUEST_CUTSCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_get_args(mrb,"si",&a0, &a0_size, &a1);
  CUTSCENE::REQUEST_CUTSCENE((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE___REQUEST_CUTSCENE_2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"sii",&a0, &a0_size, &a1, &a2);
  CUTSCENE::_REQUEST_CUTSCENE_2((a0_size == 0 ? 0 : a0), a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE__REMOVE_CUTSCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CUTSCENE::REMOVE_CUTSCENE();
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE__HAS_CUTSCENE_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CUTSCENE::HAS_CUTSCENE_LOADED();
  return mrb_bool_value(r0);
}

mrb_value mruby__CUTSCENE__HAS_THIS_CUTSCENE_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = CUTSCENE::HAS_THIS_CUTSCENE_LOADED((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__CUTSCENE___0x8D9DF6ECA8768583(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CUTSCENE::_0x8D9DF6ECA8768583(a0);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE___0xB56BBBCC2955D9CB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CUTSCENE::_0xB56BBBCC2955D9CB();
  return mrb_bool_value(r0);
}

mrb_value mruby__CUTSCENE___0x71B74D2AE19338D0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = CUTSCENE::_0x71B74D2AE19338D0(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__CUTSCENE___0x4C61C75BEE8184C2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  CUTSCENE::_0x4C61C75BEE8184C2(&a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE___0x06A3524161C502BA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  CUTSCENE::_0x06A3524161C502BA(&a0);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE___0xA1C996C2A744262E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = CUTSCENE::_0xA1C996C2A744262E(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__CUTSCENE___0xD00D76A7DFC9D852(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  CUTSCENE::_0xD00D76A7DFC9D852(&a0);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE___0x0ABC54DE641DC0FC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = CUTSCENE::_0x0ABC54DE641DC0FC(&a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CUTSCENE__START_CUTSCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CUTSCENE::START_CUTSCENE(a0);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE__START_CUTSCENE_AT_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_get_args(mrb,"fffi",&a0, &a1, &a2, &a3);
  CUTSCENE::START_CUTSCENE_AT_COORDS(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE__STOP_CUTSCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CUTSCENE::STOP_CUTSCENE(a0);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE__STOP_CUTSCENE_IMMEDIATELY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CUTSCENE::STOP_CUTSCENE_IMMEDIATELY();
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE__SET_CUTSCENE_ORIGIN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  CUTSCENE::SET_CUTSCENE_ORIGIN(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE___0x011883F41211432A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_get_args(mrb,"iiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  CUTSCENE::_0x011883F41211432A(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE__GET_CUTSCENE_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CUTSCENE::GET_CUTSCENE_TIME();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CUTSCENE__GET_CUTSCENE_TOTAL_DURATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CUTSCENE::GET_CUTSCENE_TOTAL_DURATION();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CUTSCENE__WAS_CUTSCENE_SKIPPED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CUTSCENE::WAS_CUTSCENE_SKIPPED();
  return mrb_bool_value(r0);
}

mrb_value mruby__CUTSCENE__HAS_CUTSCENE_FINISHED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CUTSCENE::HAS_CUTSCENE_FINISHED();
  return mrb_bool_value(r0);
}

mrb_value mruby__CUTSCENE__IS_CUTSCENE_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CUTSCENE::IS_CUTSCENE_ACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__CUTSCENE__IS_CUTSCENE_PLAYING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CUTSCENE::IS_CUTSCENE_PLAYING();
  return mrb_bool_value(r0);
}

mrb_value mruby__CUTSCENE__GET_CUTSCENE_SECTION_PLAYING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CUTSCENE::GET_CUTSCENE_SECTION_PLAYING();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CUTSCENE__GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = CUTSCENE::GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY(&a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CUTSCENE___0x583DF8E3D4AFBD98(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CUTSCENE::_0x583DF8E3D4AFBD98();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CUTSCENE___0x4CEBC1ED31E8925E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = CUTSCENE::_0x4CEBC1ED31E8925E(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CUTSCENE__GET_ENTITY_INDEX_OF_REGISTERED_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = CUTSCENE::GET_ENTITY_INDEX_OF_REGISTERED_ENTITY(&a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CUTSCENE___0x7F96F23FA9B73327(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CUTSCENE::_0x7F96F23FA9B73327(a0);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE__SET_CUTSCENE_TRIGGER_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"iiiiii",&a0, &a1, &a2, &a3, &a4, &a5);
  CUTSCENE::SET_CUTSCENE_TRIGGER_AREA(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE__CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = CUTSCENE::CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY(&a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__CUTSCENE__CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = CUTSCENE::CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY(&a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__CUTSCENE__CAN_SET_EXIT_STATE_FOR_CAMERA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  mrb_bool r0 = CUTSCENE::CAN_SET_EXIT_STATE_FOR_CAMERA(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__CUTSCENE___0xC61B86C9F61EB404(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CUTSCENE::_0xC61B86C9F61EB404(a0);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE__SET_CUTSCENE_FADE_VALUES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"bbbb",&a0, &a1, &a2, &a3);
  CUTSCENE::SET_CUTSCENE_FADE_VALUES(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE___0x20746F7B1032A3C7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"bbbb",&a0, &a1, &a2, &a3);
  CUTSCENE::_0x20746F7B1032A3C7(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE___0x06EE9048FD080382(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CUTSCENE::_0x06EE9048FD080382(a0);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE___0xA0FE76168A189DDB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = CUTSCENE::_0xA0FE76168A189DDB();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CUTSCENE___0x2F137B508DE238F2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CUTSCENE::_0x2F137B508DE238F2(a0);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE___0xE36A98D8AB3D3C66(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CUTSCENE::_0xE36A98D8AB3D3C66(a0);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE___0x5EDEF0CF8C1DAB3C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CUTSCENE::_0x5EDEF0CF8C1DAB3C();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CUTSCENE___0x41FAA8FB2ECE8720(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CUTSCENE::_0x41FAA8FB2ECE8720(a0);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE__REGISTER_SYNCHRONISED_SCRIPT_SPEECH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CUTSCENE::REGISTER_SYNCHRONISED_SCRIPT_SPEECH();
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE__SET_CUTSCENE_PED_COMPONENT_VARIATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  CUTSCENE::SET_CUTSCENE_PED_COMPONENT_VARIATION(&a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE___0x2A56C06EBEF2B0D9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  CUTSCENE::_0x2A56C06EBEF2B0D9(&a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE__DOES_CUTSCENE_ENTITY_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = CUTSCENE::DOES_CUTSCENE_ENTITY_EXIST(&a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__CUTSCENE___0x0546524ADE2E9723(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  CUTSCENE::_0x0546524ADE2E9723(&a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__CUTSCENE___0x708BDD8CD795B043(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CUTSCENE::_0x708BDD8CD795B043();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__INTERIOR__GET_INTERIOR_GROUP_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = INTERIOR::GET_INTERIOR_GROUP_ID(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__INTERIOR__GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  Vector3 r0 = INTERIOR::GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS(a0, a1, a2, a3);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__INTERIOR__IS_INTERIOR_SCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = INTERIOR::IS_INTERIOR_SCENE();
  return mrb_bool_value(r0);
}

mrb_value mruby__INTERIOR__IS_VALID_INTERIOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = INTERIOR::IS_VALID_INTERIOR(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__INTERIOR__CLEAR_ROOM_FOR_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  INTERIOR::CLEAR_ROOM_FOR_ENTITY(a0);
  return mrb_nil_value();
}

mrb_value mruby__INTERIOR__FORCE_ROOM_FOR_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  INTERIOR::FORCE_ROOM_FOR_ENTITY(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__INTERIOR__GET_ROOM_KEY_FROM_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Hash r0 = INTERIOR::GET_ROOM_KEY_FROM_ENTITY(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__INTERIOR__GET_KEY_FOR_ENTITY_IN_ROOM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Hash r0 = INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__INTERIOR__GET_INTERIOR_FROM_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = INTERIOR::GET_INTERIOR_FROM_ENTITY(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__INTERIOR___0x82EBB79E258FA2B7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  INTERIOR::_0x82EBB79E258FA2B7(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__INTERIOR___0x920D853F3E17F1DA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  INTERIOR::_0x920D853F3E17F1DA(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__INTERIOR___0xAF348AFCB575A441(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  INTERIOR::_0xAF348AFCB575A441((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__INTERIOR___0x405DC2AEF6AF95B9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  INTERIOR::_0x405DC2AEF6AF95B9(a0);
  return mrb_nil_value();
}

mrb_value mruby__INTERIOR___GET_ROOM_KEY_FROM_GAMEPLAY_CAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Hash r0 = INTERIOR::_GET_ROOM_KEY_FROM_GAMEPLAY_CAM();
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__INTERIOR___0x23B59D8912F94246(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  INTERIOR::_0x23B59D8912F94246();
  return mrb_nil_value();
}

mrb_value mruby__INTERIOR__GET_INTERIOR_AT_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  mrb_int r0 = INTERIOR::GET_INTERIOR_AT_COORDS(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__INTERIOR__ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  INTERIOR::ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__INTERIOR___0x2CA429C029CCF247(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  INTERIOR::_0x2CA429C029CCF247(a0);
  return mrb_nil_value();
}

mrb_value mruby__INTERIOR__UNPIN_INTERIOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  INTERIOR::UNPIN_INTERIOR(a0);
  return mrb_nil_value();
}

mrb_value mruby__INTERIOR__IS_INTERIOR_READY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = INTERIOR::IS_INTERIOR_READY(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__INTERIOR___0x4C2330E61D3DEB56(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = INTERIOR::_0x4C2330E61D3DEB56(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__INTERIOR__GET_INTERIOR_AT_COORDS_WITH_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  char* a3;
  int a3_size;
  mrb_get_args(mrb,"fffs",&a0, &a1, &a2, &a3, &a3_size);
  mrb_int r0 = INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(a0, a1, a2, (a3_size == 0 ? 0 : a3));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__INTERIOR___0xF0F77ADB9F67E79D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_get_args(mrb,"fffi",&a0, &a1, &a2, &a3);
  mrb_int r0 = INTERIOR::_0xF0F77ADB9F67E79D(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__INTERIOR___ARE_COORDS_COLLIDING_WITH_EXTERIOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  mrb_bool r0 = INTERIOR::_ARE_COORDS_COLLIDING_WITH_EXTERIOR(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__INTERIOR__GET_INTERIOR_FROM_COLLISION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  mrb_int r0 = INTERIOR::GET_INTERIOR_FROM_COLLISION(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__INTERIOR___ENABLE_INTERIOR_PROP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  INTERIOR::_ENABLE_INTERIOR_PROP(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__INTERIOR___DISABLE_INTERIOR_PROP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  INTERIOR::_DISABLE_INTERIOR_PROP(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__INTERIOR___IS_INTERIOR_PROP_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_bool r0 = INTERIOR::_IS_INTERIOR_PROP_ENABLED(a0, (a1_size == 0 ? 0 : a1));
  return mrb_bool_value(r0);
}

mrb_value mruby__INTERIOR__REFRESH_INTERIOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  INTERIOR::REFRESH_INTERIOR(a0);
  return mrb_nil_value();
}

mrb_value mruby__INTERIOR___HIDE_MAP_OBJECT_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  INTERIOR::_HIDE_MAP_OBJECT_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__INTERIOR__DISABLE_INTERIOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  INTERIOR::DISABLE_INTERIOR(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__INTERIOR__IS_INTERIOR_DISABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = INTERIOR::IS_INTERIOR_DISABLED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__INTERIOR__CAP_INTERIOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  INTERIOR::CAP_INTERIOR(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__INTERIOR__IS_INTERIOR_CAPPED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = INTERIOR::IS_INTERIOR_CAPPED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__INTERIOR___0x9E6542F0CE8E70A3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  INTERIOR::_0x9E6542F0CE8E70A3(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__RENDER_SCRIPT_CAMS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_bool a4;
  mrb_get_args(mrb,"bbibb",&a0, &a1, &a2, &a3, &a4);
  CAM::RENDER_SCRIPT_CAMS(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xC819F3CBB62BF692(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  CAM::_0xC819F3CBB62BF692(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__CAM__CREATE_CAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_get_args(mrb,"sb",&a0, &a0_size, &a1);
  Cam r0 = CAM::CREATE_CAM((a0_size == 0 ? 0 : a0), a1);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Cam"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__CAM__CREATE_CAM_WITH_PARAMS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_bool a8;
  mrb_int a9;
  mrb_get_args(mrb,"sfffffffbi",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  Cam r0 = CAM::CREATE_CAM_WITH_PARAMS((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Cam"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__CAM__CREATE_CAMERA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  Cam r0 = CAM::CREATE_CAMERA(a0, a1);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Cam"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__CAM__CREATE_CAMERA_WITH_PARAMS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_bool a8;
  mrb_int a9;
  mrb_get_args(mrb,"ifffffffbi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  Cam r0 = CAM::CREATE_CAMERA_WITH_PARAMS(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Cam"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__CAM__DESTROY_CAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  CAM::DESTROY_CAM(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__DESTROY_ALL_CAMS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CAM::DESTROY_ALL_CAMS(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__DOES_CAM_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = CAM::DOES_CAM_EXIST(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__SET_CAM_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  CAM::SET_CAM_ACTIVE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__IS_CAM_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = CAM::IS_CAM_ACTIVE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__IS_CAM_RENDERING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = CAM::IS_CAM_RENDERING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__GET_RENDERING_CAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Cam r0 = CAM::GET_RENDERING_CAM();
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Cam"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__CAM__GET_CAM_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = CAM::GET_CAM_COORD(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__CAM__GET_CAM_ROT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Vector3 r0 = CAM::GET_CAM_ROT(a0, a1);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__CAM__GET_CAM_FOV(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = CAM::GET_CAM_FOV(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CAM__GET_CAM_NEAR_CLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = CAM::GET_CAM_NEAR_CLIP(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CAM__GET_CAM_FAR_CLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = CAM::GET_CAM_FAR_CLIP(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CAM__GET_CAM_FAR_DOF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = CAM::GET_CAM_FAR_DOF(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CAM__SET_CAM_PARAMS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_int a8;
  mrb_int a9;
  mrb_int a10;
  mrb_int a11;
  mrb_get_args(mrb,"ifffffffiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  CAM::SET_CAM_PARAMS(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CAM_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  CAM::SET_CAM_COORD(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CAM_ROT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_get_args(mrb,"ifffi",&a0, &a1, &a2, &a3, &a4);
  CAM::SET_CAM_ROT(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CAM_FOV(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::SET_CAM_FOV(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CAM_NEAR_CLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::SET_CAM_NEAR_CLIP(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CAM_FAR_CLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::SET_CAM_FAR_CLIP(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CAM_MOTION_BLUR_STRENGTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::SET_CAM_MOTION_BLUR_STRENGTH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CAM_NEAR_DOF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::SET_CAM_NEAR_DOF(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CAM_FAR_DOF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::SET_CAM_FAR_DOF(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CAM_DOF_STRENGTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::SET_CAM_DOF_STRENGTH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CAM_DOF_PLANES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  CAM::SET_CAM_DOF_PLANES(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CAM_USE_SHALLOW_DOF_MODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  CAM::SET_CAM_USE_SHALLOW_DOF_MODE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_USE_HI_DOF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CAM::SET_USE_HI_DOF();
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xF55E4046F6F831DC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::_0xF55E4046F6F831DC(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xE111A7C0D200CBC5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::_0xE111A7C0D200CBC5(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x7DD234D6F3914C5B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::_0x7DD234D6F3914C5B(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xC669EEA5D031B7DE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::_0xC669EEA5D031B7DE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xC3654A441402562D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::_0xC3654A441402562D(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x2C654B4943BDDF7C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::_0x2C654B4943BDDF7C(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__ATTACH_CAM_TO_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_get_args(mrb,"iifffb",&a0, &a1, &a2, &a3, &a4, &a5);
  CAM::ATTACH_CAM_TO_ENTITY(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__CAM__ATTACH_CAM_TO_PED_BONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_get_args(mrb,"iiifffb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  CAM::ATTACH_CAM_TO_PED_BONE(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__CAM__DETACH_CAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::DETACH_CAM(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CAM_INHERIT_ROLL_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  CAM::SET_CAM_INHERIT_ROLL_VEHICLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__POINT_CAM_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  CAM::POINT_CAM_AT_COORD(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__CAM__POINT_CAM_AT_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_get_args(mrb,"iifffb",&a0, &a1, &a2, &a3, &a4, &a5);
  CAM::POINT_CAM_AT_ENTITY(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__CAM__POINT_CAM_AT_PED_BONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_get_args(mrb,"iiifffb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  CAM::POINT_CAM_AT_PED_BONE(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__CAM__STOP_CAM_POINTING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::STOP_CAM_POINTING(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CAM_AFFECTS_AIMING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  CAM::SET_CAM_AFFECTS_AIMING(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x661B5C8654ADD825(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  CAM::_0x661B5C8654ADD825(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xA2767257A320FC82(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  CAM::_0xA2767257A320FC82(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x271017B9BA825366(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  CAM::_0x271017B9BA825366(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CAM_DEBUG_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  CAM::SET_CAM_DEBUG_NAME(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__CAM__ADD_CAM_SPLINE_NODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_get_args(mrb,"iffffffiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  CAM::ADD_CAM_SPLINE_NODE(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x0A9F2A468B328E74(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  CAM::_0x0A9F2A468B328E74(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x0FB82563989CF4FB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  CAM::_0x0FB82563989CF4FB(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x609278246A29CA34(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  CAM::_0x609278246A29CA34(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CAM_SPLINE_PHASE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::SET_CAM_SPLINE_PHASE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__GET_CAM_SPLINE_PHASE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = CAM::GET_CAM_SPLINE_PHASE(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CAM__GET_CAM_SPLINE_NODE_PHASE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = CAM::GET_CAM_SPLINE_NODE_PHASE(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CAM__SET_CAM_SPLINE_DURATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  CAM::SET_CAM_SPLINE_DURATION(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xD1B0F412F109EA5D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  CAM::_0xD1B0F412F109EA5D(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__GET_CAM_SPLINE_NODE_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = CAM::GET_CAM_SPLINE_NODE_INDEX(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM___0x83B8201ED82A9A2D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_get_args(mrb,"iiif",&a0, &a1, &a2, &a3);
  CAM::_0x83B8201ED82A9A2D(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xA6385DEB180F319F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_get_args(mrb,"iif",&a0, &a1, &a2);
  CAM::_0xA6385DEB180F319F(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__CAM__OVERRIDE_CAM_SPLINE_VELOCITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"iiff",&a0, &a1, &a2, &a3);
  CAM::OVERRIDE_CAM_SPLINE_VELOCITY(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__CAM__OVERRIDE_CAM_SPLINE_MOTION_BLUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"iiff",&a0, &a1, &a2, &a3);
  CAM::OVERRIDE_CAM_SPLINE_MOTION_BLUR(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x7BF1A54AE67AC070(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  CAM::_0x7BF1A54AE67AC070(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__CAM__IS_CAM_SPLINE_PAUSED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = CAM::IS_CAM_SPLINE_PAUSED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__SET_CAM_ACTIVE_WITH_INTERP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_bool a4;
  mrb_get_args(mrb,"iiibb",&a0, &a1, &a2, &a3, &a4);
  CAM::SET_CAM_ACTIVE_WITH_INTERP(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__CAM__IS_CAM_INTERPOLATING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = CAM::IS_CAM_INTERPOLATING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__SHAKE_CAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_get_args(mrb,"isf",&a0, &a1, &a1_size, &a2);
  CAM::SHAKE_CAM(a0, (a1_size == 0 ? 0 : a1), a2);
  return mrb_nil_value();
}

mrb_value mruby__CAM__ANIMATED_SHAKE_CAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  char* a3;
  int a3_size;
  mrb_float a4;
  mrb_get_args(mrb,"isssf",&a0, &a1, &a1_size, &a2, &a2_size, &a3, &a3_size, &a4);
  CAM::ANIMATED_SHAKE_CAM(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), (a3_size == 0 ? 0 : a3), a4);
  return mrb_nil_value();
}

mrb_value mruby__CAM__IS_CAM_SHAKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = CAM::IS_CAM_SHAKING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__SET_CAM_SHAKE_AMPLITUDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::SET_CAM_SHAKE_AMPLITUDE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__STOP_CAM_SHAKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  CAM::STOP_CAM_SHAKING(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xF4C8CF9E353AFECA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  mrb_get_args(mrb,"sf",&a0, &a0_size, &a1);
  CAM::_0xF4C8CF9E353AFECA((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xC2EAE3FB8CDBED31(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_float a3;
  mrb_get_args(mrb,"sssf",&a0, &a0_size, &a1, &a1_size, &a2, &a2_size, &a3);
  CAM::_0xC2EAE3FB8CDBED31((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), a3);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xC912AF078AF19212(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::_0xC912AF078AF19212();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM___0x1C9D7949FA533490(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CAM::_0x1C9D7949FA533490(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__PLAY_CAM_ANIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_bool a9;
  mrb_int a10;
  mrb_get_args(mrb,"issffffffbi",&a0, &a1, &a1_size, &a2, &a2_size, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10);
  mrb_bool r0 = CAM::PLAY_CAM_ANIM(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), a3, a4, a5, a6, a7, a8, a9, a10);
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__SET_CAM_ANIM_CURRENT_PHASE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::SET_CAM_ANIM_CURRENT_PHASE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__GET_CAM_ANIM_CURRENT_PHASE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = CAM::GET_CAM_ANIM_CURRENT_PHASE(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CAM__PLAY_SYNCHRONIZED_CAM_ANIM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  char* a2;
  int a2_size;
  char* a3;
  int a3_size;
  mrb_get_args(mrb,"iiss",&a0, &a1, &a2, &a2_size, &a3, &a3_size);
  mrb_bool r0 = CAM::PLAY_SYNCHRONIZED_CAM_ANIM(a0, a1, (a2_size == 0 ? 0 : a2), (a3_size == 0 ? 0 : a3));
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM___0x503F5920162365B2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  CAM::_0x503F5920162365B2(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xF9D02130ECDD1D77(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  CAM::_0xF9D02130ECDD1D77(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xC91C6C55199308CA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  CAM::_0xC91C6C55199308CA(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xC8B5C4A79CC18B94(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::_0xC8B5C4A79CC18B94(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x5C48A1D6E3B33179(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = CAM::_0x5C48A1D6E3B33179(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__IS_SCREEN_FADED_OUT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CAM::IS_SCREEN_FADED_OUT();
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__IS_SCREEN_FADED_IN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CAM::IS_SCREEN_FADED_IN();
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__IS_SCREEN_FADING_OUT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CAM::IS_SCREEN_FADING_OUT();
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__IS_SCREEN_FADING_IN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CAM::IS_SCREEN_FADING_IN();
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__DO_SCREEN_FADE_IN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::DO_SCREEN_FADE_IN(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__DO_SCREEN_FADE_OUT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::DO_SCREEN_FADE_OUT(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_WIDESCREEN_BORDERS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_int a1;
  mrb_get_args(mrb,"bi",&a0, &a1);
  CAM::SET_WIDESCREEN_BORDERS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__GET_GAMEPLAY_CAM_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Vector3 r0 = CAM::GET_GAMEPLAY_CAM_COORD();
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__CAM__GET_GAMEPLAY_CAM_ROT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = CAM::GET_GAMEPLAY_CAM_ROT(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__CAM__GET_GAMEPLAY_CAM_FOV(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float r0 = CAM::GET_GAMEPLAY_CAM_FOV();
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CAM___0x487A82C650EB7799(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  CAM::_0x487A82C650EB7799(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x0225778816FDC28C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  CAM::_0x0225778816FDC28C(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__GET_GAMEPLAY_CAM_RELATIVE_HEADING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float r0 = CAM::GET_GAMEPLAY_CAM_RELATIVE_HEADING();
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CAM__SET_GAMEPLAY_CAM_RELATIVE_HEADING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  CAM::SET_GAMEPLAY_CAM_RELATIVE_HEADING(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__GET_GAMEPLAY_CAM_RELATIVE_PITCH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float r0 = CAM::GET_GAMEPLAY_CAM_RELATIVE_PITCH();
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CAM__SET_GAMEPLAY_CAM_RELATIVE_PITCH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  CAM::SET_GAMEPLAY_CAM_RELATIVE_PITCH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___SET_GAMEPLAY_CAM_RAW_YAW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  CAM::_SET_GAMEPLAY_CAM_RAW_YAW(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___SET_GAMEPLAY_CAM_RAW_PITCH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  CAM::_SET_GAMEPLAY_CAM_RAW_PITCH(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x469F2ECDEC046337(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CAM::_0x469F2ECDEC046337(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SHAKE_GAMEPLAY_CAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  mrb_get_args(mrb,"sf",&a0, &a0_size, &a1);
  CAM::SHAKE_GAMEPLAY_CAM((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__IS_GAMEPLAY_CAM_SHAKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CAM::IS_GAMEPLAY_CAM_SHAKING();
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  CAM::SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__STOP_GAMEPLAY_CAM_SHAKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CAM::STOP_GAMEPLAY_CAM_SHAKING(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x8BBACBF51DA047A8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::_0x8BBACBF51DA047A8(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__IS_GAMEPLAY_CAM_RENDERING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CAM::IS_GAMEPLAY_CAM_RENDERING();
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM___0x3044240D2E0FA842(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CAM::_0x3044240D2E0FA842();
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM___0x705A276EBFF3133D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CAM::_0x705A276EBFF3133D();
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM___0xDB90C6CCA48940F1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CAM::_0xDB90C6CCA48940F1(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___ENABLE_CROSSHAIR_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CAM::_ENABLE_CROSSHAIR_THIS_FRAME();
  return mrb_nil_value();
}

mrb_value mruby__CAM__IS_GAMEPLAY_CAM_LOOKING_BEHIND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CAM::IS_GAMEPLAY_CAM_LOOKING_BEHIND();
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM___0x2AED6301F67007D5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::_0x2AED6301F67007D5(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x49482F9FCD825AAA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::_0x49482F9FCD825AAA(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xFD3151CD37EA2245(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::_0xFD3151CD37EA2245(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xDD79DF9F4D26E1C9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CAM::_0xDD79DF9F4D26E1C9();
  return mrb_nil_value();
}

mrb_value mruby__CAM__IS_SPHERE_VISIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  mrb_bool r0 = CAM::IS_SPHERE_VISIBLE(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__IS_FOLLOW_PED_CAM_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CAM::IS_FOLLOW_PED_CAM_ACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__SET_FOLLOW_PED_CAM_CUTSCENE_CHAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_get_args(mrb,"si",&a0, &a0_size, &a1);
  mrb_bool r0 = CAM::SET_FOLLOW_PED_CAM_CUTSCENE_CHAT((a0_size == 0 ? 0 : a0), a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM___0x271401846BD26E92(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  CAM::_0x271401846BD26E92(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xC8391C309684595A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CAM::_0xC8391C309684595A();
  return mrb_nil_value();
}

mrb_value mruby__CAM___CLAMP_GAMEPLAY_CAM_YAW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  CAM::_CLAMP_GAMEPLAY_CAM_YAW(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___CLAMP_GAMEPLAY_CAM_PITCH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  CAM::_CLAMP_GAMEPLAY_CAM_PITCH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___ANIMATE_GAMEPLAY_CAM_ZOOM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  CAM::_ANIMATE_GAMEPLAY_CAM_ZOOM(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xE9EA16D6E54CDCA4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  CAM::_0xE9EA16D6E54CDCA4(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___DISABLE_FIRST_PERSON_CAM_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CAM::_DISABLE_FIRST_PERSON_CAM_THIS_FRAME();
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x59424BD75174C9B1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CAM::_0x59424BD75174C9B1();
  return mrb_nil_value();
}

mrb_value mruby__CAM__GET_FOLLOW_PED_CAM_ZOOM_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::GET_FOLLOW_PED_CAM_ZOOM_LEVEL();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM__GET_FOLLOW_PED_CAM_VIEW_MODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = CAM::GET_FOLLOW_PED_CAM_VIEW_MODE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM__SET_FOLLOW_PED_CAM_VIEW_MODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::SET_FOLLOW_PED_CAM_VIEW_MODE(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__IS_FOLLOW_VEHICLE_CAM_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CAM::IS_FOLLOW_VEHICLE_CAM_ACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM___0x91EF6EE6419E5B97(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CAM::_0x91EF6EE6419E5B97(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x9DFE13ECDC1EC196(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  CAM::_0x9DFE13ECDC1EC196(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM__SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__GET_FOLLOW_VEHICLE_CAM_VIEW_MODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = CAM::GET_FOLLOW_VEHICLE_CAM_VIEW_MODE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM__SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xEE778F8C7E1142E2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = CAM::_0xEE778F8C7E1142E2(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM___0x2A2173E46DAECD12(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  CAM::_0x2A2173E46DAECD12(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x19CAFA3C87F7C2FF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::_0x19CAFA3C87F7C2FF();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM__IS_AIM_CAM_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CAM::IS_AIM_CAM_ACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM___0x74BD83EA840F6BC9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::_0x74BD83EA840F6BC9();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM__IS_FIRST_PERSON_AIM_CAM_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CAM::IS_FIRST_PERSON_AIM_CAM_ACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM___0x1A31FE0049E542F6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CAM::_0x1A31FE0049E542F6();
  return mrb_nil_value();
}

mrb_value mruby__CAM___GET_GAMEPLAY_CAM_ZOOM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float r0 = CAM::_GET_GAMEPLAY_CAM_ZOOM();
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CAM___0x70894BD0915C5BCA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  CAM::_0x70894BD0915C5BCA(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xCED08CBE8EBB97C7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  CAM::_0xCED08CBE8EBB97C7(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x2F7F2B26DD3F18EE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  CAM::_0x2F7F2B26DD3F18EE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xBCFC632DB7673BF0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  CAM::_0xBCFC632DB7673BF0(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x0AF7B437918103B3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  CAM::_0x0AF7B437918103B3(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x42156508606DE65E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  CAM::_0x42156508606DE65E(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x4008EDF7D6E48175(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CAM::_0x4008EDF7D6E48175(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___GET_GAMEPLAY_CAM_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Vector3 r0 = CAM::_GET_GAMEPLAY_CAM_COORDS();
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__CAM___GET_GAMEPLAY_CAM_ROT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = CAM::_GET_GAMEPLAY_CAM_ROT(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__CAM___0x26903D9CD1175F2C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Vector3 r0 = CAM::_0x26903D9CD1175F2C(a0, a1);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__CAM___0x80EC114669DAEFF4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::_0x80EC114669DAEFF4();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM___0x5F35F6732C3FBBA0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = CAM::_0x5F35F6732C3FBBA0(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CAM___0xD0082607100D7193(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::_0xD0082607100D7193();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM___0xDFC8CBC606FDB0FC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::_0xDFC8CBC606FDB0FC();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM___0xA03502FC581F7D9B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::_0xA03502FC581F7D9B();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM___0x9780F32BCAF72431(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::_0x9780F32BCAF72431();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM___0x162F9D995753DC19(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::_0x162F9D995753DC19();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM__SET_GAMEPLAY_COORD_HINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_get_args(mrb,"fffiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  CAM::SET_GAMEPLAY_COORD_HINT(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_GAMEPLAY_PED_HINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_get_args(mrb,"ifffbiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  CAM::SET_GAMEPLAY_PED_HINT(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_GAMEPLAY_VEHICLE_HINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_get_args(mrb,"ifffbiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  CAM::SET_GAMEPLAY_VEHICLE_HINT(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_GAMEPLAY_OBJECT_HINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_get_args(mrb,"ifffbiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  CAM::SET_GAMEPLAY_OBJECT_HINT(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_GAMEPLAY_ENTITY_HINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_get_args(mrb,"ifffbiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  CAM::SET_GAMEPLAY_ENTITY_HINT(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__CAM__IS_GAMEPLAY_HINT_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CAM::IS_GAMEPLAY_HINT_ACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__STOP_GAMEPLAY_HINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CAM::STOP_GAMEPLAY_HINT(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xCCD078C2665D2973(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::_0xCCD078C2665D2973(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x247ACBC4ABBC9D1C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CAM::_0x247ACBC4ABBC9D1C(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xBF72910D0F26F025(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::_0xBF72910D0F26F025();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM__SET_GAMEPLAY_HINT_FOV(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  CAM::SET_GAMEPLAY_HINT_FOV(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xF8BDBF3D573049A1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  CAM::_0xF8BDBF3D573049A1(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xD1F8363DFAD03848(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  CAM::_0xD1F8363DFAD03848(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x5D7B620DAE436138(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  CAM::_0x5D7B620DAE436138(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xC92717EF615B6704(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  CAM::_0xC92717EF615B6704(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__GET_IS_MULTIPLAYER_BRIEF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CAM::GET_IS_MULTIPLAYER_BRIEF(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CINEMATIC_BUTTON_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CAM::SET_CINEMATIC_BUTTON_ACTIVE(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__IS_CINEMATIC_CAM_RENDERING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CAM::IS_CINEMATIC_CAM_RENDERING();
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__SHAKE_CINEMATIC_CAM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  mrb_get_args(mrb,"sf",&a0, &a0_size, &a1);
  CAM::SHAKE_CINEMATIC_CAM((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__CAM__IS_CINEMATIC_CAM_SHAKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CAM::IS_CINEMATIC_CAM_SHAKING();
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__SET_CINEMATIC_CAM_SHAKE_AMPLITUDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  CAM::SET_CINEMATIC_CAM_SHAKE_AMPLITUDE(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM__STOP_CINEMATIC_CAM_SHAKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CAM::STOP_CINEMATIC_CAM_SHAKING(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___DISABLE_VEHICLE_FIRST_PERSON_CAM_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CAM::_DISABLE_VEHICLE_FIRST_PERSON_CAM_THIS_FRAME();
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x62ECFCFDEE7885D6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CAM::_0x62ECFCFDEE7885D6();
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x9E4CFFF989258472(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CAM::_0x9E4CFFF989258472();
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xF4F2C0D4EE209E20(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CAM::_0xF4F2C0D4EE209E20();
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xCA9D2AA3E326D720(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::_0xCA9D2AA3E326D720();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM___0x4F32C0D5A90A9B40(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::_0x4F32C0D5A90A9B40();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM__CREATE_CINEMATIC_SHOT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  CAM::CREATE_CINEMATIC_SHOT(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__CAM__IS_CINEMATIC_SHOT_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = CAM::IS_CINEMATIC_SHOT_ACTIVE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__CAM__STOP_CINEMATIC_SHOT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::STOP_CINEMATIC_SHOT(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xA41BCD7213805AAC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CAM::_0xA41BCD7213805AAC(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xDC9DA9E8789F5246(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CAM::_0xDC9DA9E8789F5246();
  return mrb_nil_value();
}

mrb_value mruby__CAM__SET_CINEMATIC_MODE_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CAM::SET_CINEMATIC_MODE_ACTIVE(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x1F2300CB7FA7B7F6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::_0x1F2300CB7FA7B7F6();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM___0x17FCA7199A530203(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::_0x17FCA7199A530203();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM__STOP_CUTSCENE_CAM_SHAKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CAM::STOP_CUTSCENE_CAM_SHAKING();
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x12DED8CA53D47EA5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  CAM::_0x12DED8CA53D47EA5(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x89215EC747DF244A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_int a8;
  mrb_get_args(mrb,"fifffffii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  Any r0 = CAM::_0x89215EC747DF244A(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM___0x5A43C76F7FC7BA5F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CAM::_0x5A43C76F7FC7BA5F();
  return mrb_nil_value();
}

mrb_value mruby__CAM___SET_CAM_EFFECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::_SET_CAM_EFFECT(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x5C41E6BABC9E2112(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::_0x5C41E6BABC9E2112(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x21E253A7F8DA5DFB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  CAM::_0x21E253A7F8DA5DFB((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__CAM___0x11FA5D3479C7DD47(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CAM::_0x11FA5D3479C7DD47(a0);
  return mrb_nil_value();
}

mrb_value mruby__CAM___0xEAF0FA793D05C592(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::_0xEAF0FA793D05C592();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CAM___0x8BFCEB5EA1B161B6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CAM::_0x8BFCEB5EA1B161B6();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WEAPON__ENABLE_LASER_SIGHT_RENDERING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  WEAPON::ENABLE_LASER_SIGHT_RENDERING(a0);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__GET_WEAPON_COMPONENT_TYPE_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Hash r0 = WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__WEAPON__GET_WEAPONTYPE_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = WEAPON::GET_WEAPONTYPE_MODEL(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WEAPON__GET_WEAPONTYPE_SLOT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = WEAPON::GET_WEAPONTYPE_SLOT(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WEAPON__GET_WEAPONTYPE_GROUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = WEAPON::GET_WEAPONTYPE_GROUP(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WEAPON__SET_CURRENT_PED_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  WEAPON::SET_CURRENT_PED_WEAPON(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__GET_CURRENT_PED_WEAPON_ENTITY_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Entity r0 = WEAPON::GET_CURRENT_PED_WEAPON_ENTITY_INDEX(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Entity"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__WEAPON__GET_BEST_PED_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  Hash r0 = WEAPON::GET_BEST_PED_WEAPON(a0, a1);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__WEAPON__SET_CURRENT_PED_VEHICLE_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__IS_PED_ARMED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = WEAPON::IS_PED_ARMED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__IS_WEAPON_VALID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = WEAPON::IS_WEAPON_VALID(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__HAS_PED_GOT_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  mrb_bool r0 = WEAPON::HAS_PED_GOT_WEAPON(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__IS_PED_WEAPON_READY_TO_SHOOT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = WEAPON::IS_PED_WEAPON_READY_TO_SHOOT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__GET_PED_WEAPONTYPE_IN_SLOT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Hash r0 = WEAPON::GET_PED_WEAPONTYPE_IN_SLOT(a0, a1);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__WEAPON__GET_AMMO_IN_PED_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = WEAPON::GET_AMMO_IN_PED_WEAPON(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WEAPON__ADD_AMMO_TO_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  WEAPON::ADD_AMMO_TO_PED(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__SET_PED_AMMO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  WEAPON::SET_PED_AMMO(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__SET_PED_INFINITE_AMMO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_get_args(mrb,"ibi",&a0, &a1, &a2);
  WEAPON::SET_PED_INFINITE_AMMO(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__SET_PED_INFINITE_AMMO_CLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  WEAPON::SET_PED_INFINITE_AMMO_CLIP(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__GIVE_WEAPON_TO_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_bool a4;
  mrb_get_args(mrb,"iiibb",&a0, &a1, &a2, &a3, &a4);
  WEAPON::GIVE_WEAPON_TO_PED(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__GIVE_DELAYED_WEAPON_TO_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iiib",&a0, &a1, &a2, &a3);
  WEAPON::GIVE_DELAYED_WEAPON_TO_PED(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__REMOVE_ALL_PED_WEAPONS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  WEAPON::REMOVE_ALL_PED_WEAPONS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__REMOVE_WEAPON_FROM_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  WEAPON::REMOVE_WEAPON_FROM_PED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  WEAPON::HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__SET_PED_CURRENT_WEAPON_VISIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ibbbb",&a0, &a1, &a2, &a3, &a4);
  WEAPON::SET_PED_CURRENT_WEAPON_VISIBLE(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__SET_PED_DROPS_WEAPONS_WHEN_DEAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  WEAPON::SET_PED_DROPS_WEAPONS_WHEN_DEAD(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__HAS_PED_BEEN_DAMAGED_BY_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = WEAPON::HAS_PED_BEEN_DAMAGED_BY_WEAPON(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__CLEAR_PED_LAST_WEAPON_DAMAGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  WEAPON::CLEAR_PED_LAST_WEAPON_DAMAGE(a0);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = WEAPON::HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__CLEAR_ENTITY_LAST_WEAPON_DAMAGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  WEAPON::CLEAR_ENTITY_LAST_WEAPON_DAMAGE(a0);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__SET_PED_DROPS_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  WEAPON::SET_PED_DROPS_WEAPON(a0);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__SET_PED_DROPS_INVENTORY_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_get_args(mrb,"iifffi",&a0, &a1, &a2, &a3, &a4, &a5);
  WEAPON::SET_PED_DROPS_INVENTORY_WEAPON(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__GET_MAX_AMMO_IN_CLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  mrb_int r0 = WEAPON::GET_MAX_AMMO_IN_CLIP(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WEAPON__SET_AMMO_IN_CLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = WEAPON::SET_AMMO_IN_CLIP(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__SET_PED_AMMO_BY_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  WEAPON::SET_PED_AMMO_BY_TYPE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__GET_PED_AMMO_BY_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = WEAPON::GET_PED_AMMO_BY_TYPE(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WEAPON__SET_PED_AMMO_TO_DROP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  WEAPON::SET_PED_AMMO_TO_DROP(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON___0xE620FD3512A04F18(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  WEAPON::_0xE620FD3512A04F18(a0);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON___GET_PED_AMMO_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = WEAPON::_GET_PED_AMMO_TYPE(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WEAPON__SET_PED_GADGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  WEAPON::SET_PED_GADGET(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__GET_IS_PED_GADGET_EQUIPPED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = WEAPON::GET_IS_PED_GADGET_EQUIPPED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__GET_SELECTED_PED_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Hash r0 = WEAPON::GET_SELECTED_PED_WEAPON(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__WEAPON__EXPLODE_PROJECTILES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  WEAPON::EXPLODE_PROJECTILES(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__REMOVE_ALL_PROJECTILES_OF_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  WEAPON::REMOVE_ALL_PROJECTILES_OF_TYPE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON___0x840F03E9041E2C9C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = WEAPON::_0x840F03E9041E2C9C(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__WEAPON__GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = WEAPON::GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__WEAPON__HAS_VEHICLE_GOT_PROJECTILE_ATTACHED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  mrb_bool r0 = WEAPON::HAS_VEHICLE_GOT_PROJECTILE_ATTACHED(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__GIVE_WEAPON_COMPONENT_TO_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__REMOVE_WEAPON_COMPONENT_FROM_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  WEAPON::REMOVE_WEAPON_COMPONENT_FROM_PED(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__HAS_PED_GOT_WEAPON_COMPONENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = WEAPON::HAS_PED_GOT_WEAPON_COMPONENT(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__IS_PED_WEAPON_COMPONENT_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = WEAPON::IS_PED_WEAPON_COMPONENT_ACTIVE(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON___IS_PED_RELOADING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = WEAPON::_IS_PED_RELOADING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__MAKE_PED_RELOAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = WEAPON::MAKE_PED_RELOAD(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__REQUEST_WEAPON_ASSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  WEAPON::REQUEST_WEAPON_ASSET(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__HAS_WEAPON_ASSET_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = WEAPON::HAS_WEAPON_ASSET_LOADED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__REMOVE_WEAPON_ASSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  WEAPON::REMOVE_WEAPON_ASSET(a0);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__CREATE_WEAPON_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_float a6;
  mrb_int a7;
  mrb_get_args(mrb,"iifffbfi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  Any r0 = WEAPON::CREATE_WEAPON_OBJECT(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WEAPON__GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  WEAPON::GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  WEAPON::REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__HAS_WEAPON_GOT_WEAPON_COMPONENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = WEAPON::HAS_WEAPON_GOT_WEAPON_COMPONENT(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__GIVE_WEAPON_OBJECT_TO_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  WEAPON::GIVE_WEAPON_OBJECT_TO_PED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__DOES_WEAPON_TAKE_WEAPON_COMPONENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = WEAPON::DOES_WEAPON_TAKE_WEAPON_COMPONENT(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__GET_WEAPON_OBJECT_FROM_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  Entity r0 = WEAPON::GET_WEAPON_OBJECT_FROM_PED(a0, a1);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Entity"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__WEAPON__SET_PED_WEAPON_TINT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  WEAPON::SET_PED_WEAPON_TINT_INDEX(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__GET_PED_WEAPON_TINT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = WEAPON::GET_PED_WEAPON_TINT_INDEX(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WEAPON__SET_WEAPON_OBJECT_TINT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  WEAPON::SET_WEAPON_OBJECT_TINT_INDEX(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__GET_WEAPON_OBJECT_TINT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = WEAPON::GET_WEAPON_OBJECT_TINT_INDEX(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WEAPON__GET_WEAPON_TINT_COUNT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = WEAPON::GET_WEAPON_TINT_COUNT(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WEAPON___0x3133B907D8B32053(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_float r0 = WEAPON::_0x3133B907D8B32053(a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__WEAPON__GET_WEAPON_CLIP_SIZE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = WEAPON::GET_WEAPON_CLIP_SIZE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WEAPON__SET_PED_CHANCE_OF_FIRING_BLANKS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"iff",&a0, &a1, &a2);
  WEAPON::SET_PED_CHANCE_OF_FIRING_BLANKS(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON___0xB4C8D77C80C0421E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  Entity r0 = WEAPON::_0xB4C8D77C80C0421E(a0, a1);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Entity"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__WEAPON__REQUEST_WEAPON_HIGH_DETAIL_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  WEAPON::REQUEST_WEAPON_HIGH_DETAIL_MODEL(a0);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__IS_PED_CURRENT_WEAPON_SILENCED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = WEAPON::IS_PED_CURRENT_WEAPON_SILENCED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__SET_WEAPON_SMOKEGRENADE_ASSIGNED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = WEAPON::SET_WEAPON_SMOKEGRENADE_ASSIGNED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__WEAPON__SET_FLASH_LIGHT_FADE_DISTANCE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  Any r0 = WEAPON::SET_FLASH_LIGHT_FADE_DISTANCE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WEAPON__SET_WEAPON_ANIMATION_OVERRIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  WEAPON::SET_WEAPON_ANIMATION_OVERRIDE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__GET_WEAPON_DAMAGE_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = WEAPON::GET_WEAPON_DAMAGE_TYPE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WEAPON___0xE4DCEC7FD5B739A5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  WEAPON::_0xE4DCEC7FD5B739A5(a0);
  return mrb_nil_value();
}

mrb_value mruby__WEAPON__CAN_USE_WEAPON_ON_PARACHUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = WEAPON::CAN_USE_WEAPON_ON_PARACHUTE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ITEMSET__CREATE_ITEMSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  Any r0 = ITEMSET::CREATE_ITEMSET(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ITEMSET__DESTROY_ITEMSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ITEMSET::DESTROY_ITEMSET(a0);
  return mrb_nil_value();
}

mrb_value mruby__ITEMSET__IS_ITEMSET_VALID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ITEMSET::IS_ITEMSET_VALID(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ITEMSET__ADD_TO_ITEMSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = ITEMSET::ADD_TO_ITEMSET(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__ITEMSET__REMOVE_FROM_ITEMSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  ITEMSET::REMOVE_FROM_ITEMSET(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ITEMSET__GET_ITEMSET_SIZE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = ITEMSET::GET_ITEMSET_SIZE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ITEMSET__GET_INDEXED_ITEM_IN_ITEMSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = ITEMSET::GET_INDEXED_ITEM_IN_ITEMSET(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ITEMSET__IS_IN_ITEMSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = ITEMSET::IS_IN_ITEMSET(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__ITEMSET__CLEAN_ITEMSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ITEMSET::CLEAN_ITEMSET(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__LOAD_ALL_OBJECTS_NOW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::LOAD_ALL_OBJECTS_NOW();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__LOAD_SCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  STREAMING::LOAD_SCENE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__NETWORK_UPDATE_LOAD_SCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STREAMING::NETWORK_UPDATE_LOAD_SCENE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING__NETWORK_STOP_LOAD_SCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::NETWORK_STOP_LOAD_SCENE();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__IS_NETWORK_LOADING_SCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = STREAMING::IS_NETWORK_LOADING_SCENE();
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING__SET_INTERIOR_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  STREAMING::SET_INTERIOR_ACTIVE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__REQUEST_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::REQUEST_MODEL(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___REQUEST_MODEL_2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::_REQUEST_MODEL_2(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__HAS_MODEL_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STREAMING::HAS_MODEL_LOADED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING___0x8A7A40100EDFEC58(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  STREAMING::_0x8A7A40100EDFEC58(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__SET_MODEL_AS_NO_LONGER_NEEDED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__IS_MODEL_IN_CDIMAGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STREAMING::IS_MODEL_IN_CDIMAGE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING__IS_MODEL_VALID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STREAMING::IS_MODEL_VALID(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING__IS_MODEL_A_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STREAMING::IS_MODEL_A_VEHICLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING__REQUEST_COLLISION_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  STREAMING::REQUEST_COLLISION_AT_COORD(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__REQUEST_COLLISION_FOR_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::REQUEST_COLLISION_FOR_MODEL(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__HAS_COLLISION_FOR_MODEL_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STREAMING::HAS_COLLISION_FOR_MODEL_LOADED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING__REQUEST_ADDITIONAL_COLLISION_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  STREAMING::REQUEST_ADDITIONAL_COLLISION_AT_COORD(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__DOES_ANIM_DICT_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = STREAMING::DOES_ANIM_DICT_EXIST((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING__REQUEST_ANIM_DICT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  STREAMING::REQUEST_ANIM_DICT((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__HAS_ANIM_DICT_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = STREAMING::HAS_ANIM_DICT_LOADED((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING__REMOVE_ANIM_DICT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  STREAMING::REMOVE_ANIM_DICT((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__REQUEST_ANIM_SET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  STREAMING::REQUEST_ANIM_SET((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__HAS_ANIM_SET_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = STREAMING::HAS_ANIM_SET_LOADED((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING__REMOVE_ANIM_SET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  STREAMING::REMOVE_ANIM_SET((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__REQUEST_CLIP_SET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  STREAMING::REQUEST_CLIP_SET((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__HAS_CLIP_SET_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = STREAMING::HAS_CLIP_SET_LOADED((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING__REMOVE_CLIP_SET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  STREAMING::REMOVE_CLIP_SET((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__REQUEST_IPL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  STREAMING::REQUEST_IPL((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__REMOVE_IPL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  STREAMING::REMOVE_IPL((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__IS_IPL_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = STREAMING::IS_IPL_ACTIVE((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING__SET_STREAMING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  STREAMING::SET_STREAMING(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__SET_GAME_PAUSES_FOR_STREAMING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  STREAMING::SET_GAME_PAUSES_FOR_STREAMING(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__SET_REDUCE_PED_MODEL_BUDGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  STREAMING::SET_REDUCE_PED_MODEL_BUDGET(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__SET_REDUCE_VEHICLE_MODEL_BUDGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  STREAMING::SET_REDUCE_VEHICLE_MODEL_BUDGET(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__SET_DITCH_POLICE_MODELS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::SET_DITCH_POLICE_MODELS(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__GET_NUMBER_OF_STREAMING_REQUESTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = STREAMING::GET_NUMBER_OF_STREAMING_REQUESTS();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING__REQUEST_PTFX_ASSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::REQUEST_PTFX_ASSET();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__HAS_PTFX_ASSET_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = STREAMING::HAS_PTFX_ASSET_LOADED();
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING__REMOVE_PTFX_ASSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::REMOVE_PTFX_ASSET();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__REQUEST_NAMED_PTFX_ASSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  STREAMING::REQUEST_NAMED_PTFX_ASSET((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__HAS_NAMED_PTFX_ASSET_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = STREAMING::HAS_NAMED_PTFX_ASSET_LOADED((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING___REMOVE_NAMED_PTFX_ASSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  STREAMING::_REMOVE_NAMED_PTFX_ASSET((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__SET_VEHICLE_POPULATION_BUDGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::SET_VEHICLE_POPULATION_BUDGET(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__SET_PED_POPULATION_BUDGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::SET_PED_POPULATION_BUDGET(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__CLEAR_FOCUS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::CLEAR_FOCUS();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___SET_FOCUS_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"ffffff",&a0, &a1, &a2, &a3, &a4, &a5);
  STREAMING::_SET_FOCUS_AREA(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__SET_FOCUS_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::SET_FOCUS_ENTITY(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__IS_ENTITY_FOCUS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STREAMING::IS_ENTITY_FOCUS(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING___0x0811381EF5062FEC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::_0x0811381EF5062FEC(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0xAF12610C644A35C9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  STREAMING::_0xAF12610C644A35C9(&a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x4E52E752C76E7E7A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::_0x4E52E752C76E7E7A(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x219C7B8D53E429FD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"ffffii",&a0, &a1, &a2, &a3, &a4, &a5);
  Any r0 = STREAMING::_0x219C7B8D53E429FD(a0, a1, a2, a3, a4, a5);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING___0x1F3F018BC3AFA77C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_int a8;
  mrb_get_args(mrb,"fffffffii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  Any r0 = STREAMING::_0x1F3F018BC3AFA77C(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING___0x0AD9710CEE2F590F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_get_args(mrb,"ffffffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  Any r0 = STREAMING::_0x0AD9710CEE2F590F(a0, a1, a2, a3, a4, a5, a6);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING___0x1EE7D8DF4425F053(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::_0x1EE7D8DF4425F053(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x7D41E9D2D17C5B2D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STREAMING::_0x7D41E9D2D17C5B2D(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING___0x07C313F94746702C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STREAMING::_0x07C313F94746702C(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING___0xBC9823AB80A3DCAC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STREAMING::_0xBC9823AB80A3DCAC();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING__NEW_LOAD_SCENE_START(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_get_args(mrb,"fffffffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  mrb_bool r0 = STREAMING::NEW_LOAD_SCENE_START(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING___0xACCFB4ACF53551B0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_get_args(mrb,"ffffi",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = STREAMING::_0xACCFB4ACF53551B0(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING__NEW_LOAD_SCENE_STOP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::NEW_LOAD_SCENE_STOP();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__IS_NEW_LOAD_SCENE_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = STREAMING::IS_NEW_LOAD_SCENE_ACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING__IS_NEW_LOAD_SCENE_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = STREAMING::IS_NEW_LOAD_SCENE_LOADED();
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING___0x71E7B2E657449AAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STREAMING::_0x71E7B2E657449AAD();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING__START_PLAYER_SWITCH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  STREAMING::START_PLAYER_SWITCH(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__STOP_PLAYER_SWITCH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::STOP_PLAYER_SWITCH();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__IS_PLAYER_SWITCH_IN_PROGRESS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = STREAMING::IS_PLAYER_SWITCH_IN_PROGRESS();
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING__GET_PLAYER_SWITCH_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = STREAMING::GET_PLAYER_SWITCH_TYPE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING__GET_IDEAL_PLAYER_SWITCH_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"ffffff",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_int r0 = STREAMING::GET_IDEAL_PLAYER_SWITCH_TYPE(a0, a1, a2, a3, a4, a5);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING__GET_PLAYER_SWITCH_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = STREAMING::GET_PLAYER_SWITCH_STATE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING__GET_PLAYER_SHORT_SWITCH_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = STREAMING::GET_PLAYER_SHORT_SWITCH_STATE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING___0x5F2013F8BC24EE69(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::_0x5F2013F8BC24EE69(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x78C0D93253149435(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STREAMING::_0x78C0D93253149435();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING___0xC208B673CE446B61(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_int a8;
  mrb_get_args(mrb,"ffffffffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  STREAMING::_0xC208B673CE446B61(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x0FDE9DBFC0A6BC65(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::_0x0FDE9DBFC0A6BC65(&a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x43D1680C6D19A8E9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::_0x43D1680C6D19A8E9();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x74DE2E8739086740(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::_0x74DE2E8739086740();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x8E2A065ABDAE6994(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::_0x8E2A065ABDAE6994();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0xAD5FDF34B81BFE79(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::_0xAD5FDF34B81BFE79();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0xDFA80CB25D0A19B3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STREAMING::_0xDFA80CB25D0A19B3();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING___0xD4793DFF3AF2ABCD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::_0xD4793DFF3AF2ABCD();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0xBD605B8E0E18B3BB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::_0xBD605B8E0E18B3BB();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0xAAB3200ED59016BC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  STREAMING::_0xAAB3200ED59016BC(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0xD8295AF639FD9CB8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::_0xD8295AF639FD9CB8(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x933BBEEB8C61B5F4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STREAMING::_0x933BBEEB8C61B5F4();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING__SET_PLAYER_INVERTED_UP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STREAMING::SET_PLAYER_INVERTED_UP();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING___0x5B48A06DD0E792A5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STREAMING::_0x5B48A06DD0E792A5();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING__DESTROY_PLAYER_IN_PAUSE_MENU(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STREAMING::DESTROY_PLAYER_IN_PAUSE_MENU();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING___0x1E9057A74FD73E23(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::_0x1E9057A74FD73E23();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x0C15B0E443B2349D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STREAMING::_0x0C15B0E443B2349D();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING___0xA76359FC80B2438E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  STREAMING::_0xA76359FC80B2438E(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0xBED8CA5FF5E04113(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  STREAMING::_0xBED8CA5FF5E04113(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x472397322E92A856(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::_0x472397322E92A856();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x40AEFD1A244741F2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  STREAMING::_0x40AEFD1A244741F2(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x03F1A106BDA7DD3E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::_0x03F1A106BDA7DD3E();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x63EB2B972A218CAC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::_0x63EB2B972A218CAC();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0xFB199266061F820A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STREAMING::_0xFB199266061F820A();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING___0xF4A0DADB70F57FA6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::_0xF4A0DADB70F57FA6();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x5068F488DDB54DD8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STREAMING::_0x5068F488DDB54DD8();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STREAMING__PREFETCH_SRL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::PREFETCH_SRL(&a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__IS_SRL_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = STREAMING::IS_SRL_LOADED();
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING__BEGIN_SRL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::BEGIN_SRL();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__END_SRL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::END_SRL();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__SET_SRL_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  STREAMING::SET_SRL_TIME(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0xEF39EE20C537E98C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"iiiiii",&a0, &a1, &a2, &a3, &a4, &a5);
  STREAMING::_0xEF39EE20C537E98C(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0xBEB2D9A1D9A8F55A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  STREAMING::_0xBEB2D9A1D9A8F55A(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x20C6C7E4EB082A7F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  STREAMING::_0x20C6C7E4EB082A7F(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0xF8155A7F03DDFC8E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::_0xF8155A7F03DDFC8E(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__SET_HD_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  STREAMING::SET_HD_AREA(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING__CLEAR_HD_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::CLEAR_HD_AREA();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0xB5A4DB34FE89B88A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::_0xB5A4DB34FE89B88A();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0xCCE26000E9A6FAD7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STREAMING::_0xCCE26000E9A6FAD7();
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x0BC3144DEB678666(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STREAMING::_0x0BC3144DEB678666(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STREAMING___0xF086AD9354FAC3A3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STREAMING::_0xF086AD9354FAC3A3(a0);
  return mrb_nil_value();
}

mrb_value mruby__STREAMING___0x3D3D8B3BE5A83D35(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STREAMING::_0x3D3D8B3BE5A83D35();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SCRIPT__REQUEST_SCRIPT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  SCRIPT::REQUEST_SCRIPT((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__SCRIPT__SET_SCRIPT_AS_NO_LONGER_NEEDED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__SCRIPT__HAS_SCRIPT_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = SCRIPT::HAS_SCRIPT_LOADED((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__SCRIPT__DOES_SCRIPT_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = SCRIPT::DOES_SCRIPT_EXIST((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__SCRIPT___REQUEST_STREAMED_SCRIPT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  SCRIPT::_REQUEST_STREAMED_SCRIPT(a0);
  return mrb_nil_value();
}

mrb_value mruby__SCRIPT___SET_STREAMED_SCRIPT_AS_NO_LONGER_NEEDED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  SCRIPT::_SET_STREAMED_SCRIPT_AS_NO_LONGER_NEEDED(a0);
  return mrb_nil_value();
}

mrb_value mruby__SCRIPT___HAS_STREAMED_SCRIPT_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = SCRIPT::_HAS_STREAMED_SCRIPT_LOADED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__SCRIPT___0xF86AA3C56BA31381(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = SCRIPT::_0xF86AA3C56BA31381(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__SCRIPT__TERMINATE_THREAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  SCRIPT::TERMINATE_THREAD(a0);
  return mrb_nil_value();
}

mrb_value mruby__SCRIPT__IS_THREAD_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = SCRIPT::IS_THREAD_ACTIVE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__SCRIPT___GET_THREAD_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  char* cstr = SCRIPT::_GET_THREAD_NAME(a0);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__SCRIPT___0xDADFADA5A20143A8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  SCRIPT::_0xDADFADA5A20143A8();
  return mrb_nil_value();
}

mrb_value mruby__SCRIPT___0x30B4FA1C82DD4B9F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = SCRIPT::_0x30B4FA1C82DD4B9F();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SCRIPT__GET_ID_OF_THIS_THREAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = SCRIPT::GET_ID_OF_THIS_THREAD();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SCRIPT__TERMINATE_THIS_THREAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  SCRIPT::TERMINATE_THIS_THREAD();
  return mrb_nil_value();
}

mrb_value mruby__SCRIPT___GET_NUMBER_OF_INSTANCES_OF_STREAMED_SCRIPT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = SCRIPT::_GET_NUMBER_OF_INSTANCES_OF_STREAMED_SCRIPT(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SCRIPT__GET_THIS_SCRIPT_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* cstr = SCRIPT::GET_THIS_SCRIPT_NAME();
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__SCRIPT___GET_THIS_SCRIPT_HASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Hash r0 = SCRIPT::_GET_THIS_SCRIPT_HASH();
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__SCRIPT__GET_NUMBER_OF_EVENTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = SCRIPT::GET_NUMBER_OF_EVENTS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SCRIPT__GET_EVENT_EXISTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = SCRIPT::GET_EVENT_EXISTS(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__SCRIPT__GET_EVENT_AT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = SCRIPT::GET_EVENT_AT_INDEX(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SCRIPT__SHUTDOWN_LOADING_SCREEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  SCRIPT::SHUTDOWN_LOADING_SCREEN();
  return mrb_nil_value();
}

mrb_value mruby__SCRIPT__SET_NO_LOADING_SCREEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  SCRIPT::SET_NO_LOADING_SCREEN(a0);
  return mrb_nil_value();
}

mrb_value mruby__SCRIPT___GET_NO_LOADING_SCREEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = SCRIPT::_GET_NO_LOADING_SCREEN();
  return mrb_bool_value(r0);
}

mrb_value mruby__SCRIPT___0xB1577667C3708F9B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  SCRIPT::_0xB1577667C3708F9B();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xABA17D7CE615ADBF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::_0xABA17D7CE615ADBF((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI___0xBD12F8228410D9B4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0xBD12F8228410D9B4(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x10D373323E5B9C0D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x10D373323E5B9C0D();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xC65AB383CD91DF98(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xC65AB383CD91DF98();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xD422FCC5F239A915(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::_0xD422FCC5F239A915();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___0xB2A592B04648A9CB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0xB2A592B04648A9CB();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x9245E81072704B8A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x9245E81072704B8A(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___SHOW_CURSOR_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_SHOW_CURSOR_THIS_FRAME();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x8DB8CFFD58B62552(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x8DB8CFFD58B62552(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x98215325A695E78A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x98215325A695E78A(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x3D9ACB1EB139E702(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x3D9ACB1EB139E702();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x6F1554B0CC2089FA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x6F1554B0CC2089FA(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x55598D21339CB998(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  UI::_0x55598D21339CB998(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x25F87B30C382FCA7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x25F87B30C382FCA7();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xA8FDB297A8D25FBA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xA8FDB297A8D25FBA();
  return mrb_nil_value();
}

mrb_value mruby__UI___REMOVE_NOTIFICATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_REMOVE_NOTIFICATION(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xA13C11E1B5C06BFC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xA13C11E1B5C06BFC();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x583049884A2EEE3C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x583049884A2EEE3C();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xFDB423997FA30340(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xFDB423997FA30340();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xE1CD1E48E025E661(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xE1CD1E48E025E661();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xA9CBFD40B3FA3010(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0xA9CBFD40B3FA3010();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0xD4438C0564490E63(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xD4438C0564490E63();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xB695E2CD0A2DA9EE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xB695E2CD0A2DA9EE();
  return mrb_nil_value();
}

mrb_value mruby__UI___GET_ACTIVE_NOTIFICATION_HANDLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_GET_ACTIVE_NOTIFICATION_HANDLE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x56C8B608CFD49854(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x56C8B608CFD49854();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xADED7F5748ACAFE6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xADED7F5748ACAFE6();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x92F0DA1E27DB96DC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x92F0DA1E27DB96DC(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x17430B918701C342(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  UI::_0x17430B918701C342(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x17AD8C9706BDD88A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x17AD8C9706BDD88A(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x4A0C7C9BB10ABB36(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x4A0C7C9BB10ABB36(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xFDD85225B2DEA55E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xFDD85225B2DEA55E();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xFDEC055AB549E328(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xFDEC055AB549E328();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x80FE4F3AB4E1B62A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x80FE4F3AB4E1B62A();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xBAE4F9B97CD43B30(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0xBAE4F9B97CD43B30(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___SET_NOTIFICATION_TEXT_ENTRY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::_SET_NOTIFICATION_TEXT_ENTRY((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI___0x2B7E9A4EAAA93C89(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_bool a4;
  char* a5;
  int a5_size;
  char* a6;
  int a6_size;
  mrb_get_args(mrb,"siiibss",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5, &a5_size, &a6, &a6_size);
  mrb_int r0 = UI::_0x2B7E9A4EAAA93C89((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, (a5_size == 0 ? 0 : a5), (a6_size == 0 ? 0 : a6));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___SET_NOTIFICATION_MESSAGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_bool a2;
  mrb_int a3;
  char* a4;
  int a4_size;
  char* a5;
  int a5_size;
  mrb_get_args(mrb,"ssbiss",&a0, &a0_size, &a1, &a1_size, &a2, &a3, &a4, &a4_size, &a5, &a5_size);
  mrb_int r0 = UI::_SET_NOTIFICATION_MESSAGE((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1), a2, a3, (a4_size == 0 ? 0 : a4), (a5_size == 0 ? 0 : a5));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0xC6F580E4C94926AC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_bool a2;
  mrb_int a3;
  char* a4;
  int a4_size;
  char* a5;
  int a5_size;
  mrb_get_args(mrb,"ssbiss",&a0, &a0_size, &a1, &a1_size, &a2, &a3, &a4, &a4_size, &a5, &a5_size);
  Any r0 = UI::_0xC6F580E4C94926AC((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1), a2, a3, (a4_size == 0 ? 0 : a4), (a5_size == 0 ? 0 : a5));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x1E6611149DB3DB6B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_bool a2;
  mrb_int a3;
  char* a4;
  int a4_size;
  char* a5;
  int a5_size;
  mrb_float a6;
  mrb_get_args(mrb,"ssbissf",&a0, &a0_size, &a1, &a1_size, &a2, &a3, &a4, &a4_size, &a5, &a5_size, &a6);
  mrb_int r0 = UI::_0x1E6611149DB3DB6B((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1), a2, a3, (a4_size == 0 ? 0 : a4), (a5_size == 0 ? 0 : a5), a6);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___SET_NOTIFICATION_MESSAGE_CLAN_TAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_bool a2;
  mrb_int a3;
  char* a4;
  int a4_size;
  char* a5;
  int a5_size;
  mrb_float a6;
  char* a7;
  int a7_size;
  mrb_get_args(mrb,"ssbissfs",&a0, &a0_size, &a1, &a1_size, &a2, &a3, &a4, &a4_size, &a5, &a5_size, &a6, &a7, &a7_size);
  mrb_int r0 = UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1), a2, a3, (a4_size == 0 ? 0 : a4), (a5_size == 0 ? 0 : a5), a6, (a7_size == 0 ? 0 : a7));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___SET_NOTIFICATION_MESSAGE_CLAN_TAG_2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_bool a2;
  mrb_int a3;
  char* a4;
  int a4_size;
  char* a5;
  int a5_size;
  mrb_float a6;
  char* a7;
  int a7_size;
  mrb_int a8;
  mrb_int a9;
  mrb_get_args(mrb,"ssbissfsii",&a0, &a0_size, &a1, &a1_size, &a2, &a3, &a4, &a4_size, &a5, &a5_size, &a6, &a7, &a7_size, &a8, &a9);
  mrb_int r0 = UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1), a2, a3, (a4_size == 0 ? 0 : a4), (a5_size == 0 ? 0 : a5), a6, (a7_size == 0 ? 0 : a7), a8, a9);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___DRAW_NOTIFICATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  mrb_int r0 = UI::_DRAW_NOTIFICATION(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___DRAW_NOTIFICATION_2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  mrb_int r0 = UI::_DRAW_NOTIFICATION_2(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___DRAW_NOTIFICATION_3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  mrb_int r0 = UI::_DRAW_NOTIFICATION_3(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0xAA295B6F28BD587D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_int a2;
  mrb_int a3;
  char* a4;
  int a4_size;
  mrb_get_args(mrb,"ssiis",&a0, &a0_size, &a1, &a1_size, &a2, &a3, &a4, &a4_size);
  mrb_int r0 = UI::_0xAA295B6F28BD587D((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1), a2, a3, (a4_size == 0 ? 0 : a4));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x33EE12743CCD6343(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  Any r0 = UI::_0x33EE12743CCD6343(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0xC8F3AAF93D0600BF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  Any r0 = UI::_0xC8F3AAF93D0600BF(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x7AE0589093A2E088(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"iiiiii",&a0, &a1, &a2, &a3, &a4, &a5);
  Any r0 = UI::_0x7AE0589093A2E088(a0, a1, a2, a3, a4, a5);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___DRAW_NOTIFICATION_4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  mrb_int r0 = UI::_DRAW_NOTIFICATION_4(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0xD202B92CBF1D816F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iis",&a0, &a1, &a2, &a2_size);
  Any r0 = UI::_0xD202B92CBF1D816F(a0, a1, (a2_size == 0 ? 0 : a2));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0xDD6CB2CCE7C2735C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iss",&a0, &a1, &a1_size, &a2, &a2_size);
  Any r0 = UI::_0xDD6CB2CCE7C2735C(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___SET_TEXT_ENTRY_2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::_SET_TEXT_ENTRY_2((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI___DRAW_SUBTITLE_TIMED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::_DRAW_SUBTITLE_TIMED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x853648FD1063A213(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x853648FD1063A213(&a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x8A9BA1AB3E237613(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x8A9BA1AB3E237613();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___SET_TEXT_ENTRY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::_SET_TEXT_ENTRY((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI___DRAW_TEXT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  UI::_DRAW_TEXT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___SET_TEXT_ENTRY_FOR_WIDTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::_SET_TEXT_ENTRY_FOR_WIDTH((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI___GET_TEXT_SCREEN_WIDTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  mrb_float r0 = UI::_GET_TEXT_SCREEN_WIDTH(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__UI___SET_TEXT_GXT_ENTRY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::_SET_TEXT_GXT_ENTRY((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI___0x9040DFB09BE75706(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  Any r0 = UI::_0x9040DFB09BE75706(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___SET_TEXT_COMPONENT_FORMAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::_SET_TEXT_COMPONENT_FORMAT((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI___DISPLAY_HELP_TEXT_FROM_STRING_LABEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_int a3;
  mrb_get_args(mrb,"ibbi",&a0, &a1, &a2, &a3);
  UI::_DISPLAY_HELP_TEXT_FROM_STRING_LABEL(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x0A24DA3A41B718F5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::_0x0A24DA3A41B718F5((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI___0x10BDDBFC529428DD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::_0x10BDDBFC529428DD(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__BEGIN_TEXT_COMMAND_SET_BLIP_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::BEGIN_TEXT_COMMAND_SET_BLIP_NAME((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI__END_TEXT_COMMAND_SET_BLIP_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::END_TEXT_COMMAND_SET_BLIP_NAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x23D69E0465570028(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::_0x23D69E0465570028((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI___0xCFDBDF5AE59BA0F4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0xCFDBDF5AE59BA0F4(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xE124FA80A759019C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::_0xE124FA80A759019C((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI___0xFCC75460ABA29378(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xFCC75460ABA29378();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x8F9EE5687F8EECCD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::_0x8F9EE5687F8EECCD((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI___0xA86911979638106F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0xA86911979638106F(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__ADD_TEXT_COMPONENT_INTEGER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::ADD_TEXT_COMPONENT_INTEGER(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__ADD_TEXT_COMPONENT_FLOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_int a1;
  mrb_get_args(mrb,"fi",&a0, &a1);
  UI::ADD_TEXT_COMPONENT_FLOAT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___ADD_TEXT_COMPONENT_ITEM_STRING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::_ADD_TEXT_COMPONENT_ITEM_STRING((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI___0x17299B63C7683A2B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x17299B63C7683A2B(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x80EAD8E2E1D5D52E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x80EAD8E2E1D5D52E(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___ADD_TEXT_COMPONENT_STRING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::_ADD_TEXT_COMPONENT_STRING((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI__ADD_TEXT_COMPONENT_SUBSTRING_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::ADD_TEXT_COMPONENT_SUBSTRING_TIME(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x0E4C749FF9DE9CC4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::_0x0E4C749FF9DE9CC4(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x761B77454205A61D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_get_args(mrb,"si",&a0, &a0_size, &a1);
  UI::_0x761B77454205A61D((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___ADD_TEXT_COMPONENT_STRING2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::_ADD_TEXT_COMPONENT_STRING2((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI___ADD_TEXT_COMPONENT_STRING3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::_ADD_TEXT_COMPONENT_STRING3((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI___0x39BBF623FC803EAC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x39BBF623FC803EAC(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___GET_TEXT_SUBSTRING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"sii",&a0, &a0_size, &a1, &a2);
  char* cstr = UI::_GET_TEXT_SUBSTRING((a0_size == 0 ? 0 : a0), a1, a2);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__UI___GET_TEXT_SUBSTRING_SAFE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"siii",&a0, &a0_size, &a1, &a2, &a3);
  char* cstr = UI::_GET_TEXT_SUBSTRING_SAFE((a0_size == 0 ? 0 : a0), a1, a2, a3);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__UI___GET_TEXT_SUBSTRING_SLICE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"sii",&a0, &a0_size, &a1, &a2);
  char* cstr = UI::_GET_TEXT_SUBSTRING_SLICE((a0_size == 0 ? 0 : a0), a1, a2);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__UI___GET_LABEL_TEXT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  char* cstr = UI::_GET_LABEL_TEXT((a0_size == 0 ? 0 : a0));
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__UI__CLEAR_PRINTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::CLEAR_PRINTS();
  return mrb_nil_value();
}

mrb_value mruby__UI__CLEAR_BRIEF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::CLEAR_BRIEF();
  return mrb_nil_value();
}

mrb_value mruby__UI__CLEAR_ALL_HELP_MESSAGES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::CLEAR_ALL_HELP_MESSAGES();
  return mrb_nil_value();
}

mrb_value mruby__UI__CLEAR_THIS_PRINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::CLEAR_THIS_PRINT((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI__CLEAR_SMALL_PRINTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::CLEAR_SMALL_PRINTS();
  return mrb_nil_value();
}

mrb_value mruby__UI__DOES_TEXT_BLOCK_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = UI::DOES_TEXT_BLOCK_EXIST((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__REQUEST_ADDITIONAL_TEXT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_get_args(mrb,"si",&a0, &a0_size, &a1);
  UI::REQUEST_ADDITIONAL_TEXT((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___REQUEST_ADDITIONAL_TEXT_2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_get_args(mrb,"si",&a0, &a0_size, &a1);
  UI::_REQUEST_ADDITIONAL_TEXT_2((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__HAS_ADDITIONAL_TEXT_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::HAS_ADDITIONAL_TEXT_LOADED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__CLEAR_ADDITIONAL_TEXT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::CLEAR_ADDITIONAL_TEXT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__IS_STREAMING_ADDITIONAL_TEXT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::IS_STREAMING_ADDITIONAL_TEXT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__HAS_THIS_ADDITIONAL_TEXT_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_get_args(mrb,"si",&a0, &a0_size, &a1);
  mrb_bool r0 = UI::HAS_THIS_ADDITIONAL_TEXT_LOADED((a0_size == 0 ? 0 : a0), a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__IS_MESSAGE_BEING_DISPLAYED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::IS_MESSAGE_BEING_DISPLAYED();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__DOES_TEXT_LABEL_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = UI::DOES_TEXT_LABEL_EXIST((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  Any r0 = UI::GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL((a0_size == 0 ? 0 : a0));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__GET_LENGTH_OF_LITERAL_STRING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_int r0 = UI::GET_LENGTH_OF_LITERAL_STRING((a0_size == 0 ? 0 : a0));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x43E4111189E54F0E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_int r0 = UI::_0x43E4111189E54F0E((a0_size == 0 ? 0 : a0));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__GET_STREET_NAME_FROM_HASH_KEY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  char* cstr = UI::GET_STREET_NAME_FROM_HASH_KEY(a0);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__UI__IS_HUD_PREFERENCE_SWITCHED_ON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::IS_HUD_PREFERENCE_SWITCHED_ON();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__IS_RADAR_PREFERENCE_SWITCHED_ON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::IS_RADAR_PREFERENCE_SWITCHED_ON();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__IS_SUBTITLE_PREFERENCE_SWITCHED_ON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::IS_SUBTITLE_PREFERENCE_SWITCHED_ON();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__DISPLAY_HUD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::DISPLAY_HUD(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x7669F9E39DC17063(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x7669F9E39DC17063();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x402F9ED62087E898(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x402F9ED62087E898();
  return mrb_nil_value();
}

mrb_value mruby__UI__DISPLAY_RADAR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::DISPLAY_RADAR(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__IS_HUD_HIDDEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::IS_HUD_HIDDEN();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__IS_RADAR_HIDDEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::IS_RADAR_HIDDEN();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___0xAF754F20EB5CD51A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0xAF754F20EB5CD51A();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__SET_BLIP_ROUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::SET_BLIP_ROUTE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_ROUTE_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::SET_BLIP_ROUTE_COLOUR(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x57D760D55F54E071(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x57D760D55F54E071(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__RESPONDING_AS_TEMP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  UI::RESPONDING_AS_TEMP(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_RADAR_ZOOM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::SET_RADAR_ZOOM(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xF98E4B3E56AFC7B1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  UI::_0xF98E4B3E56AFC7B1(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___SET_RADAR_ZOOM_LEVEL_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  UI::_SET_RADAR_ZOOM_LEVEL_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xD2049635DEB9C375(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xD2049635DEB9C375();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xD68A5FF8A3A89874(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  UI::_0xD68A5FF8A3A89874(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x16A304E6CB2BFAB9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  UI::_0x16A304E6CB2BFAB9(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x1CCC708F0F850613(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::_0x1CCC708F0F850613(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xF314CF4F0211894E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  UI::_0xF314CF4F0211894E(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__UI__FLASH_ABILITY_BAR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::FLASH_ABILITY_BAR(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_ABILITY_BAR_VALUE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  UI::SET_ABILITY_BAR_VALUE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__FLASH_WANTED_DISPLAY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::FLASH_WANTED_DISPLAY(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xBA8D65C1C65702E5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0xBA8D65C1C65702E5(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xDB88A37483346780(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_int a1;
  mrb_get_args(mrb,"fi",&a0, &a1);
  mrb_float r0 = UI::_0xDB88A37483346780(a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__UI__SET_TEXT_SCALE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  UI::SET_TEXT_SCALE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_TEXT_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  UI::SET_TEXT_COLOUR(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_TEXT_CENTRE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::SET_TEXT_CENTRE(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_TEXT_RIGHT_JUSTIFY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::SET_TEXT_RIGHT_JUSTIFY(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_TEXT_JUSTIFICATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::SET_TEXT_JUSTIFICATION(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_TEXT_WRAP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  UI::SET_TEXT_WRAP(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_TEXT_LEADING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::SET_TEXT_LEADING(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_TEXT_PROPORTIONAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::SET_TEXT_PROPORTIONAL(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_TEXT_FONT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::SET_TEXT_FONT(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_TEXT_DROP_SHADOW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::SET_TEXT_DROP_SHADOW();
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_TEXT_DROPSHADOW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  UI::SET_TEXT_DROPSHADOW(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_TEXT_OUTLINE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::SET_TEXT_OUTLINE();
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_TEXT_EDGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  UI::SET_TEXT_EDGE(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_TEXT_RENDER_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::SET_TEXT_RENDER_ID(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__REGISTER_NAMED_RENDERTARGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_get_args(mrb,"sb",&a0, &a0_size, &a1);
  mrb_bool r0 = UI::REGISTER_NAMED_RENDERTARGET((a0_size == 0 ? 0 : a0), a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__IS_NAMED_RENDERTARGET_REGISTERED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = UI::IS_NAMED_RENDERTARGET_REGISTERED((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__RELEASE_NAMED_RENDERTARGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::RELEASE_NAMED_RENDERTARGET(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__LINK_NAMED_RENDERTARGET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::LINK_NAMED_RENDERTARGET(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__GET_NAMED_RENDERTARGET_RENDER_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  Any r0 = UI::GET_NAMED_RENDERTARGET_RENDER_ID((a0_size == 0 ? 0 : a0));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__IS_NAMED_RENDERTARGET_LINKED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::IS_NAMED_RENDERTARGET_LINKED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__CLEAR_HELP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::CLEAR_HELP(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__IS_HELP_MESSAGE_ON_SCREEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::IS_HELP_MESSAGE_ON_SCREEN();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___0x214CD562A939246A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::_0x214CD562A939246A();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__IS_HELP_MESSAGE_BEING_DISPLAYED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::IS_HELP_MESSAGE_BEING_DISPLAYED();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__IS_HELP_MESSAGE_FADING_OUT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::IS_HELP_MESSAGE_FADING_OUT();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___0x4A9923385BDB9DAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = UI::_0x4A9923385BDB9DAD();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___GET_BLIP_INFO_ID_ITERATOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_GET_BLIP_INFO_ID_ITERATOR();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__GET_NUMBER_OF_ACTIVE_BLIPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::GET_NUMBER_OF_ACTIVE_BLIPS();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__GET_NEXT_BLIP_INFO_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Blip r0 = UI::GET_NEXT_BLIP_INFO_ID(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Blip"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__UI__GET_FIRST_BLIP_INFO_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Blip r0 = UI::GET_FIRST_BLIP_INFO_ID(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Blip"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__UI__GET_BLIP_INFO_ID_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = UI::GET_BLIP_INFO_ID_COORD(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__UI__GET_BLIP_INFO_ID_DISPLAY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = UI::GET_BLIP_INFO_ID_DISPLAY(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__GET_BLIP_INFO_ID_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = UI::GET_BLIP_INFO_ID_TYPE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__GET_BLIP_INFO_ID_ENTITY_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = UI::GET_BLIP_INFO_ID_ENTITY_INDEX(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__GET_BLIP_INFO_ID_PICKUP_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = UI::GET_BLIP_INFO_ID_PICKUP_INDEX(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__GET_BLIP_FROM_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Blip r0 = UI::GET_BLIP_FROM_ENTITY(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Blip"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__UI__ADD_BLIP_FOR_RADIUS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  Blip r0 = UI::ADD_BLIP_FOR_RADIUS(a0, a1, a2, a3);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Blip"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__UI__ADD_BLIP_FOR_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = UI::ADD_BLIP_FOR_ENTITY(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__ADD_BLIP_FOR_PICKUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = UI::ADD_BLIP_FOR_PICKUP(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__ADD_BLIP_FOR_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  Blip r0 = UI::ADD_BLIP_FOR_COORD(a0, a1, a2);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Blip"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__UI___0x72DD432F3CDFC0EE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_get_args(mrb,"ffffi",&a0, &a1, &a2, &a3, &a4);
  UI::_0x72DD432F3CDFC0EE(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x60734CC207C9833C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x60734CC207C9833C(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  UI::SET_BLIP_COORDS(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__UI__GET_BLIP_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = UI::GET_BLIP_COORDS(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__UI__SET_BLIP_SPRITE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::SET_BLIP_SPRITE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__GET_BLIP_SPRITE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = UI::GET_BLIP_SPRITE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__SET_BLIP_NAME_FROM_TEXT_FILE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  UI::SET_BLIP_NAME_FROM_TEXT_FILE(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_NAME_TO_PLAYER_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::SET_BLIP_NAME_TO_PLAYER_NAME(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_ALPHA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::SET_BLIP_ALPHA(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__GET_BLIP_ALPHA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = UI::GET_BLIP_ALPHA(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__SET_BLIP_FADE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  UI::SET_BLIP_FADE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_ROTATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::SET_BLIP_ROTATION(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_FLASH_TIMER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::SET_BLIP_FLASH_TIMER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_FLASH_INTERVAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::SET_BLIP_FLASH_INTERVAL(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::SET_BLIP_COLOUR(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_SECONDARY_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  UI::SET_BLIP_SECONDARY_COLOUR(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__UI__GET_BLIP_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = UI::GET_BLIP_COLOUR(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__GET_BLIP_HUD_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = UI::GET_BLIP_HUD_COLOUR(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__IS_BLIP_SHORT_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::IS_BLIP_SHORT_RANGE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__IS_BLIP_ON_MINIMAP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::IS_BLIP_ON_MINIMAP(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___0xDD2238F57B977751(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::_0xDD2238F57B977751(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___0x54318C915D27E4CE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::_0x54318C915D27E4CE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_HIGH_DETAIL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::SET_BLIP_HIGH_DETAIL(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_AS_MISSION_CREATOR_BLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::SET_BLIP_AS_MISSION_CREATOR_BLIP(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__IS_MISSION_CREATOR_BLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::IS_MISSION_CREATOR_BLIP(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__DISABLE_BLIP_NAME_FOR_VAR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::DISABLE_BLIP_NAME_FOR_VAR();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x4167EFE0527D706E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x4167EFE0527D706E();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0xF1A6C18B35BCADE6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0xF1A6C18B35BCADE6(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_FLASHES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::SET_BLIP_FLASHES(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_FLASHES_ALTERNATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::SET_BLIP_FLASHES_ALTERNATE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__IS_BLIP_FLASHING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::IS_BLIP_FLASHING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__SET_BLIP_AS_SHORT_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::SET_BLIP_AS_SHORT_RANGE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_SCALE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  UI::SET_BLIP_SCALE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_PRIORITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::SET_BLIP_PRIORITY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_DISPLAY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::SET_BLIP_DISPLAY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_CATEGORY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::SET_BLIP_CATEGORY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_AS_FRIENDLY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::SET_BLIP_AS_FRIENDLY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__PULSE_BLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::PULSE_BLIP(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__SHOW_NUMBER_ON_BLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::SHOW_NUMBER_ON_BLIP(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__HIDE_NUMBER_ON_BLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::HIDE_NUMBER_ON_BLIP(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x75A16C3DA34F1245(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::_0x75A16C3DA34F1245(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x74513EA3E505181E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::_0x74513EA3E505181E(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___SET_BLIP_SHOW_HEADING_INDICATOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::_SET_BLIP_SHOW_HEADING_INDICATOR(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xB81656BC81FE24D1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::_0xB81656BC81FE24D1(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x23C3EB807312F01A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::_0x23C3EB807312F01A(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xDCFB5D4DB8BF367E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::_0xDCFB5D4DB8BF367E(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xC4278F70131BAA6D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::_0xC4278F70131BAA6D(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x2B6D467DAB714E8D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::_0x2B6D467DAB714E8D(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x25615540D894B814(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::_0x25615540D894B814(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__DOES_BLIP_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::DOES_BLIP_EXIST(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__SET_WAYPOINT_OFF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::SET_WAYPOINT_OFF();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xD8E694757BCEA8E9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xD8E694757BCEA8E9();
  return mrb_nil_value();
}

mrb_value mruby__UI__REFRESH_WAYPOINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::REFRESH_WAYPOINT();
  return mrb_nil_value();
}

mrb_value mruby__UI__IS_WAYPOINT_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::IS_WAYPOINT_ACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__SET_NEW_WAYPOINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  UI::SET_NEW_WAYPOINT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_BRIGHT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::SET_BLIP_BRIGHT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_BLIP_SHOW_CONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::SET_BLIP_SHOW_CONE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xC594B315EDF2D4AF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0xC594B315EDF2D4AF(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_MINIMAP_COMPONENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  Any r0 = UI::SET_MINIMAP_COMPONENT(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x60E892BA4F5BDCA4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x60E892BA4F5BDCA4();
  return mrb_nil_value();
}

mrb_value mruby__UI__GET_MAIN_PLAYER_BLIP_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Blip r0 = UI::GET_MAIN_PLAYER_BLIP_ID();
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Blip"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__UI___0x41350B4FC28E3941(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x41350B4FC28E3941(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__HIDE_LOADING_ON_FADE_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::HIDE_LOADING_ON_FADE_THIS_FRAME();
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_RADAR_AS_INTERIOR_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iffii",&a0, &a1, &a2, &a3, &a4);
  UI::SET_RADAR_AS_INTERIOR_THIS_FRAME(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_RADAR_AS_EXTERIOR_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::SET_RADAR_AS_EXTERIOR_THIS_FRAME();
  return mrb_nil_value();
}

mrb_value mruby__UI___SET_PLAYER_BLIP_POSITION_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  UI::_SET_PLAYER_BLIP_POSITION_THIS_FRAME(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x9049FE339D5F6F6F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x9049FE339D5F6F6F();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___DISABLE_RADAR_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_DISABLE_RADAR_THIS_FRAME();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x20FE7FDFEEAD38C0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x20FE7FDFEEAD38C0();
  return mrb_nil_value();
}

mrb_value mruby__UI___CENTER_PLAYER_ON_RADAR_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_CENTER_PLAYER_ON_RADAR_THIS_FRAME();
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_WIDESCREEN_FORMAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::SET_WIDESCREEN_FORMAT(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__DISPLAY_AREA_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::DISPLAY_AREA_NAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__DISPLAY_CASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::DISPLAY_CASH(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x170F541E1CADD1DE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x170F541E1CADD1DE(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___SET_SINGLEPLAYER_HUD_CASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::_SET_SINGLEPLAYER_HUD_CASH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__DISPLAY_AMMO_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::DISPLAY_AMMO_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__DISPLAY_SNIPER_SCOPE_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::DISPLAY_SNIPER_SCOPE_THIS_FRAME();
  return mrb_nil_value();
}

mrb_value mruby__UI__HIDE_HUD_AND_RADAR_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::HIDE_HUD_AND_RADAR_THIS_FRAME();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xE67C6DFD386EA5E7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0xE67C6DFD386EA5E7(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xC2D15BEF167E27BC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xC2D15BEF167E27BC();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x95CF81BD06EE1887(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x95CF81BD06EE1887();
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_MULTIPLAYER_BANK_CASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::SET_MULTIPLAYER_BANK_CASH();
  return mrb_nil_value();
}

mrb_value mruby__UI__REMOVE_MULTIPLAYER_BANK_CASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::REMOVE_MULTIPLAYER_BANK_CASH();
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_MULTIPLAYER_HUD_CASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::SET_MULTIPLAYER_HUD_CASH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__REMOVE_MULTIPLAYER_HUD_CASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::REMOVE_MULTIPLAYER_HUD_CASH();
  return mrb_nil_value();
}

mrb_value mruby__UI__HIDE_HELP_TEXT_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::HIDE_HELP_TEXT_THIS_FRAME();
  return mrb_nil_value();
}

mrb_value mruby__UI__DISPLAY_HELP_TEXT_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_get_args(mrb,"sb",&a0, &a0_size, &a1);
  UI::DISPLAY_HELP_TEXT_THIS_FRAME((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___SHOW_WEAPON_WHEEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_SHOW_WEAPON_WHEEL(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x0AFC4AF510774B47(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x0AFC4AF510774B47();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xA48931185F0536FE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Hash r0 = UI::_0xA48931185F0536FE();
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__UI___0x72C1056D678BB7D8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x72C1056D678BB7D8(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xA13E93403F26C812(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = UI::_0xA13E93403F26C812(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x14C9FDCC41F81F63(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x14C9FDCC41F81F63(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_GPS_FLAGS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  UI::SET_GPS_FLAGS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__CLEAR_GPS_FLAGS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::CLEAR_GPS_FLAGS();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x1EAC5F91BCBC5073(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x1EAC5F91BCBC5073(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__CLEAR_GPS_RACE_TRACK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::CLEAR_GPS_RACE_TRACK();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xDB34E8D56FC13B08(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  UI::_0xDB34E8D56FC13B08(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x311438A071DD9B1A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  UI::_0x311438A071DD9B1A(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x900086F371220B6F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"bii",&a0, &a1, &a2);
  UI::_0x900086F371220B6F(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xE6DE0561D9232A64(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xE6DE0561D9232A64();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x3D3D15AF7BCAAF83(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  UI::_0x3D3D15AF7BCAAF83(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xA905192A6781C41B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  UI::_0xA905192A6781C41B(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x3DDA37128DD1ACA8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x3DDA37128DD1ACA8(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x67EEDEA1B9BAFD94(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x67EEDEA1B9BAFD94();
  return mrb_nil_value();
}

mrb_value mruby__UI__CLEAR_GPS_PLAYER_WAYPOINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::CLEAR_GPS_PLAYER_WAYPOINT();
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_GPS_FLASHES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::SET_GPS_FLASHES(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x7B21E0BB01E8224A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x7B21E0BB01E8224A(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__FLASH_MINIMAP_DISPLAY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::FLASH_MINIMAP_DISPLAY();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x6B1DE27EE78E6A19(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x6B1DE27EE78E6A19(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__TOGGLE_STEALTH_RADAR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::TOGGLE_STEALTH_RADAR(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__KEY_HUD_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_int a1;
  mrb_get_args(mrb,"bi",&a0, &a1);
  UI::KEY_HUD_COLOUR(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_MISSION_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"bs",&a0, &a1, &a1_size);
  UI::SET_MISSION_NAME(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_MINIMAP_BLOCK_WAYPOINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::SET_MINIMAP_BLOCK_WAYPOINT(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___SET_DRAW_MAP_VISIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_SET_DRAW_MAP_VISIBLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xF8DEE0A5600CBB93(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0xF8DEE0A5600CBB93(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xE0130B41D3CF4574(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0xE0130B41D3CF4574();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x6E31B91145873922(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  mrb_bool r0 = UI::_0x6E31B91145873922(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___0x62E849B7EB28E770(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x62E849B7EB28E770(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x0923DBF87DFF735E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  UI::_0x0923DBF87DFF735E(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x71BDB63DBAF8DA59(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x71BDB63DBAF8DA59(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x35EDD5B2E3FF01C0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x35EDD5B2E3FF01C0();
  return mrb_nil_value();
}

mrb_value mruby__UI__LOCK_MINIMAP_ANGLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::LOCK_MINIMAP_ANGLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__UNLOCK_MINIMAP_ANGLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::UNLOCK_MINIMAP_ANGLE();
  return mrb_nil_value();
}

mrb_value mruby__UI__LOCK_MINIMAP_POSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  UI::LOCK_MINIMAP_POSITION(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__UNLOCK_MINIMAP_POSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::UNLOCK_MINIMAP_POSITION();
  return mrb_nil_value();
}

mrb_value mruby__UI___SET_MINIMAP_ATTITUDE_INDICATOR_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_int a1;
  mrb_get_args(mrb,"fi",&a0, &a1);
  UI::_SET_MINIMAP_ATTITUDE_INDICATOR_LEVEL(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x3F5CC444DCAAA8F2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  UI::_0x3F5CC444DCAAA8F2(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x975D66A0BC17064C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x975D66A0BC17064C(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x06A320535F5F0248(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x06A320535F5F0248(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___SET_RADAR_BIGMAP_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  UI::_SET_RADAR_BIGMAP_ENABLED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__IS_HUD_COMPONENT_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::IS_HUD_COMPONENT_ACTIVE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__IS_SCRIPTED_HUD_COMPONENT_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::IS_SCRIPTED_HUD_COMPONENT_ACTIVE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x09C0403ED9A751C2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::_0x09C0403ED9A751C2(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__HIDE_HUD_COMPONENT_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::HIDE_HUD_COMPONENT_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__SHOW_HUD_COMPONENT_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::SHOW_HUD_COMPONENT_THIS_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xA4DEDE28B1814289(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xA4DEDE28B1814289();
  return mrb_nil_value();
}

mrb_value mruby__UI__RESET_RETICULE_VALUES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::RESET_RETICULE_VALUES();
  return mrb_nil_value();
}

mrb_value mruby__UI__RESET_HUD_COMPONENT_VALUES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::RESET_HUD_COMPONENT_VALUES(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_HUD_COMPONENT_POSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"iff",&a0, &a1, &a2);
  UI::SET_HUD_COMPONENT_POSITION(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UI__GET_HUD_COMPONENT_POSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = UI::GET_HUD_COMPONENT_POSITION(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__UI___0xB57D8DD645CFA2CF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xB57D8DD645CFA2CF();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x523A590C1A3CC0D3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x523A590C1A3CC0D3();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xEE4C0E6DBC6F2C6F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xEE4C0E6DBC6F2C6F();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x9135584D09A3437E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x9135584D09A3437E();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x2432784ACA090DA4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::_0x2432784ACA090DA4(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___0x7679CC1BCEBE3D4C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"iff",&a0, &a1, &a2);
  UI::_0x7679CC1BCEBE3D4C(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x784BA7E0ECEB4178(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  UI::_0x784BA7E0ECEB4178(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xB094BC1DB4018240(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"iiff",&a0, &a1, &a2, &a3);
  UI::_0xB094BC1DB4018240(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x788E7FD431BD67F1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"iiiiii",&a0, &a1, &a2, &a3, &a4, &a5);
  UI::_0x788E7FD431BD67F1(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__UI__CLEAR_FLOATING_HELP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::CLEAR_FLOATING_HELP(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x6DD05E9D83EFA4C9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_bool a2;
  mrb_bool a3;
  char* a4;
  int a4_size;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_get_args(mrb,"isbbsiiii",&a0, &a1, &a1_size, &a2, &a3, &a4, &a4_size, &a5, &a6, &a7, &a8);
  UI::_0x6DD05E9D83EFA4C9(a0, (a1_size == 0 ? 0 : a1), a2, a3, (a4_size == 0 ? 0 : a4), a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x6E0EB3EB47C8D7AA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::_0x6E0EB3EB47C8D7AA();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___CREATE_HEAD_DISPLAY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_bool a2;
  mrb_bool a3;
  char* a4;
  int a4_size;
  mrb_int a5;
  mrb_get_args(mrb,"isbbsi",&a0, &a1, &a1_size, &a2, &a3, &a4, &a4_size, &a5);
  mrb_int r0 = UI::_CREATE_HEAD_DISPLAY(a0, (a1_size == 0 ? 0 : a1), a2, a3, (a4_size == 0 ? 0 : a4), a5);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x31698AA80E0223F8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x31698AA80E0223F8(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___HAS_HEAD_DISPLAY_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::_HAS_HEAD_DISPLAY_LOADED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI__ADD_TREVOR_RANDOM_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::ADD_TREVOR_RANDOM_MODIFIER(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___SET_HEAD_DISPLAY_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  UI::_SET_HEAD_DISPLAY_FLAG(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xEE76FF7E6A0166B0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::_0xEE76FF7E6A0166B0(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xA67F9C46D612B6F1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::_0xA67F9C46D612B6F1(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x613ED644950626AE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  UI::_0x613ED644950626AE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x3158C77A7E888AB4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::_0x3158C77A7E888AB4(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xD48FE545CD46F857(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  UI::_0xD48FE545CD46F857(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UI___SET_HEAD_DISPLAY_WANTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::_SET_HEAD_DISPLAY_WANTED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___SET_HEAD_DISPLAY_STRING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  UI::_SET_HEAD_DISPLAY_STRING(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__UI___0xEB709A36958ABE0D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::_0xEB709A36958ABE0D(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___0x7B7723747CCB55B6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  UI::_0x7B7723747CCB55B6(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__UI___0x01A358D9128B7A86(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x01A358D9128B7A86();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__GET_CURRENT_WEBSITE_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = UI::GET_CURRENT_WEBSITE_ID();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0xE3B05614DCE1D014(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = UI::_0xE3B05614DCE1D014(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0xB99C4E4D9499DF29(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0xB99C4E4D9499DF29(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xAF42195A42C63BBA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0xAF42195A42C63BBA();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0xDAF87174BE7454FF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::_0xDAF87174BE7454FF(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___0x6EF54AB721DC6242(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x6EF54AB721DC6242();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xE18B138FABC53103(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::_0xE18B138FABC53103();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___0x7792424AA0EAC32E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x7792424AA0EAC32E();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x5354C5BA2EA868A4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x5354C5BA2EA868A4(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x1EAE6DD17B7A5EFA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x1EAE6DD17B7A5EFA(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x551DF99658DB6EE8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  Any r0 = UI::_0x551DF99658DB6EE8(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x2708FC083123F9FF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x2708FC083123F9FF();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x1121BFA1A1A522A8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x1121BFA1A1A522A8();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x82CEDC33687E1F50(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x82CEDC33687E1F50(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x211C4EF450086857(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x211C4EF450086857();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xBF4F34A85CA2970C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xBF4F34A85CA2970C();
  return mrb_nil_value();
}

mrb_value mruby__UI__ACTIVATE_FRONTEND_MENU(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_get_args(mrb,"ibi",&a0, &a1, &a2);
  UI::ACTIVATE_FRONTEND_MENU(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UI__RESTART_FRONTEND_MENU(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::RESTART_FRONTEND_MENU(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x2309595AD6145265(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Hash r0 = UI::_0x2309595AD6145265();
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__UI__SET_PAUSE_MENU_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::SET_PAUSE_MENU_ACTIVE(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__DISABLE_FRONTEND_THIS_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::DISABLE_FRONTEND_THIS_FRAME();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xBA751764F0821256(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xBA751764F0821256();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xCC3FDDED67BCFC63(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xCC3FDDED67BCFC63();
  return mrb_nil_value();
}

mrb_value mruby__UI__SET_FRONTEND_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::SET_FRONTEND_ACTIVE(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__IS_PAUSE_MENU_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::IS_PAUSE_MENU_ACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___0x2F057596F2BD0061(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x2F057596F2BD0061();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__GET_PAUSE_MENU_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = UI::GET_PAUSE_MENU_STATE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x5BFF36D6ED83E0AE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Vector3 r0 = UI::_0x5BFF36D6ED83E0AE();
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__UI__IS_PAUSE_MENU_RESTARTING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::IS_PAUSE_MENU_RESTARTING();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___0x2162C446DFDF38FD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x2162C446DFDF38FD(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x77F16B447824DA6C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x77F16B447824DA6C(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xCDCA26E80FAECB8F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xCDCA26E80FAECB8F();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xDD564BDD0472C936(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0xDD564BDD0472C936(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__OBJECT_DECAL_TOGGLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::OBJECT_DECAL_TOGGLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x84698AB38D0C6636(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::_0x84698AB38D0C6636(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___0x2A25ADC48F87841F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x2A25ADC48F87841F();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0xDE03620F8703A9DF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0xDE03620F8703A9DF();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x359AF31A4B52F5ED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x359AF31A4B52F5ED();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x13C4B962653A5280(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x13C4B962653A5280();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI__ENABLE_DEATHBLOOD_SEETHROUGH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::ENABLE_DEATHBLOOD_SEETHROUGH(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xC78E239AC5B2DDB9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"bii",&a0, &a1, &a2);
  UI::_0xC78E239AC5B2DDB9(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xF06EBB91A81E09E3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0xF06EBB91A81E09E3(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x3BAB9A4E4F2FF5C7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x3BAB9A4E4F2FF5C7();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0xEC9264727EEC0F28(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xEC9264727EEC0F28();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x14621BB1DF14E2B2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x14621BB1DF14E2B2();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x66E7CB63C97B7D20(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x66E7CB63C97B7D20();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x593FEAE1F73392D4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x593FEAE1F73392D4();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x4E3CD0EF8A489541(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x4E3CD0EF8A489541();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0xF284AC67940C6812(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0xF284AC67940C6812();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x2E22FEFA0100275E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x2E22FEFA0100275E();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x0CF54F20DE43879C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UI::_0x0CF54F20DE43879C(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI__CLEAR_PED_IN_PAUSE_MENU(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::CLEAR_PED_IN_PAUSE_MENU();
  return mrb_nil_value();
}

mrb_value mruby__UI__GIVE_PED_TO_PAUSE_MENU(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::GIVE_PED_TO_PAUSE_MENU(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x3CA6050692BC61B0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x3CA6050692BC61B0(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xECF128344E9FF9F1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0xECF128344E9FF9F1(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___SHOW_SOCIAL_CLUB_LEGAL_SCREEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_SHOW_SOCIAL_CLUB_LEGAL_SCREEN();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xF13FE2A80C05C561(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0xF13FE2A80C05C561();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x6F72CD94F7B5B68C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0x6F72CD94F7B5B68C();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x75D3691713C3B05A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x75D3691713C3B05A();
  return mrb_nil_value();
}

mrb_value mruby__UI___0xD2B32BE3FC1626C6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0xD2B32BE3FC1626C6();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x9E778248D6685FE0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  UI::_0x9E778248D6685FE0((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__UI___0xC406BE343FC4B9AF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0xC406BE343FC4B9AF();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x1185A8087587322C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x1185A8087587322C(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x8817605C2BA76200(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x8817605C2BA76200();
  return mrb_nil_value();
}

mrb_value mruby__UI___IS_TEXT_CHAT_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UI::_IS_TEXT_CHAT_ACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___ABORT_TEXT_CHAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_ABORT_TEXT_CHAT();
  return mrb_nil_value();
}

mrb_value mruby__UI___SET_TEXT_CHAT_UNK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_SET_TEXT_CHAT_UNK(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xCEF214315D276FD1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0xCEF214315D276FD1(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0xD30C50DF888D58B5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::_0xD30C50DF888D58B5(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__DOES_PED_HAVE_AI_BLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UI::DOES_PED_HAVE_AI_BLIP(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UI___0xE52B8E7F85D39A08(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UI::_0xE52B8E7F85D39A08(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI__HIDE_SPECIAL_ABILITY_LOCKON_OPERATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::HIDE_SPECIAL_ABILITY_LOCKON_OPERATION(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x0C4BBF625CA98C4E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  UI::_0x0C4BBF625CA98C4E(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x97C65887D4B37FA9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  UI::_0x97C65887D4B37FA9(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x7CD934010E115C2C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = UI::_0x7CD934010E115C2C(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x56176892826A4FE8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = UI::_0x56176892826A4FE8(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0xA277800A9EAE340E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UI::_0xA277800A9EAE340E();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UI___0x2632482FD6B9AB87(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UI::_0x2632482FD6B9AB87();
  return mrb_nil_value();
}

mrb_value mruby__UI___0x808519373FD336A3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x808519373FD336A3(a0);
  return mrb_nil_value();
}

mrb_value mruby__UI___0x04655F9D075D0AE5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UI::_0x04655F9D075D0AE5(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_DEBUG_LINE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_get_args(mrb,"ffffffiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  GRAPHICS::DRAW_DEBUG_LINE(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_DEBUG_LINE_WITH_TWO_COLOURS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_int a10;
  mrb_int a11;
  mrb_int a12;
  mrb_int a13;
  mrb_get_args(mrb,"ffffffiiiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13);
  GRAPHICS::DRAW_DEBUG_LINE_WITH_TWO_COLOURS(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_DEBUG_SPHERE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_get_args(mrb,"ffffiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  GRAPHICS::DRAW_DEBUG_SPHERE(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_DEBUG_BOX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_get_args(mrb,"ffffffiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  GRAPHICS::DRAW_DEBUG_BOX(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_DEBUG_CROSS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_get_args(mrb,"ffffiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  GRAPHICS::DRAW_DEBUG_CROSS(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_DEBUG_TEXT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_get_args(mrb,"sfffiiii",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  GRAPHICS::DRAW_DEBUG_TEXT((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_DEBUG_TEXT_2D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_get_args(mrb,"sfffiiii",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  GRAPHICS::DRAW_DEBUG_TEXT_2D((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_LINE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_get_args(mrb,"ffffffiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  GRAPHICS::DRAW_LINE(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_POLY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_int a9;
  mrb_int a10;
  mrb_int a11;
  mrb_int a12;
  mrb_get_args(mrb,"fffffffffiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12);
  GRAPHICS::DRAW_POLY(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_BOX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_get_args(mrb,"ffffffiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  GRAPHICS::DRAW_BOX(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x23BA6B0C2AD7B0D3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0x23BA6B0C2AD7B0D3(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x1DD2139A9A20DCE8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0x1DD2139A9A20DCE8();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x90A78ECAA4E78453(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0x90A78ECAA4E78453();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x0A46AF8A78DC5E0A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x0A46AF8A78DC5E0A();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x4862437A486F91B0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  mrb_bool r0 = GRAPHICS::_0x4862437A486F91B0(&a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0x1670F8D05056F257(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = GRAPHICS::_0x1670F8D05056F257(&a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x7FA5D82B8F58EC06(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0x7FA5D82B8F58EC06();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x5B0316762AFD4A64(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0x5B0316762AFD4A64();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x346EF3ECAAAB149E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x346EF3ECAAAB149E();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xA67C35C56EB1BD9D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0xA67C35C56EB1BD9D();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x0D6CA79EEEBD8CA3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0x0D6CA79EEEBD8CA3();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0xD801CC02177FA3F1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0xD801CC02177FA3F1();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x1BBC135A4D25EDDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0x1BBC135A4D25EDDE(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x3DEC726C25A11BAC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = GRAPHICS::_0x3DEC726C25A11BAC(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x0C0C4E81E1AC60A0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0x0C0C4E81E1AC60A0();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x759650634F07B6B4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GRAPHICS::_0x759650634F07B6B4(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0xCB82A0BF0E3E3265(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = GRAPHICS::_0xCB82A0BF0E3E3265(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x6A12D88881435DCA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x6A12D88881435DCA();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x1072F115DAB0717E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  GRAPHICS::_0x1072F115DAB0717E(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__GET_MAXIMUM_NUMBER_OF_PHOTOS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = GRAPHICS::GET_MAXIMUM_NUMBER_OF_PHOTOS();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0xDC54A7AF8B3A14EF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0xDC54A7AF8B3A14EF();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x473151EBC762C6DA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0x473151EBC762C6DA();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x2A893980E96B659A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = GRAPHICS::_0x2A893980E96B659A(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0xF5BED327CEA362B1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = GRAPHICS::_0xF5BED327CEA362B1(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x4AF92ACD3141D96C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x4AF92ACD3141D96C();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xE791DF1F73ED2C8B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = GRAPHICS::_0xE791DF1F73ED2C8B(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0xEC72C258667BE5EA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = GRAPHICS::_0xEC72C258667BE5EA(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x40AFB081F8ADD4EE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = GRAPHICS::_0x40AFB081F8ADD4EE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___DRAW_LIGHT_WITH_RANGE_WITH_SHADOW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_get_args(mrb,"fffiiifff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  GRAPHICS::_DRAW_LIGHT_WITH_RANGE_WITH_SHADOW(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_LIGHT_WITH_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_float a6;
  mrb_float a7;
  mrb_get_args(mrb,"fffiiiff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  GRAPHICS::DRAW_LIGHT_WITH_RANGE(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_SPOT_LIGHT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_float a9;
  mrb_float a10;
  mrb_float a11;
  mrb_float a12;
  mrb_float a13;
  mrb_get_args(mrb,"ffffffiiifffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13);
  GRAPHICS::DRAW_SPOT_LIGHT(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___DRAW_SPOT_LIGHT_WITH_SHADOW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_float a9;
  mrb_float a10;
  mrb_float a11;
  mrb_float a12;
  mrb_float a13;
  mrb_float a14;
  mrb_get_args(mrb,"ffffffiiiffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14);
  GRAPHICS::_DRAW_SPOT_LIGHT_WITH_SHADOW(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xC9B18B4619F48F7B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0xC9B18B4619F48F7B(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xDEADC0DEDEADC0DE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0xDEADC0DEDEADC0DE(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_MARKER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_float a11;
  mrb_float a12;
  mrb_int a13;
  mrb_int a14;
  mrb_int a15;
  mrb_int a16;
  mrb_bool a17;
  mrb_bool a18;
  mrb_int a19;
  mrb_bool a20;
  char* a21;
  int a21_size;
  char* a22;
  int a22_size;
  mrb_bool a23;
  mrb_get_args(mrb,"iffffffffffffiiiibbibssb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14, &a15, &a16, &a17, &a18, &a19, &a20, &a21, &a21_size, &a22, &a22_size, &a23);
  GRAPHICS::DRAW_MARKER(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, (a21_size == 0 ? 0 : a21), (a22_size == 0 ? 0 : a22), a23);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__CREATE_CHECKPOINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_int a8;
  mrb_int a9;
  mrb_int a10;
  mrb_int a11;
  mrb_int a12;
  mrb_get_args(mrb,"ifffffffiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12);
  Any r0 = GRAPHICS::CREATE_CHECKPOINT(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x4B5B4DA5D79F1943(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  GRAPHICS::_0x4B5B4DA5D79F1943(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_CHECKPOINT_CYLINDER_HEIGHT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  GRAPHICS::SET_CHECKPOINT_CYLINDER_HEIGHT(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_CHECKPOINT_RGBA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  GRAPHICS::SET_CHECKPOINT_RGBA(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___SET_CHECKPOINT_ICON_RGBA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  GRAPHICS::_SET_CHECKPOINT_ICON_RGBA(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xF51D36185993515D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_get_args(mrb,"iiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  GRAPHICS::_0xF51D36185993515D(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x615D3925E87A3B26(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0x615D3925E87A3B26(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DELETE_CHECKPOINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::DELETE_CHECKPOINT(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x22A249A53034450A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0x22A249A53034450A(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xDC459CFA0CCE245B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0xDC459CFA0CCE245B(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__REQUEST_STREAMED_TEXTURE_DICT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_get_args(mrb,"sb",&a0, &a0_size, &a1);
  GRAPHICS::REQUEST_STREAMED_TEXTURE_DICT((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__HAS_STREAMED_TEXTURE_DICT_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = GRAPHICS::HAS_STREAMED_TEXTURE_DICT_LOADED((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS__SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GRAPHICS::SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_RECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_get_args(mrb,"ffffiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  GRAPHICS::DRAW_RECT(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xC6372ECD45D73BCD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0xC6372ECD45D73BCD(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x61BB1D9B3A95D802(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0x61BB1D9B3A95D802(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___SET_SCREEN_DRAW_POSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  GRAPHICS::_SET_SCREEN_DRAW_POSITION(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xE3A3DB414A373DAB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0xE3A3DB414A373DAB();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xF5A2C681787E579D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  GRAPHICS::_0xF5A2C681787E579D(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__GET_SAFE_ZONE_SIZE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::GET_SAFE_ZONE_SIZE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS__DRAW_SPRITE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_int a10;
  mrb_get_args(mrb,"ssfffffiiii",&a0, &a0_size, &a1, &a1_size, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10);
  GRAPHICS::DRAW_SPRITE((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1), a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__ADD_ENTITY_ICON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  Any r0 = GRAPHICS::ADD_ENTITY_ICON(a0, (a1_size == 0 ? 0 : a1));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS__SET_ENTITY_ICON_VISIBILITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  GRAPHICS::SET_ENTITY_ICON_VISIBILITY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_ENTITY_ICON_COLOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  GRAPHICS::SET_ENTITY_ICON_COLOR(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_DRAW_ORIGIN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_get_args(mrb,"fffi",&a0, &a1, &a2, &a3);
  GRAPHICS::SET_DRAW_ORIGIN(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__CLEAR_DRAW_ORIGIN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::CLEAR_DRAW_ORIGIN();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__ATTACH_TV_AUDIO_TO_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_TV_AUDIO_FRONTEND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::SET_TV_AUDIO_FRONTEND(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__LOAD_MOVIE_MESH_SET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = GRAPHICS::LOAD_MOVIE_MESH_SET(&a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS__RELEASE_MOVIE_MESH_SET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::RELEASE_MOVIE_MESH_SET(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x9B6E70C5CEEF4EEB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = GRAPHICS::_0x9B6E70C5CEEF4EEB(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___GET_SCREEN_ASPECT_RATIO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  mrb_float r0 = GRAPHICS::_GET_SCREEN_ASPECT_RATIO(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GRAPHICS___0xB2EBE8CBC58B90E9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0xB2EBE8CBC58B90E9();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS__GET_IS_WIDESCREEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GRAPHICS::GET_IS_WIDESCREEN();
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS__GET_IS_HIDEF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GRAPHICS::GET_IS_HIDEF();
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0xEFABC7722293DA7C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0xEFABC7722293DA7C();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_NIGHTVISION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::SET_NIGHTVISION(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x35FB78DC42B7BD21(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0x35FB78DC42B7BD21();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___IS_NIGHTVISION_INACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GRAPHICS::_IS_NIGHTVISION_INACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0xEF398BEEE4EF45F9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0xEF398BEEE4EF45F9(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_NOISEOVERIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::SET_NOISEOVERIDE(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_NOISINESSOVERIDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::SET_NOISINESSOVERIDE(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__GET_TEXTURE_RESOLUTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"ss",&a0, &a0_size, &a1, &a1_size);
  Vector3 r0 = GRAPHICS::GET_TEXTURE_RESOLUTION((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1));
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__GRAPHICS___0xE2892E7E55D7073A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0xE2892E7E55D7073A(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_FLASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"fffff",&a0, &a1, &a2, &a3, &a4);
  GRAPHICS::SET_FLASH(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x3669F1B198DCAA4F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x3669F1B198DCAA4F();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___SET_BLACKOUT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_SET_BLACKOUT(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xC35A6D07C93802B2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0xC35A6D07C93802B2();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__CREATE_TRACKED_POINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Object r0 = GRAPHICS::CREATE_TRACKED_POINT();
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Object"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__GRAPHICS__SET_TRACKED_POINT_INFO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  GRAPHICS::SET_TRACKED_POINT_INFO(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__IS_TRACKED_POINT_VISIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GRAPHICS::IS_TRACKED_POINT_VISIBLE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS__DESTROY_TRACKED_POINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::DESTROY_TRACKED_POINT(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xBE197EAA669238F4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  Any r0 = GRAPHICS::_0xBE197EAA669238F4(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x61F95E5BB3E0A8C6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0x61F95E5BB3E0A8C6(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xAE51BC858F32BA66(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  GRAPHICS::_0xAE51BC858F32BA66(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x649C97D52332341A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0x649C97D52332341A(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x2C42340F916C5930(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = GRAPHICS::_0x2C42340F916C5930(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x14FC5833464340A8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x14FC5833464340A8();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x0218BA067D249DEA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x0218BA067D249DEA();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x1612C45F9E3E0D44(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x1612C45F9E3E0D44();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x5DEBD9C4DC995692(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x5DEBD9C4DC995692();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x6D955F6A9E0295B1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_get_args(mrb,"iiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  GRAPHICS::_0x6D955F6A9E0295B1(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x302C91AB2D477F7E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x302C91AB2D477F7E();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x03FC694AE06C5A20(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x03FC694AE06C5A20();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xD2936CAB8B58FCBD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_float a7;
  mrb_get_args(mrb,"ibffffbf",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  GRAPHICS::_0xD2936CAB8B58FCBD(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x5F0F3F56635809EF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0x5F0F3F56635809EF(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x5E9DAF5A20F15908(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0x5E9DAF5A20F15908(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x36F6626459D91457(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0x36F6626459D91457(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___SET_FAR_SHADOWS_SUPPRESSED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_SET_FAR_SHADOWS_SUPPRESSED(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x25FC3E33A31AD0C9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0x25FC3E33A31AD0C9(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xB11D94BC55F41932(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GRAPHICS::_0xB11D94BC55F41932((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x27CB772218215325(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x27CB772218215325();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x6DDBF9DFFC4AC080(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0x6DDBF9DFFC4AC080(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xD39D13C9FEBF0511(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0xD39D13C9FEBF0511(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x02AC28F3A01FA04A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0x02AC28F3A01FA04A(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x0AE73D8DF3A762B2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0x0AE73D8DF3A762B2(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xA51C4B86B71652AE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0xA51C4B86B71652AE(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x312342E1A4874F3F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_bool a8;
  mrb_get_args(mrb,"ffffffffb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  GRAPHICS::_0x312342E1A4874F3F(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x2485D34E50A22E84(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  GRAPHICS::_0x2485D34E50A22E84(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x12995F2E53FFA601(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_int a10;
  mrb_int a11;
  mrb_get_args(mrb,"iiiiiiiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  GRAPHICS::_0x12995F2E53FFA601(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xDBAA5EC848BA2D46(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  GRAPHICS::_0xDBAA5EC848BA2D46(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xC0416B061F2B7E5E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0xC0416B061F2B7E5E(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xB1BB03742917A5D6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_get_args(mrb,"iffffiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  GRAPHICS::_0xB1BB03742917A5D6(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x9CFDD90B2B844BF7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"fffff",&a0, &a1, &a2, &a3, &a4);
  GRAPHICS::_0x9CFDD90B2B844BF7(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x06F761EA47C1D3ED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0x06F761EA47C1D3ED(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xA4819F5E23E2FFAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0xA4819F5E23E2FFAD();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0xA4664972A9B8F8BA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = GRAPHICS::_0xA4664972A9B8F8BA(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__GRAPHICS__SET_SEETHROUGH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::SET_SEETHROUGH(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___IS_SEETHROUGH_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = GRAPHICS::_IS_SEETHROUGH_ACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0xD7D0B00177485411(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  GRAPHICS::_0xD7D0B00177485411(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xB3C641F3630BF6DA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0xB3C641F3630BF6DA(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xE59343E9E96529E7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0xE59343E9E96529E7();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0xE63D7C6EECECB66B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0xE63D7C6EECECB66B(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xE3E2C1B4C59DBC77(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0xE3E2C1B4C59DBC77(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___TRANSITION_TO_BLURRED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  mrb_bool r0 = GRAPHICS::_TRANSITION_TO_BLURRED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___TRANSITION_FROM_BLURRED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  mrb_bool r0 = GRAPHICS::_TRANSITION_FROM_BLURRED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0xDE81239437E8C5A8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0xDE81239437E8C5A8();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__IS_PARTICLE_FX_DELAYED_BLINK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float r0 = GRAPHICS::IS_PARTICLE_FX_DELAYED_BLINK();
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GRAPHICS___0x7B226C785A52A0A9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0x7B226C785A52A0A9();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___SET_FROZEN_RENDERING_DISABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_SET_FROZEN_RENDERING_DISABLED(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xEB3DAC2C86001E5E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0xEB3DAC2C86001E5E();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0xE1C8709406F2C41C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0xE1C8709406F2C41C();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x851CD923176EBA7C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x851CD923176EBA7C();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xBA3D65906822BED5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"bbffff",&a0, &a1, &a2, &a3, &a4, &a5);
  GRAPHICS::_0xBA3D65906822BED5(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x7AC24EAB6D74118D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  mrb_bool r0 = GRAPHICS::_0x7AC24EAB6D74118D(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0xBCEDB009461DA156(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0xBCEDB009461DA156();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x27FEB5254759CDE3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_bool a1;
  mrb_get_args(mrb,"sb",&a0, &a0_size, &a1);
  mrb_bool r0 = GRAPHICS::_0x27FEB5254759CDE3((a0_size == 0 ? 0 : a0), a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS__START_PARTICLE_FX_NON_LOOPED_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_bool a8;
  mrb_bool a9;
  mrb_bool a10;
  mrb_get_args(mrb,"sfffffffbbb",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10);
  mrb_bool r0 = GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___START_PARTICLE_FX_NON_LOOPED_AT_COORD_2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_bool a8;
  mrb_bool a9;
  mrb_bool a10;
  mrb_get_args(mrb,"sfffffffbbb",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10);
  mrb_bool r0 = GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS__START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_int a8;
  mrb_float a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_bool a12;
  mrb_get_args(mrb,"siffffffifbbb",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12);
  mrb_bool r0 = GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE_2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_int a8;
  mrb_float a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_bool a12;
  mrb_get_args(mrb,"siffffffifbbb",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12);
  mrb_bool r0 = GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE_2((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS__START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_bool a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_get_args(mrb,"sifffffffbbb",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  mrb_bool r0 = GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_bool a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_get_args(mrb,"sifffffffbbb",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  mrb_bool r0 = GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_2((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS__SET_PARTICLE_FX_NON_LOOPED_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  GRAPHICS::SET_PARTICLE_FX_NON_LOOPED_COLOUR(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_PARTICLE_FX_NON_LOOPED_ALPHA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::SET_PARTICLE_FX_NON_LOOPED_ALPHA(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__START_PARTICLE_FX_LOOPED_AT_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_bool a8;
  mrb_bool a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_get_args(mrb,"sfffffffbbbb",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  Any r0 = GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS__START_PARTICLE_FX_LOOPED_ON_PED_BONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_int a8;
  mrb_float a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_bool a12;
  mrb_get_args(mrb,"siffffffifbbb",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12);
  Any r0 = GRAPHICS::START_PARTICLE_FX_LOOPED_ON_PED_BONE((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS__START_PARTICLE_FX_LOOPED_ON_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_bool a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_get_args(mrb,"sifffffffbbb",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  Any r0 = GRAPHICS::START_PARTICLE_FX_LOOPED_ON_ENTITY((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_int a8;
  mrb_float a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_bool a12;
  mrb_get_args(mrb,"siffffffifbbb",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12);
  Any r0 = GRAPHICS::_START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___START_PARTICLE_FX_LOOPED_ON_ENTITY_2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_bool a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_get_args(mrb,"sifffffffbbb",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  Any r0 = GRAPHICS::_START_PARTICLE_FX_LOOPED_ON_ENTITY_2((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE_2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_int a8;
  mrb_float a9;
  mrb_bool a10;
  mrb_bool a11;
  mrb_bool a12;
  mrb_get_args(mrb,"siffffffifbbb",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12);
  Any r0 = GRAPHICS::_START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE_2((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS__STOP_PARTICLE_FX_LOOPED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  GRAPHICS::STOP_PARTICLE_FX_LOOPED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__REMOVE_PARTICLE_FX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  GRAPHICS::REMOVE_PARTICLE_FX(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__REMOVE_PARTICLE_FX_FROM_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::REMOVE_PARTICLE_FX_FROM_ENTITY(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__REMOVE_PARTICLE_FX_IN_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  GRAPHICS::REMOVE_PARTICLE_FX_IN_RANGE(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DOES_PARTICLE_FX_LOOPED_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GRAPHICS::DOES_PARTICLE_FX_LOOPED_EXIST(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS__SET_PARTICLE_FX_LOOPED_OFFSETS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_get_args(mrb,"iffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  GRAPHICS::SET_PARTICLE_FX_LOOPED_OFFSETS(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_PARTICLE_FX_LOOPED_EVOLUTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_bool a3;
  mrb_get_args(mrb,"isfb",&a0, &a1, &a1_size, &a2, &a3);
  GRAPHICS::SET_PARTICLE_FX_LOOPED_EVOLUTION(a0, (a1_size == 0 ? 0 : a1), a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_PARTICLE_FX_LOOPED_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ifffb",&a0, &a1, &a2, &a3, &a4);
  GRAPHICS::SET_PARTICLE_FX_LOOPED_COLOUR(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_PARTICLE_FX_LOOPED_ALPHA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  GRAPHICS::SET_PARTICLE_FX_LOOPED_ALPHA(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_PARTICLE_FX_LOOPED_SCALE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  GRAPHICS::SET_PARTICLE_FX_LOOPED_SCALE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___SET_PARTICLE_FX_LOOPED_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  GRAPHICS::_SET_PARTICLE_FX_LOOPED_RANGE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  GRAPHICS::SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_PARTICLE_FX_SHOOTOUT_BOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::SET_PARTICLE_FX_SHOOTOUT_BOAT(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_PARTICLE_FX_BLOOD_SCALE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::SET_PARTICLE_FX_BLOOD_SCALE(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__ENABLE_CLOWN_BLOOD_VFX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::ENABLE_CLOWN_BLOOD_VFX(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__ENABLE_ALIEN_BLOOD_VFX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::ENABLE_ALIEN_BLOOD_VFX(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x27E32866E9A5C416(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0x27E32866E9A5C416(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xBB90E12CAC1DAB25(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0xBB90E12CAC1DAB25(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xCA4AE345A153D573(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0xCA4AE345A153D573(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x54E22EA2C1956A8D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0x54E22EA2C1956A8D(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x949F397A288B28B3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0x949F397A288B28B3(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x9B079E5221D984D3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0x9B079E5221D984D3(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___SET_PTFX_ASSET_NEXT_CALL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___SET_PTFX_ASSET_OLD_TO_NEW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"ss",&a0, &a0_size, &a1, &a1_size);
  GRAPHICS::_SET_PTFX_ASSET_OLD_TO_NEW((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x89C8553DD3274AAE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GRAPHICS::_0x89C8553DD3274AAE((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xA46B73FAA3460AE1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0xA46B73FAA3460AE1(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xF78B803082D4386F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0xF78B803082D4386F(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__WASH_DECALS_IN_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  GRAPHICS::WASH_DECALS_IN_RANGE(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__WASH_DECALS_FROM_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  GRAPHICS::WASH_DECALS_FROM_VEHICLE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__FADE_DECALS_IN_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  GRAPHICS::FADE_DECALS_IN_RANGE(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__REMOVE_DECALS_IN_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  GRAPHICS::REMOVE_DECALS_IN_RANGE(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__REMOVE_DECALS_FROM_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::REMOVE_DECALS_FROM_OBJECT(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__REMOVE_DECALS_FROM_OBJECT_FACING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  GRAPHICS::REMOVE_DECALS_FROM_OBJECT_FACING(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__REMOVE_DECALS_FROM_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::REMOVE_DECALS_FROM_VEHICLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__ADD_DECAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_float a11;
  mrb_float a12;
  mrb_float a13;
  mrb_float a14;
  mrb_float a15;
  mrb_float a16;
  mrb_bool a17;
  mrb_bool a18;
  mrb_bool a19;
  mrb_get_args(mrb,"iffffffffffffffffbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14, &a15, &a16, &a17, &a18, &a19);
  Any r0 = GRAPHICS::ADD_DECAL(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS__ADD_PETROL_DECAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"ffffff",&a0, &a1, &a2, &a3, &a4, &a5);
  Any r0 = GRAPHICS::ADD_PETROL_DECAL(a0, a1, a2, a3, a4, a5);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x99AC7F0D8B9C893D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0x99AC7F0D8B9C893D(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x967278682CB6967A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  GRAPHICS::_0x967278682CB6967A(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x0A123435A26C36CD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x0A123435A26C36CD();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__REMOVE_DECAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::REMOVE_DECAL(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__IS_DECAL_ALIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GRAPHICS::IS_DECAL_ALIVE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS__GET_DECAL_WASH_LEVEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = GRAPHICS::GET_DECAL_WASH_LEVEL(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GRAPHICS___0xD9454B5752C857DC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0xD9454B5752C857DC();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x27CFB1B1E078CB2D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x27CFB1B1E078CB2D();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x4B5CFC83122DF602(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x4B5CFC83122DF602();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x2F09F7976C512404(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  mrb_bool r0 = GRAPHICS::_0x2F09F7976C512404(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0xB7ED70C49521A61D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0xB7ED70C49521A61D(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__MOVE_VEHICLE_DECALS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  GRAPHICS::MOVE_VEHICLE_DECALS(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___ADD_CLAN_DECAL_TO_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_float a11;
  mrb_float a12;
  mrb_int a13;
  mrb_int a14;
  mrb_get_args(mrb,"iiiffffffffffii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13, &a14);
  mrb_bool r0 = GRAPHICS::_ADD_CLAN_DECAL_TO_VEHICLE(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0xD2300034310557E4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  GRAPHICS::_0xD2300034310557E4(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xFE26117A5841B2FF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = GRAPHICS::_0xFE26117A5841B2FF(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___HAS_VEHICLE_GOT_DECAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = GRAPHICS::_HAS_VEHICLE_GOT_DECAL(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0x0E4299C549F0D1F1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0x0E4299C549F0D1F1(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x02369D5C8A51FDCF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0x02369D5C8A51FDCF(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x46D1A61A21F566FC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0x46D1A61A21F566FC(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x2A2A52824DB96700(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0x2A2A52824DB96700(&a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x1600FD8CF72EBC12(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0x1600FD8CF72EBC12(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xEFB55E7C25D3B3BE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0xEFB55E7C25D3B3BE();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xA44FF770DFBC5DAE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0xA44FF770DFBC5DAE();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DISABLE_VEHICLE_DISTANTLIGHTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::DISABLE_VEHICLE_DISTANTLIGHTS(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x03300B57FCAC6DDB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0x03300B57FCAC6DDB(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x98EDF76A7271E4F2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x98EDF76A7271E4F2();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___SET_FORCE_PED_FOOTSTEPS_TRACKS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_SET_FORCE_PED_FOOTSTEPS_TRACKS(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___SET_FORCE_VEHICLE_TRAILS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_SET_FORCE_VEHICLE_TRAILS(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xD7021272EB0A451E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GRAPHICS::_0xD7021272EB0A451E((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_TIMECYCLE_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GRAPHICS::SET_TIMECYCLE_MODIFIER((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_TIMECYCLE_MODIFIER_STRENGTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::SET_TIMECYCLE_MODIFIER_STRENGTH(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__SET_TRANSITION_TIMECYCLE_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  mrb_get_args(mrb,"sf",&a0, &a0_size, &a1);
  GRAPHICS::SET_TRANSITION_TIMECYCLE_MODIFIER((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x1CBA05AE7BD7EE05(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0x1CBA05AE7BD7EE05(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__CLEAR_TIMECYCLE_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::CLEAR_TIMECYCLE_MODIFIER();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__GET_TIMECYCLE_MODIFIER_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x459FD2C8D0AB78BC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0x459FD2C8D0AB78BC();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS__PUSH_TIMECYCLE_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::PUSH_TIMECYCLE_MODIFIER();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__POP_TIMECYCLE_MODIFIER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::POP_TIMECYCLE_MODIFIER();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xBBF327DED94E4DEB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0xBBF327DED94E4DEB(&a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xBDEB86F4D5809204(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0xBDEB86F4D5809204(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xBF59707B3E5ED531(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0xBF59707B3E5ED531(&a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x15E33297C3E8DC60(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0x15E33297C3E8DC60(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x5096FD9CCB49056D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0x5096FD9CCB49056D(&a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x92CCC17A7A2285DA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x92CCC17A7A2285DA();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xBB0527EC6341496D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0xBB0527EC6341496D();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x2C328AF17210F009(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_0x2C328AF17210F009(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x2BF72AD5B41AA739(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x2BF72AD5B41AA739();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__REQUEST_SCALEFORM_MOVIE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  Any r0 = GRAPHICS::REQUEST_SCALEFORM_MOVIE((a0_size == 0 ? 0 : a0));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS__REQUEST_SCALEFORM_MOVIE_INSTANCE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  Any r0 = GRAPHICS::REQUEST_SCALEFORM_MOVIE_INSTANCE((a0_size == 0 ? 0 : a0));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___REQUEST_SCALEFORM_MOVIE3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  Any r0 = GRAPHICS::_REQUEST_SCALEFORM_MOVIE3((a0_size == 0 ? 0 : a0));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS__HAS_SCALEFORM_MOVIE_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GRAPHICS::HAS_SCALEFORM_MOVIE_LOADED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0x0C1C5D756FB5F337(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GRAPHICS::_0x0C1C5D756FB5F337(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS__HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GRAPHICS::HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS__SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  GRAPHICS::SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_SCALEFORM_MOVIE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_get_args(mrb,"iffffiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  GRAPHICS::DRAW_SCALEFORM_MOVIE(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_SCALEFORM_MOVIE_FULLSCREEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"iiiiii",&a0, &a1, &a2, &a3, &a4, &a5);
  GRAPHICS::DRAW_SCALEFORM_MOVIE_FULLSCREEN(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"iiiiii",&a0, &a1, &a2, &a3, &a4, &a5);
  GRAPHICS::DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__DRAW_SCALEFORM_MOVIE_3D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_float a11;
  mrb_float a12;
  mrb_int a13;
  mrb_get_args(mrb,"iffffffffffffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13);
  GRAPHICS::DRAW_SCALEFORM_MOVIE_3D(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___DRAW_SCALEFORM_MOVIE_3D_NON_ADDITIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_float a11;
  mrb_float a12;
  mrb_int a13;
  mrb_get_args(mrb,"iffffffffffffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13);
  GRAPHICS::_DRAW_SCALEFORM_MOVIE_3D_NON_ADDITIVE(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__CALL_SCALEFORM_MOVIE_METHOD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___CALL_SCALEFORM_MOVIE_FUNCTION_FLOAT_PARAMS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_get_args(mrb,"isfffff",&a0, &a1, &a1_size, &a2, &a3, &a4, &a5, &a6);
  GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_FLOAT_PARAMS(a0, (a1_size == 0 ? 0 : a1), a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___CALL_SCALEFORM_MOVIE_FUNCTION_STRING_PARAMS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  char* a3;
  int a3_size;
  char* a4;
  int a4_size;
  char* a5;
  int a5_size;
  char* a6;
  int a6_size;
  mrb_get_args(mrb,"issssss",&a0, &a1, &a1_size, &a2, &a2_size, &a3, &a3_size, &a4, &a4_size, &a5, &a5_size, &a6, &a6_size);
  GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_STRING_PARAMS(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), (a3_size == 0 ? 0 : a3), (a4_size == 0 ? 0 : a4), (a5_size == 0 ? 0 : a5), (a6_size == 0 ? 0 : a6));
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  char* a7;
  int a7_size;
  char* a8;
  int a8_size;
  char* a9;
  int a9_size;
  char* a10;
  int a10_size;
  char* a11;
  int a11_size;
  mrb_get_args(mrb,"isfffffsssss",&a0, &a1, &a1_size, &a2, &a3, &a4, &a5, &a6, &a7, &a7_size, &a8, &a8_size, &a9, &a9_size, &a10, &a10_size, &a11, &a11_size);
  GRAPHICS::_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS(a0, (a1_size == 0 ? 0 : a1), a2, a3, a4, a5, a6, (a7_size == 0 ? 0 : a7), (a8_size == 0 ? 0 : a8), (a9_size == 0 ? 0 : a9), (a10_size == 0 ? 0 : a10), (a11_size == 0 ? 0 : a11));
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___PUSH_SCALEFORM_MOVIE_FUNCTION_FROM_HUD_COMPONENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_bool r0 = GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_FROM_HUD_COMPONENT(a0, (a1_size == 0 ? 0 : a1));
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___PUSH_SCALEFORM_MOVIE_FUNCTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_bool r0 = GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION(a0, (a1_size == 0 ? 0 : a1));
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0xAB58C27C2E6123C6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = GRAPHICS::_0xAB58C27C2E6123C6((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0xB9449845F73F5E9C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = GRAPHICS::_0xB9449845F73F5E9C((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___POP_SCALEFORM_MOVIE_FUNCTION_VOID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION_VOID();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___POP_SCALEFORM_MOVIE_FUNCTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_POP_SCALEFORM_MOVIE_FUNCTION();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0x768FF8961BA904D6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GRAPHICS::_0x768FF8961BA904D6(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0x2DE7EFA66B906036(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = GRAPHICS::_0x2DE7EFA66B906036(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS__SITTING_TV(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  char* cstr = GRAPHICS::SITTING_TV(a0);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__GRAPHICS___PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_FLOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_FLOAT(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___BEGIN_TEXT_COMPONENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GRAPHICS::_BEGIN_TEXT_COMPONENT((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___END_TEXT_COMPONENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_END_TEXT_COMPONENT();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xAE4E8157D9ECF087(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0xAE4E8157D9ECF087();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GRAPHICS::_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xE83A3E3557A56640(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GRAPHICS::_0xE83A3E3557A56640((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x5E657EF1099EDD65(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GRAPHICS::_0x5E657EF1099EDD65(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0xEC52C631A1831C03(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0xEC52C631A1831C03(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___REQUEST_HUD_SCALEFORM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_REQUEST_HUD_SCALEFORM(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___HAS_HUD_SCALEFORM_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GRAPHICS::_HAS_HUD_SCALEFORM_LOADED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0xF44A5456AC3F4F97(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0xF44A5456AC3F4F97(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xD1C7CB175E012964(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GRAPHICS::_0xD1C7CB175E012964(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS__SET_TV_CHANNEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::SET_TV_CHANNEL(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__GET_TV_CHANNEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = GRAPHICS::GET_TV_CHANNEL();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS__SET_TV_VOLUME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  GRAPHICS::SET_TV_VOLUME(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__GET_TV_VOLUME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float r0 = GRAPHICS::GET_TV_VOLUME();
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__GRAPHICS__DRAW_TV_CHANNEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_get_args(mrb,"fffffiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  GRAPHICS::DRAW_TV_CHANNEL(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xF7B38B8305F1FE8B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_bool a2;
  mrb_get_args(mrb,"isb",&a0, &a1, &a1_size, &a2);
  GRAPHICS::_0xF7B38B8305F1FE8B(a0, (a1_size == 0 ? 0 : a1), a2);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xBEB3D46BB7F043C0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0xBEB3D46BB7F043C0(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x0AD973CA1E077B60(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GRAPHICS::_0x0AD973CA1E077B60(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0x74C180030FDE4B69(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0x74C180030FDE4B69(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xD1C55B110E4DF534(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0xD1C55B110E4DF534(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS__ENABLE_MOVIE_SUBTITLES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::ENABLE_MOVIE_SUBTITLES(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xD3A10FC7FD8D98CD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = GRAPHICS::_0xD3A10FC7FD8D98CD();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___0xF1CEA8A4198D8E9A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = GRAPHICS::_0xF1CEA8A4198D8E9A(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0x98C4FE6EC34154CA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"iiifff",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_bool r0 = GRAPHICS::_0x98C4FE6EC34154CA(&a0, a1, a2, a3, a4, a5);
  return mrb_bool_value(r0);
}

mrb_value mruby__GRAPHICS___0x7A42B2E236E71415(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_0x7A42B2E236E71415();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x108BE26959A9D9BB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0x108BE26959A9D9BB(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xA356990E161C9E65(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  GRAPHICS::_0xA356990E161C9E65(a0);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x1C4FC5752BCD8E48(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_float a11;
  mrb_float a12;
  mrb_get_args(mrb,"fffffffffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12);
  GRAPHICS::_0x1C4FC5752BCD8E48(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0x5CE62918F8D703C7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_int a10;
  mrb_int a11;
  mrb_get_args(mrb,"iiiiiiiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  GRAPHICS::_0x5CE62918F8D703C7(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___START_SCREEN_EFFECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"sib",&a0, &a0_size, &a1, &a2);
  GRAPHICS::_START_SCREEN_EFFECT((a0_size == 0 ? 0 : a0), a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___STOP_SCREEN_EFFECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  GRAPHICS::_STOP_SCREEN_EFFECT((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___GET_SCREEN_EFFECT_IS_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = GRAPHICS::_GET_SCREEN_EFFECT_IS_ACTIVE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__GRAPHICS___STOP_ALL_SCREEN_EFFECTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  GRAPHICS::_STOP_ALL_SCREEN_EFFECTS();
  return mrb_nil_value();
}

mrb_value mruby__GRAPHICS___0xD2209BE128B5418C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  GRAPHICS::_0xD2209BE128B5418C(&a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS__STAT_CLEAR_SLOT_FOR_RELOAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STATS::STAT_CLEAR_SLOT_FOR_RELOAD(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS__STAT_LOAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STATS::STAT_LOAD(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__STAT_SAVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_get_args(mrb,"ibi",&a0, &a1, &a2);
  mrb_bool r0 = STATS::STAT_SAVE(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS___0x5688585E6D563CD8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STATS::_0x5688585E6D563CD8(a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS__STAT_LOAD_PENDING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STATS::STAT_LOAD_PENDING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__STAT_SAVE_PENDING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STATS::STAT_SAVE_PENDING();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS__STAT_SAVE_PENDING_OR_REQUESTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STATS::STAT_SAVE_PENDING_OR_REQUESTED();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS__STAT_DELETE_SLOT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STATS::STAT_DELETE_SLOT(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS__STAT_SLOT_IS_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STATS::STAT_SLOT_IS_LOADED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS___0x7F2C4CDF2E82DF4C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STATS::_0x7F2C4CDF2E82DF4C(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS___0xE496A53BA5F50A56(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STATS::_0xE496A53BA5F50A56(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0xF434A10BA01C37D0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  STATS::_0xF434A10BA01C37D0(a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x7E6946F68A38B74F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STATS::_0x7E6946F68A38B74F(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS___0xA8733668D1047B51(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STATS::_0xA8733668D1047B51(a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xECB41AC6AB754401(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STATS::_0xECB41AC6AB754401();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0x9B4BD21D69B1E609(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STATS::_0x9B4BD21D69B1E609();
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xC0E0D686DDFC6EAE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STATS::_0xC0E0D686DDFC6EAE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS__STAT_SET_INT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  mrb_bool r0 = STATS::STAT_SET_INT(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__STAT_SET_FLOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ifb",&a0, &a1, &a2);
  mrb_bool r0 = STATS::STAT_SET_FLOAT(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__STAT_SET_BOOL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  mrb_bool r0 = STATS::STAT_SET_BOOL(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__STAT_SET_GXT_LABEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_bool a2;
  mrb_get_args(mrb,"isb",&a0, &a1, &a1_size, &a2);
  mrb_bool r0 = STATS::STAT_SET_GXT_LABEL(a0, (a1_size == 0 ? 0 : a1), a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__STAT_SET_STRING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_bool a2;
  mrb_get_args(mrb,"isb",&a0, &a1, &a1_size, &a2);
  mrb_bool r0 = STATS::STAT_SET_STRING(a0, (a1_size == 0 ? 0 : a1), a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__STAT_SET_POS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_get_args(mrb,"ifffb",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = STATS::STAT_SET_POS(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__STAT_SET_MASKED_INT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_bool a4;
  mrb_get_args(mrb,"iiiib",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = STATS::STAT_SET_MASKED_INT(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__STAT_SET_USER_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_bool a2;
  mrb_get_args(mrb,"isb",&a0, &a1, &a1_size, &a2);
  mrb_bool r0 = STATS::STAT_SET_USER_ID(a0, (a1_size == 0 ? 0 : a1), a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__STAT_SET_CURRENT_POSIX_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_bool r0 = STATS::STAT_SET_CURRENT_POSIX_TIME(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__STAT_GET_STRING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_bool r0 = STATS::STAT_GET_STRING(a0, (a1_size == 0 ? 0 : a1));
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__STAT_GET_USER_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STATS::STAT_GET_USER_ID(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS__STAT_GET_LICENSE_PLATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  char* cstr = STATS::STAT_GET_LICENSE_PLATE(a0);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__STATS__STAT_SET_LICENSE_PLATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_bool r0 = STATS::STAT_SET_LICENSE_PLATE(a0, (a1_size == 0 ? 0 : a1));
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__STAT_INCREMENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  STATS::STAT_INCREMENT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x5A556B229A169402(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = STATS::_0x5A556B229A169402();
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS___0xB1D2BB1E1631F5B1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = STATS::_0xB1D2BB1E1631F5B1();
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS___0x26D7399B9587FE89(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STATS::_0x26D7399B9587FE89(a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xA78B8FA58200DA56(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STATS::_0xA78B8FA58200DA56(a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xE0E854F5280FB769(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STATS::_0xE0E854F5280FB769(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0xF2D4B2FE415AAFC3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STATS::_0xF2D4B2FE415AAFC3(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0x7583B4BE4C5A41B5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STATS::_0x7583B4BE4C5A41B5(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0x2CE056FF3723F00B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STATS::_0x2CE056FF3723F00B(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___STAT_SET_PROFILE_SETTING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  STATS::_STAT_SET_PROFILE_SETTING(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xF4D8E7AC2A27758C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STATS::_0xF4D8E7AC2A27758C(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0x94F12ABF9C79E339(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STATS::_0x94F12ABF9C79E339(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0x80C75307B1C42837(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_int a3;
  mrb_get_args(mrb,"ibbi",&a0, &a1, &a2, &a3);
  Any r0 = STATS::_0x80C75307B1C42837(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0x61E111E323419E07(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_int a3;
  mrb_get_args(mrb,"ibbi",&a0, &a1, &a2, &a3);
  Any r0 = STATS::_0x61E111E323419E07(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0xC4BB08EE7907471E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_int a3;
  mrb_get_args(mrb,"ibbi",&a0, &a1, &a2, &a3);
  Any r0 = STATS::_0xC4BB08EE7907471E(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0xD16C2AD6B8E32854(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_int a3;
  mrb_get_args(mrb,"ibbi",&a0, &a1, &a2, &a3);
  Any r0 = STATS::_0xD16C2AD6B8E32854(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS__STAT_GET_BOOL_MASKED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = STATS::STAT_GET_BOOL_MASKED(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__STAT_SET_BOOL_MASKED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_get_args(mrb,"ibib",&a0, &a1, &a2, &a3);
  mrb_bool r0 = STATS::STAT_SET_BOOL_MASKED(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS___0x5009DFD741329729(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_get_args(mrb,"si",&a0, &a0_size, &a1);
  STATS::_0x5009DFD741329729((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__STATS__PLAYSTATS_NPC_INVITE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  STATS::PLAYSTATS_NPC_INVITE(&a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS__PLAYSTATS_AWARD_XP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  STATS::PLAYSTATS_AWARD_XP(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__STATS__PLAYSTATS_RANK_UP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STATS::PLAYSTATS_RANK_UP(a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x098760C7461724CD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STATS::_0x098760C7461724CD();
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xA071E0ED98F91286(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  STATS::_0xA071E0ED98F91286(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xC5BE134EC7BA96A0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  STATS::_0xC5BE134EC7BA96A0(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__STATS__PLAYSTATS_MISSION_STARTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iiib",&a0, &a1, &a2, &a3);
  STATS::PLAYSTATS_MISSION_STARTED(&a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__STATS__PLAYSTATS_MISSION_OVER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_get_args(mrb,"iiibbb",&a0, &a1, &a2, &a3, &a4, &a5);
  STATS::PLAYSTATS_MISSION_OVER(&a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__STATS__PLAYSTATS_MISSION_CHECKPOINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  STATS::PLAYSTATS_MISSION_CHECKPOINT(&a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x71862B1D855F32E1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  STATS::_0x71862B1D855F32E1(&a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x121FB4DDDC2D5291(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_get_args(mrb,"iiif",&a0, &a1, &a2, &a3);
  STATS::_0x121FB4DDDC2D5291(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__STATS__PLAYSTATS_RACE_CHECKPOINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  STATS::PLAYSTATS_RACE_CHECKPOINT(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__STATS__PLAYSTATS_MATCH_STARTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_get_args(mrb,"iiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  STATS::PLAYSTATS_MATCH_STARTED(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__STATS__PLAYSTATS_SHOP_ITEM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  STATS::PLAYSTATS_SHOP_ITEM(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x1CAE5D2E3F9A07F0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"iiiiii",&a0, &a1, &a2, &a3, &a4, &a5);
  STATS::_0x1CAE5D2E3F9A07F0(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xAFC7E5E075A96F46(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  STATS::_0xAFC7E5E075A96F46(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xCB00196B31C39EB1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  STATS::_0xCB00196B31C39EB1(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x2B69F5074C894811(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  STATS::_0x2B69F5074C894811(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x7EEC2A316C250073(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  STATS::_0x7EEC2A316C250073(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xADDD1C754E2E2914(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_get_args(mrb,"iiiiiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  STATS::_0xADDD1C754E2E2914(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x79AB33F0FBFAC40C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STATS::_0x79AB33F0FBFAC40C(a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xDDF24D535060F811(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  STATS::_0xDDF24D535060F811(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__STATS__PLAYSTATS_FRIEND_ACTIVITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  STATS::PLAYSTATS_FRIEND_ACTIVITY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__STATS__PLAYSTATS_ODDJOB_DONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  STATS::PLAYSTATS_ODDJOB_DONE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__STATS__PLAYSTATS_PROP_CHANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  STATS::PLAYSTATS_PROP_CHANGE(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__STATS__PLAYSTATS_CLOTH_CHANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  STATS::PLAYSTATS_CLOTH_CHANGE(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xE95C8A1875A02CA4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  STATS::_0xE95C8A1875A02CA4(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__STATS__PLAYSTATS_CHEAT_APPLIED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  STATS::PLAYSTATS_CHEAT_APPLIED((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x5DA3A8DE8CB6226F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STATS::_0x5DA3A8DE8CB6226F(a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xD1032E482629049E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  STATS::_0xD1032E482629049E(a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xF4FF020A08BC8863(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  STATS::_0xF4FF020A08BC8863(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x46326E13DA4E0546(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  STATS::_0x46326E13DA4E0546(&a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS__LEADERBOARDS_GET_NUMBER_OF_COLUMNS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = STATS::LEADERBOARDS_GET_NUMBER_OF_COLUMNS(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS__LEADERBOARDS_GET_COLUMN_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  Any r0 = STATS::LEADERBOARDS_GET_COLUMN_ID(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS__LEADERBOARDS_GET_COLUMN_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  Any r0 = STATS::LEADERBOARDS_GET_COLUMN_TYPE(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS__LEADERBOARDS_READ_CLEAR_ALL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STATS::LEADERBOARDS_READ_CLEAR_ALL();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS__LEADERBOARDS_READ_CLEAR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  Any r0 = STATS::LEADERBOARDS_READ_CLEAR(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS__LEADERBOARDS_READ_PENDING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = STATS::LEADERBOARDS_READ_PENDING(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS___0xA31FD15197B192BD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STATS::_0xA31FD15197B192BD();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS__LEADERBOARDS_READ_SUCCESSFUL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = STATS::LEADERBOARDS_READ_SUCCESSFUL(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__LEADERBOARDS2_READ_BY_RANK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = STATS::LEADERBOARDS2_READ_BY_RANK(&a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__LEADERBOARDS2_READ_BY_SCORE_INT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = STATS::LEADERBOARDS2_READ_BY_SCORE_INT(&a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__LEADERBOARDS2_READ_BY_SCORE_FLOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_float a1;
  mrb_int a2;
  mrb_get_args(mrb,"ifi",&a0, &a1, &a2);
  mrb_bool r0 = STATS::LEADERBOARDS2_READ_BY_SCORE_FLOAT(&a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS___0xA0F93D5465B3094D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STATS::_0xA0F93D5465B3094D(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS___0x71B008056E5692D6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STATS::_0x71B008056E5692D6();
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x88578F6EC36B4A3A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = STATS::_0x88578F6EC36B4A3A(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0x38491439B6BA7F7D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_float r0 = STATS::_0x38491439B6BA7F7D(a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__STATS__LEADERBOARDS2_WRITE_DATA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STATS::LEADERBOARDS2_WRITE_DATA(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS___0x0BCA1D2C47B0D269(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_get_args(mrb,"iif",&a0, &a1, &a2);
  STATS::_0x0BCA1D2C47B0D269(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x2E65248609523599(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  STATS::_0x2E65248609523599(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__STATS__LEADERBOARDS_CACHE_DATA_ROW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STATS::LEADERBOARDS_CACHE_DATA_ROW(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__LEADERBOARDS_CLEAR_CACHE_DATA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STATS::LEADERBOARDS_CLEAR_CACHE_DATA();
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x8EC74CEB042E7CFF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STATS::_0x8EC74CEB042E7CFF(a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS__LEADERBOARDS_GET_CACHE_EXISTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STATS::LEADERBOARDS_GET_CACHE_EXISTS(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS__LEADERBOARDS_GET_CACHE_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STATS::LEADERBOARDS_GET_CACHE_TIME(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0x58A651CD201D89AD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STATS::_0x58A651CD201D89AD(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0x11FF1C80276097ED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  STATS::_0x11FF1C80276097ED(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x30A6614C1F7799B8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_int a2;
  mrb_get_args(mrb,"ifi",&a0, &a1, &a2);
  STATS::_0x30A6614C1F7799B8(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x5EAD2BF6484852E4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = STATS::_0x5EAD2BF6484852E4();
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS___0xC141B8917E0017EC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STATS::_0xC141B8917E0017EC();
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xB475F27C6A994D65(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STATS::_0xB475F27C6A994D65();
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xF1A1803D3476F215(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STATS::_0xF1A1803D3476F215(a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x38BAAA5DD4C9D19F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STATS::_0x38BAAA5DD4C9D19F(a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x55384438FC55AD8E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STATS::_0x55384438FC55AD8E(a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x723C1CE13FBFDB67(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  STATS::_0x723C1CE13FBFDB67(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x0D01D20616FC73FB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  STATS::_0x0D01D20616FC73FB(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x428EAF89E24F6C36(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  STATS::_0x428EAF89E24F6C36(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x047CBED6F6F8B63C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STATS::_0x047CBED6F6F8B63C();
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x6F361B8889A792A3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STATS::_0x6F361B8889A792A3();
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xC847B43F369AC0B5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STATS::_0xC847B43F369AC0B5();
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xA5C80D8E768A9E66(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = STATS::_0xA5C80D8E768A9E66(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__STATS___0x9A62EC95AE10E011(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STATS::_0x9A62EC95AE10E011();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0x4C89FE2BDEB3F169(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STATS::_0x4C89FE2BDEB3F169();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0xC6E0E2616A7576BB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STATS::_0xC6E0E2616A7576BB();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0x5BD5F255321C4AAF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STATS::_0x5BD5F255321C4AAF(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0xC70DDCE56D0D3A99(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STATS::_0xC70DDCE56D0D3A99();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0x886913BBEACA68C1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STATS::_0x886913BBEACA68C1(&a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0x4FEF53183C3C6414(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STATS::_0x4FEF53183C3C6414();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0x567384DFA67029E6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STATS::_0x567384DFA67029E6();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0xCE5AA445ABA8DEE0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = STATS::_0xCE5AA445ABA8DEE0(&a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0x98E2BC1CA26287C3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STATS::_0x98E2BC1CA26287C3();
  return mrb_nil_value();
}

mrb_value mruby__STATS___0x629526ABA383BCAA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  STATS::_0x629526ABA383BCAA();
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xB3DA2606774A8E2D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = STATS::_0xB3DA2606774A8E2D();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__STATS___0xDAC073C7901F9E15(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STATS::_0xDAC073C7901F9E15(a0);
  return mrb_nil_value();
}

mrb_value mruby__STATS___0xF6792800AC95350D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  STATS::_0xF6792800AC95350D(a0);
  return mrb_nil_value();
}

mrb_value mruby__BRAIN__ADD_SCRIPT_TO_RANDOM_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"siff",&a0, &a0_size, &a1, &a2, &a3);
  BRAIN::ADD_SCRIPT_TO_RANDOM_PED((a0_size == 0 ? 0 : a0), a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__BRAIN__REGISTER_OBJECT_SCRIPT_BRAIN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_int a2;
  mrb_float a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"siifii",&a0, &a0_size, &a1, &a2, &a3, &a4, &a5);
  BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN((a0_size == 0 ? 0 : a0), a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__BRAIN__IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = BRAIN::IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__BRAIN__REGISTER_WORLD_POINT_SCRIPT_BRAIN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_float a1;
  mrb_int a2;
  mrb_get_args(mrb,"ifi",&a0, &a1, &a2);
  BRAIN::REGISTER_WORLD_POINT_SCRIPT_BRAIN(&a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__BRAIN__IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = BRAIN::IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE();
  return mrb_bool_value(r0);
}

mrb_value mruby__BRAIN__ENABLE_SCRIPT_BRAIN_SET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  BRAIN::ENABLE_SCRIPT_BRAIN_SET(a0);
  return mrb_nil_value();
}

mrb_value mruby__BRAIN__DISABLE_SCRIPT_BRAIN_SET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  BRAIN::DISABLE_SCRIPT_BRAIN_SET(a0);
  return mrb_nil_value();
}

mrb_value mruby__BRAIN___0x0B40ED49D7D6FF84(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  BRAIN::_0x0B40ED49D7D6FF84();
  return mrb_nil_value();
}

mrb_value mruby__BRAIN___0x4D953DF78EBF8158(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  BRAIN::_0x4D953DF78EBF8158();
  return mrb_nil_value();
}

mrb_value mruby__BRAIN___0x6D6840CEE8845831(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  BRAIN::_0x6D6840CEE8845831((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__BRAIN___0x6E91B04E08773030(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  BRAIN::_0x6E91B04E08773030((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__MOBILE__CREATE_MOBILE_PHONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  MOBILE::CREATE_MOBILE_PHONE(a0);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE__DESTROY_MOBILE_PHONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  MOBILE::DESTROY_MOBILE_PHONE();
  return mrb_nil_value();
}

mrb_value mruby__MOBILE__SET_MOBILE_PHONE_SCALE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  MOBILE::SET_MOBILE_PHONE_SCALE(a0);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE__SET_MOBILE_PHONE_ROTATION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_get_args(mrb,"fffi",&a0, &a1, &a2, &a3);
  MOBILE::SET_MOBILE_PHONE_ROTATION(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE__SET_MOBILE_PHONE_POSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  MOBILE::SET_MOBILE_PHONE_POSITION(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE__SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  MOBILE::SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN(a0);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE__CAN_PHONE_BE_SEEN_ON_SCREEN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = MOBILE::CAN_PHONE_BE_SEEN_ON_SCREEN();
  return mrb_bool_value(r0);
}

mrb_value mruby__MOBILE___MOVE_FINGER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  MOBILE::_MOVE_FINGER(a0);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE___SET_PHONE_LEAN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  MOBILE::_SET_PHONE_LEAN(a0);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE__CELL_CAM_ACTIVATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  MOBILE::CELL_CAM_ACTIVATE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE___0x015C49A93E3E086E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  MOBILE::_0x015C49A93E3E086E(a0);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE___0xA2CCBE62CD4C91A4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  MOBILE::_0xA2CCBE62CD4C91A4(a0);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE___0x1B0B4AEED5B9B41C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  MOBILE::_0x1B0B4AEED5B9B41C(a0);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE___0x53F4892D18EC90A4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  MOBILE::_0x53F4892D18EC90A4(a0);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE___0x3117D84EFA60F77B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  MOBILE::_0x3117D84EFA60F77B(a0);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE___0x15E69E2802C24B8D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  MOBILE::_0x15E69E2802C24B8D(a0);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE___0xAC2890471901861C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  MOBILE::_0xAC2890471901861C(a0);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE___0xD6ADE981781FCA09(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  MOBILE::_0xD6ADE981781FCA09(a0);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE___0xF1E22DC13F5EEBAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  MOBILE::_0xF1E22DC13F5EEBAD(a0);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE___0x466DA42C89865553(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  MOBILE::_0x466DA42C89865553(a0);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE__CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = MOBILE::CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__MOBILE__GET_MOBILE_PHONE_RENDER_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  MOBILE::GET_MOBILE_PHONE_RENDER_ID(&a0);
  return mrb_nil_value();
}

mrb_value mruby__MOBILE___0xBD4D7EAF8A30F637(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = MOBILE::_0xBD4D7EAF8A30F637((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__MOBILE___0x247F0F73A182EA0B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = MOBILE::_0x247F0F73A182EA0B(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__APP__APP_DATA_VALID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = APP::APP_DATA_VALID();
  return mrb_bool_value(r0);
}

mrb_value mruby__APP__APP_GET_INT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_int r0 = APP::APP_GET_INT((a0_size == 0 ? 0 : a0));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__APP__APP_GET_FLOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_float r0 = APP::APP_GET_FLOAT((a0_size == 0 ? 0 : a0));
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__APP__APP_GET_STRING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  char* cstr = APP::APP_GET_STRING((a0_size == 0 ? 0 : a0));
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__APP__APP_SET_INT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_get_args(mrb,"si",&a0, &a0_size, &a1);
  APP::APP_SET_INT((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__APP__APP_SET_FLOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  mrb_get_args(mrb,"sf",&a0, &a0_size, &a1);
  APP::APP_SET_FLOAT((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__APP__APP_SET_STRING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"ss",&a0, &a0_size, &a1, &a1_size);
  APP::APP_SET_STRING((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__APP__APP_SET_APP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  APP::APP_SET_APP((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__APP__APP_SET_BLOCK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  APP::APP_SET_BLOCK((a0_size == 0 ? 0 : a0));
  return mrb_nil_value();
}

mrb_value mruby__APP__APP_CLEAR_BLOCK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  APP::APP_CLEAR_BLOCK();
  return mrb_nil_value();
}

mrb_value mruby__APP__APP_CLOSE_APP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  APP::APP_CLOSE_APP();
  return mrb_nil_value();
}

mrb_value mruby__APP__APP_CLOSE_BLOCK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  APP::APP_CLOSE_BLOCK();
  return mrb_nil_value();
}

mrb_value mruby__APP__APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = APP::APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT();
  return mrb_bool_value(r0);
}

mrb_value mruby__APP__APP_HAS_SYNCED_DATA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = APP::APP_HAS_SYNCED_DATA((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__APP__APP_SAVE_DATA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  APP::APP_SAVE_DATA();
  return mrb_nil_value();
}

mrb_value mruby__APP__APP_GET_DELETED_FILE_STATUS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = APP::APP_GET_DELETED_FILE_STATUS();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__APP__APP_DELETE_APP_DATA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = APP::APP_DELETE_APP_DATA((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__TIME__SET_CLOCK_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  TIME::SET_CLOCK_TIME(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__TIME__PAUSE_CLOCK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  TIME::PAUSE_CLOCK(a0);
  return mrb_nil_value();
}

mrb_value mruby__TIME__ADVANCE_CLOCK_TIME_TO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  TIME::ADVANCE_CLOCK_TIME_TO(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__TIME__ADD_TO_CLOCK_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  TIME::ADD_TO_CLOCK_TIME(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__TIME__GET_CLOCK_HOURS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = TIME::GET_CLOCK_HOURS();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__TIME__GET_CLOCK_MINUTES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = TIME::GET_CLOCK_MINUTES();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__TIME__GET_CLOCK_SECONDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = TIME::GET_CLOCK_SECONDS();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__TIME__SET_CLOCK_DATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  TIME::SET_CLOCK_DATE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__TIME__GET_CLOCK_DAY_OF_WEEK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = TIME::GET_CLOCK_DAY_OF_WEEK();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__TIME__GET_CLOCK_DAY_OF_MONTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = TIME::GET_CLOCK_DAY_OF_MONTH();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__TIME__GET_CLOCK_MONTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = TIME::GET_CLOCK_MONTH();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__TIME__GET_CLOCK_YEAR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = TIME::GET_CLOCK_YEAR();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__TIME__GET_MILLISECONDS_PER_GAME_MINUTE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = TIME::GET_MILLISECONDS_PER_GAME_MINUTE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PATHFIND__SET_ROADS_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_get_args(mrb,"ffffffbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  PATHFIND::SET_ROADS_IN_AREA(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND__SET_ROADS_IN_ANGLED_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_bool a7;
  mrb_bool a8;
  mrb_bool a9;
  mrb_get_args(mrb,"fffffffbbb",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  PATHFIND::SET_ROADS_IN_ANGLED_AREA(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND__SET_PED_PATHS_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_get_args(mrb,"ffffffb",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  PATHFIND::SET_PED_PATHS_IN_AREA(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND__GET_NTH_CLOSEST_VEHICLE_NODE_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_int a4;
  mrb_float a5;
  mrb_float a6;
  mrb_get_args(mrb,"fffiiff",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  mrb_int r0 = PATHFIND::GET_NTH_CLOSEST_VEHICLE_NODE_ID(a0, a1, a2, a3, a4, a5, a6);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PATHFIND__IS_VEHICLE_NODE_ID_VALID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PATHFIND::IS_VEHICLE_NODE_ID_VALID(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PATHFIND___GET_SUPPORTS_GPS_ROUTE_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PATHFIND::_GET_SUPPORTS_GPS_ROUTE_FLAG(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PATHFIND___GET_IS_SLOW_ROAD_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PATHFIND::_GET_IS_SLOW_ROAD_FLAG(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PATHFIND__GET_CLOSEST_ROAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_int a10;
  mrb_get_args(mrb,"fffiiiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10);
  Any r0 = PATHFIND::GET_CLOSEST_ROAD(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PATHFIND__LOAD_ALL_PATH_NODES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  mrb_bool r0 = PATHFIND::LOAD_ALL_PATH_NODES(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PATHFIND___0x228E5C6AD4D74BFD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  PATHFIND::_0x228E5C6AD4D74BFD(a0);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND___0xF7B79A50B905A30D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  mrb_bool r0 = PATHFIND::_0xF7B79A50B905A30D(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__PATHFIND___0x07FB139B592FA687(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  mrb_bool r0 = PATHFIND::_0x07FB139B592FA687(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__PATHFIND__SET_ROADS_BACK_TO_ORIGINAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"iiiiii",&a0, &a1, &a2, &a3, &a4, &a5);
  PATHFIND::SET_ROADS_BACK_TO_ORIGINAL(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND__SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_get_args(mrb,"fffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  PATHFIND::SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND___0x0B919E1FB47CC4E0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  PATHFIND::_0x0B919E1FB47CC4E0(a0);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND___0xAA76052DDA9BFC3E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_get_args(mrb,"iiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  PATHFIND::_0xAA76052DDA9BFC3E(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND__SET_PED_PATHS_BACK_TO_ORIGINAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"iiiiii",&a0, &a1, &a2, &a3, &a4, &a5);
  PATHFIND::SET_PED_PATHS_BACK_TO_ORIGINAL(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND__SET_IGNORE_NO_GPS_FLAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  PATHFIND::SET_IGNORE_NO_GPS_FLAG(a0);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND___0x1FC289A0C3FF470F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  PATHFIND::_0x1FC289A0C3FF470F(a0);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND__SET_GPS_DISABLED_ZONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"iiiiii",&a0, &a1, &a2, &a3, &a4, &a5);
  PATHFIND::SET_GPS_DISABLED_ZONE(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND___0xBBB45C3CF5C8AA85(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = PATHFIND::_0xBBB45C3CF5C8AA85();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PATHFIND___0x869DAACBBE9FA006(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = PATHFIND::_0x869DAACBBE9FA006();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PATHFIND___0x16F46FB18C8009E4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  Any r0 = PATHFIND::_0x16F46FB18C8009E4(a0, a1, a2, a3, a4);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PATHFIND__IS_POINT_ON_ROAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_get_args(mrb,"fffi",&a0, &a1, &a2, &a3);
  mrb_bool r0 = PATHFIND::IS_POINT_ON_ROAD(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__PATHFIND___0xD3A6A0EF48823A8C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = PATHFIND::_0xD3A6A0EF48823A8C();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PATHFIND___0xD0BC1C6FB18EE154(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_get_args(mrb,"iiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  PATHFIND::_0xD0BC1C6FB18EE154(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND___0x2801D0012266DF07(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PATHFIND::_0x2801D0012266DF07(a0);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND__ADD_NAVMESH_REQUIRED_REGION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  PATHFIND::ADD_NAVMESH_REQUIRED_REGION(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND__REMOVE_NAVMESH_REQUIRED_REGIONS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  PATHFIND::REMOVE_NAVMESH_REQUIRED_REGIONS();
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND__DISABLE_NAVMESH_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_get_args(mrb,"iiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  PATHFIND::DISABLE_NAVMESH_IN_AREA(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND__ARE_ALL_NAVMESH_REGIONS_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = PATHFIND::ARE_ALL_NAVMESH_REGIONS_LOADED();
  return mrb_bool_value(r0);
}

mrb_value mruby__PATHFIND__IS_NAVMESH_LOADED_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"ffffff",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_bool r0 = PATHFIND::IS_NAVMESH_LOADED_IN_AREA(a0, a1, a2, a3, a4, a5);
  return mrb_bool_value(r0);
}

mrb_value mruby__PATHFIND___0x01708E8DD3FF8C65(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"ffffff",&a0, &a1, &a2, &a3, &a4, &a5);
  Any r0 = PATHFIND::_0x01708E8DD3FF8C65(a0, a1, a2, a3, a4, a5);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PATHFIND__ADD_NAVMESH_BLOCKING_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_bool a7;
  mrb_int a8;
  mrb_get_args(mrb,"fffffffbi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  Any r0 = PATHFIND::ADD_NAVMESH_BLOCKING_OBJECT(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__PATHFIND__UPDATE_NAVMESH_BLOCKING_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_int a8;
  mrb_get_args(mrb,"ifffffffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  PATHFIND::UPDATE_NAVMESH_BLOCKING_OBJECT(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND__REMOVE_NAVMESH_BLOCKING_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  PATHFIND::REMOVE_NAVMESH_BLOCKING_OBJECT(a0);
  return mrb_nil_value();
}

mrb_value mruby__PATHFIND___0x0EAEB0DB4B132399(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = PATHFIND::_0x0EAEB0DB4B132399(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__PATHFIND___0x29C24BFBED8AB8FB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  mrb_float r0 = PATHFIND::_0x29C24BFBED8AB8FB(a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__PATHFIND___0x8ABE8608576D9CE3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  mrb_float r0 = PATHFIND::_0x8ABE8608576D9CE3(a0, a1, a2, a3);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__PATHFIND___0x336511A34F2E5185(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  mrb_float r0 = PATHFIND::_0x336511A34F2E5185(a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__PATHFIND___0x3599D741C9AC6310(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  mrb_float r0 = PATHFIND::_0x3599D741C9AC6310(a0, a1, a2, a3);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__PATHFIND__CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"ffffff",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_float r0 = PATHFIND::CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS(a0, a1, a2, a3, a4, a5);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CONTROLS__IS_CONTROL_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = CONTROLS::IS_CONTROL_ENABLED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__CONTROLS__IS_CONTROL_PRESSED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = CONTROLS::IS_CONTROL_PRESSED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__CONTROLS__IS_CONTROL_RELEASED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = CONTROLS::IS_CONTROL_RELEASED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__CONTROLS__IS_CONTROL_JUST_PRESSED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = CONTROLS::IS_CONTROL_JUST_PRESSED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__CONTROLS__IS_CONTROL_JUST_RELEASED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = CONTROLS::IS_CONTROL_JUST_RELEASED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__CONTROLS__GET_CONTROL_VALUE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = CONTROLS::GET_CONTROL_VALUE(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CONTROLS__GET_CONTROL_NORMAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_float r0 = CONTROLS::GET_CONTROL_NORMAL(a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CONTROLS___0x5B73C77D9EB66E24(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CONTROLS::_0x5B73C77D9EB66E24(a0);
  return mrb_nil_value();
}

mrb_value mruby__CONTROLS___0x5B84D09CEC5209C5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_float r0 = CONTROLS::_0x5B84D09CEC5209C5(a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CONTROLS___SET_CONTROL_NORMAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_get_args(mrb,"iif",&a0, &a1, &a2);
  mrb_bool r0 = CONTROLS::_SET_CONTROL_NORMAL(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__CONTROLS__IS_DISABLED_CONTROL_PRESSED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = CONTROLS::IS_DISABLED_CONTROL_PRESSED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__CONTROLS__IS_DISABLED_CONTROL_JUST_PRESSED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = CONTROLS::IS_DISABLED_CONTROL_JUST_PRESSED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__CONTROLS__IS_DISABLED_CONTROL_JUST_RELEASED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = CONTROLS::IS_DISABLED_CONTROL_JUST_RELEASED(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__CONTROLS__GET_DISABLED_CONTROL_NORMAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_float r0 = CONTROLS::GET_DISABLED_CONTROL_NORMAL(a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CONTROLS___0x4F8A26A890FD62FB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_float r0 = CONTROLS::_0x4F8A26A890FD62FB(a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__CONTROLS___0xD7D22F5592AED8BA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = CONTROLS::_0xD7D22F5592AED8BA(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CONTROLS___GET_LAST_INPUT_METHOD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = CONTROLS::_GET_LAST_INPUT_METHOD(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__CONTROLS___0x13337B38DB572509(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = CONTROLS::_0x13337B38DB572509(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__CONTROLS___0xFC695459D4D0E219(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  mrb_bool r0 = CONTROLS::_0xFC695459D4D0E219(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__CONTROLS___0x23F09EADC01449D6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = CONTROLS::_0x23F09EADC01449D6(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__CONTROLS___0x6CD79468A1E595C6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = CONTROLS::_0x6CD79468A1E595C6(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CONTROLS___GET_CONTROL_ACTION_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  char* cstr = CONTROLS::_GET_CONTROL_ACTION_NAME(a0, a1, a2);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__CONTROLS___0x80C2FD58D720C801(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  Any r0 = CONTROLS::_0x80C2FD58D720C801(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CONTROLS___0x8290252FFF36ACB5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  CONTROLS::_0x8290252FFF36ACB5(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__CONTROLS___0xCB0360EFEFB2580D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CONTROLS::_0xCB0360EFEFB2580D(a0);
  return mrb_nil_value();
}

mrb_value mruby__CONTROLS__SET_PAD_SHAKE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  CONTROLS::SET_PAD_SHAKE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__CONTROLS___0x14D29BB12D47F68C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  CONTROLS::_0x14D29BB12D47F68C(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__CONTROLS__STOP_PAD_SHAKE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CONTROLS::STOP_PAD_SHAKE(a0);
  return mrb_nil_value();
}

mrb_value mruby__CONTROLS___0xF239400E16C23E08(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  CONTROLS::_0xF239400E16C23E08(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CONTROLS___0xA0CEFCEA390AAB9B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CONTROLS::_0xA0CEFCEA390AAB9B(a0);
  return mrb_nil_value();
}

mrb_value mruby__CONTROLS__IS_LOOK_INVERTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = CONTROLS::IS_LOOK_INVERTED();
  return mrb_bool_value(r0);
}

mrb_value mruby__CONTROLS___0xE1615EC03B3BB4FD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CONTROLS::_0xE1615EC03B3BB4FD();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CONTROLS__GET_LOCAL_PLAYER_AIM_STATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CONTROLS::GET_LOCAL_PLAYER_AIM_STATE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CONTROLS___0x59B9A7AF4C95133C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CONTROLS::_0x59B9A7AF4C95133C();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CONTROLS___0x0F70731BACCFBB96(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CONTROLS::_0x0F70731BACCFBB96();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CONTROLS___0xFC859E2374407556(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = CONTROLS::_0xFC859E2374407556();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__CONTROLS__SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  CONTROLS::SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED(a0);
  return mrb_nil_value();
}

mrb_value mruby__CONTROLS__SET_INPUT_EXCLUSIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  CONTROLS::SET_INPUT_EXCLUSIVE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__CONTROLS__DISABLE_CONTROL_ACTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  CONTROLS::DISABLE_CONTROL_ACTION(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__CONTROLS__ENABLE_CONTROL_ACTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  CONTROLS::ENABLE_CONTROL_ACTION(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__CONTROLS__DISABLE_ALL_CONTROL_ACTIONS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CONTROLS::DISABLE_ALL_CONTROL_ACTIONS(a0);
  return mrb_nil_value();
}

mrb_value mruby__CONTROLS__ENABLE_ALL_CONTROL_ACTIONS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CONTROLS::ENABLE_ALL_CONTROL_ACTIONS(a0);
  return mrb_nil_value();
}

mrb_value mruby__CONTROLS___0x3D42B92563939375(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = CONTROLS::_0x3D42B92563939375((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__CONTROLS___0x4683149ED1DDE7A1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = CONTROLS::_0x4683149ED1DDE7A1((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__CONTROLS___0x643ED62D5EA3BEBD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  CONTROLS::_0x643ED62D5EA3BEBD();
  return mrb_nil_value();
}

mrb_value mruby__CONTROLS___0x7F4724035FDCA1DD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  CONTROLS::_0x7F4724035FDCA1DD(a0);
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE___0xAD6875BBC0FC899C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  DATAFILE::_0xAD6875BBC0FC899C(a0);
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE___0x6CC86E78358D5119(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  DATAFILE::_0x6CC86E78358D5119();
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE___0xFCCAE5B92A830878(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = DATAFILE::_0xFCCAE5B92A830878(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___0x15FF52B809DB2353(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = DATAFILE::_0x15FF52B809DB2353(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___0xF8CC1EBE0B62E29F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = DATAFILE::_0xF8CC1EBE0B62E29F(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___0x22DA66936E0FFF37(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = DATAFILE::_0x22DA66936E0FFF37(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___0x8F5EA1C01D65A100(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = DATAFILE::_0x8F5EA1C01D65A100(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___0xA5EFC3E847D60507(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  char* a3;
  int a3_size;
  mrb_bool a4;
  mrb_get_args(mrb,"ssssb",&a0, &a0_size, &a1, &a1_size, &a2, &a2_size, &a3, &a3_size, &a4);
  mrb_bool r0 = DATAFILE::_0xA5EFC3E847D60507((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), (a3_size == 0 ? 0 : a3), a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___0x4645DE9980999E93(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  char* a3;
  int a3_size;
  char* a4;
  int a4_size;
  mrb_get_args(mrb,"sssss",&a0, &a0_size, &a1, &a1_size, &a2, &a2_size, &a3, &a3_size, &a4, &a4_size);
  mrb_bool r0 = DATAFILE::_0x4645DE9980999E93((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), (a3_size == 0 ? 0 : a3), (a4_size == 0 ? 0 : a4));
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___0x692D808C34A82143(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_float a1;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"sfs",&a0, &a0_size, &a1, &a2, &a2_size);
  mrb_bool r0 = DATAFILE::_0x692D808C34A82143((a0_size == 0 ? 0 : a0), a1, (a2_size == 0 ? 0 : a2));
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___0xA69AC4ADE82B57A4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = DATAFILE::_0xA69AC4ADE82B57A4(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___0x9CB0BFA7A9342C3D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_bool r0 = DATAFILE::_0x9CB0BFA7A9342C3D(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___0x52818819057F2B40(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = DATAFILE::_0x52818819057F2B40(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___0x01095C95CD46B624(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = DATAFILE::_0x01095C95CD46B624(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___LOAD_UGC_FILE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = DATAFILE::_LOAD_UGC_FILE((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE__DATAFILE_CREATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  DATAFILE::DATAFILE_CREATE();
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE__DATAFILE_DELETE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  DATAFILE::DATAFILE_DELETE();
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE___0x2ED61456317B8178(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  DATAFILE::_0x2ED61456317B8178();
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE___0xC55854C7D7274882(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  DATAFILE::_0xC55854C7D7274882();
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE___0x83BCCE3224735F05(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_bool r0 = DATAFILE::_0x83BCCE3224735F05((a0_size == 0 ? 0 : a0));
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___0x4DFDD9EB705F8140(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = DATAFILE::_0x4DFDD9EB705F8140(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___0xBEDB96A7584AA8CF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = DATAFILE::_0xBEDB96A7584AA8CF();
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___OBJECT_VALUE_ADD_BOOLEAN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_bool a2;
  mrb_get_args(mrb,"isb",&a0, &a1, &a1_size, &a2);
  DATAFILE::_OBJECT_VALUE_ADD_BOOLEAN(&a0, (a1_size == 0 ? 0 : a1), a2);
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE___OBJECT_VALUE_ADD_INTEGER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_int a2;
  mrb_get_args(mrb,"isi",&a0, &a1, &a1_size, &a2);
  DATAFILE::_OBJECT_VALUE_ADD_INTEGER(&a0, (a1_size == 0 ? 0 : a1), a2);
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE___OBJECT_VALUE_ADD_FLOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_get_args(mrb,"isf",&a0, &a1, &a1_size, &a2);
  DATAFILE::_OBJECT_VALUE_ADD_FLOAT(&a0, (a1_size == 0 ? 0 : a1), a2);
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE___OBJECT_VALUE_ADD_STRING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_get_args(mrb,"iss",&a0, &a1, &a1_size, &a2, &a2_size);
  DATAFILE::_OBJECT_VALUE_ADD_STRING(&a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2));
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE___OBJECT_VALUE_ADD_VECTOR3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"isfff",&a0, &a1, &a1_size, &a2, &a3, &a4);
  DATAFILE::_OBJECT_VALUE_ADD_VECTOR3(&a0, (a1_size == 0 ? 0 : a1), a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE___OBJECT_VALUE_GET_BOOLEAN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_bool r0 = DATAFILE::_OBJECT_VALUE_GET_BOOLEAN(&a0, (a1_size == 0 ? 0 : a1));
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___OBJECT_VALUE_GET_INTEGER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_int r0 = DATAFILE::_OBJECT_VALUE_GET_INTEGER(&a0, (a1_size == 0 ? 0 : a1));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DATAFILE___OBJECT_VALUE_GET_FLOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_float r0 = DATAFILE::_OBJECT_VALUE_GET_FLOAT(&a0, (a1_size == 0 ? 0 : a1));
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__DATAFILE___OBJECT_VALUE_GET_STRING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  char* cstr = DATAFILE::_OBJECT_VALUE_GET_STRING(&a0, (a1_size == 0 ? 0 : a1));
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__DATAFILE___OBJECT_VALUE_GET_VECTOR3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  Vector3 r0 = DATAFILE::_OBJECT_VALUE_GET_VECTOR3(&a0, (a1_size == 0 ? 0 : a1));
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__DATAFILE___OBJECT_VALUE_GET_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_int r0 = DATAFILE::_OBJECT_VALUE_GET_TYPE(&a0, (a1_size == 0 ? 0 : a1));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DATAFILE___ARRAY_VALUE_ADD_BOOLEAN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  DATAFILE::_ARRAY_VALUE_ADD_BOOLEAN(&a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE___ARRAY_VALUE_ADD_INTEGER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  DATAFILE::_ARRAY_VALUE_ADD_INTEGER(&a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE___ARRAY_VALUE_ADD_FLOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  DATAFILE::_ARRAY_VALUE_ADD_FLOAT(&a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE___ARRAY_VALUE_ADD_STRING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  DATAFILE::_ARRAY_VALUE_ADD_STRING(&a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE___ARRAY_VALUE_ADD_VECTOR3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  DATAFILE::_ARRAY_VALUE_ADD_VECTOR3(&a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__DATAFILE___ARRAY_VALUE_GET_BOOLEAN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = DATAFILE::_ARRAY_VALUE_GET_BOOLEAN(&a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__DATAFILE___ARRAY_VALUE_GET_INTEGER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = DATAFILE::_ARRAY_VALUE_GET_INTEGER(&a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DATAFILE___ARRAY_VALUE_GET_FLOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_float r0 = DATAFILE::_ARRAY_VALUE_GET_FLOAT(&a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__DATAFILE___ARRAY_VALUE_GET_STRING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  char* cstr = DATAFILE::_ARRAY_VALUE_GET_STRING(&a0, a1);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__DATAFILE___ARRAY_VALUE_GET_VECTOR3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Vector3 r0 = DATAFILE::_ARRAY_VALUE_GET_VECTOR3(&a0, a1);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__DATAFILE___ARRAY_VALUE_GET_SIZE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = DATAFILE::_ARRAY_VALUE_GET_SIZE(&a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DATAFILE___ARRAY_VALUE_GET_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = DATAFILE::_ARRAY_VALUE_GET_TYPE(&a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__FIRE__START_SCRIPT_FIRE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_bool a4;
  mrb_get_args(mrb,"fffib",&a0, &a1, &a2, &a3, &a4);
  Any r0 = FIRE::START_SCRIPT_FIRE(a0, a1, a2, a3, a4);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__FIRE__REMOVE_SCRIPT_FIRE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  FIRE::REMOVE_SCRIPT_FIRE(a0);
  return mrb_nil_value();
}

mrb_value mruby__FIRE__START_ENTITY_FIRE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = FIRE::START_ENTITY_FIRE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__FIRE__STOP_ENTITY_FIRE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  FIRE::STOP_ENTITY_FIRE(a0);
  return mrb_nil_value();
}

mrb_value mruby__FIRE__IS_ENTITY_ON_FIRE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = FIRE::IS_ENTITY_ON_FIRE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__FIRE__GET_NUMBER_OF_FIRES_IN_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  mrb_int r0 = FIRE::GET_NUMBER_OF_FIRES_IN_RANGE(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__FIRE__STOP_FIRE_IN_RANGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  FIRE::STOP_FIRE_IN_RANGE(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__FIRE__GET_CLOSEST_FIRE_POS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Entity a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  mrb_bool r0 = FIRE::GET_CLOSEST_FIRE_POS(&a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__FIRE__ADD_EXPLOSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_bool a6;
  mrb_float a7;
  mrb_get_args(mrb,"fffifbbf",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  FIRE::ADD_EXPLOSION(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__FIRE__ADD_OWNED_EXPLOSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_int a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_float a8;
  mrb_get_args(mrb,"ifffifbbf",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  FIRE::ADD_OWNED_EXPLOSION(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__FIRE___ADD_SPECFX_EXPLOSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_int a3;
  mrb_int a4;
  mrb_float a5;
  mrb_bool a6;
  mrb_bool a7;
  mrb_float a8;
  mrb_get_args(mrb,"fffiifbbf",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  FIRE::_ADD_SPECFX_EXPLOSION(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__FIRE__IS_EXPLOSION_IN_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_get_args(mrb,"iffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  mrb_bool r0 = FIRE::IS_EXPLOSION_IN_AREA(a0, a1, a2, a3, a4, a5, a6);
  return mrb_bool_value(r0);
}

mrb_value mruby__FIRE___0x6070104B699B2EF4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_get_args(mrb,"iiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  Any r0 = FIRE::_0x6070104B699B2EF4(a0, a1, a2, a3, a4, a5, a6);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__FIRE__IS_EXPLOSION_IN_SPHERE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = FIRE::IS_EXPLOSION_IN_SPHERE(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__FIRE__IS_EXPLOSION_IN_ANGLED_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_get_args(mrb,"ifffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  mrb_bool r0 = FIRE::IS_EXPLOSION_IN_ANGLED_AREA(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_bool_value(r0);
}

mrb_value mruby__FIRE___GET_PED_INSIDE_EXPLOSION_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_get_args(mrb,"ifffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  Entity r0 = FIRE::_GET_PED_INSIDE_EXPLOSION_AREA(a0, a1, a2, a3, a4, a5, a6, a7);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Entity"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__DECISIONEVENT__SET_DECISION_MAKER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  DECISIONEVENT::SET_DECISION_MAKER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__DECISIONEVENT__CLEAR_DECISION_MAKER_EVENT_RESPONSE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  DECISIONEVENT::CLEAR_DECISION_MAKER_EVENT_RESPONSE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__DECISIONEVENT__BLOCK_DECISION_MAKER_EVENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  DECISIONEVENT::BLOCK_DECISION_MAKER_EVENT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__DECISIONEVENT__UNBLOCK_DECISION_MAKER_EVENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  DECISIONEVENT::UNBLOCK_DECISION_MAKER_EVENT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__DECISIONEVENT__ADD_SHOCKING_EVENT_AT_POSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  ScrHandle r0 = DECISIONEVENT::ADD_SHOCKING_EVENT_AT_POSITION(a0, a1, a2, a3, a4);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "ScrHandle"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__DECISIONEVENT__ADD_SHOCKING_EVENT_FOR_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_get_args(mrb,"iif",&a0, &a1, &a2);
  ScrHandle r0 = DECISIONEVENT::ADD_SHOCKING_EVENT_FOR_ENTITY(a0, a1, a2);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "ScrHandle"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__DECISIONEVENT__IS_SHOCKING_EVENT_IN_SPHERE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = DECISIONEVENT::IS_SHOCKING_EVENT_IN_SPHERE(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__DECISIONEVENT__REMOVE_SHOCKING_EVENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = DECISIONEVENT::REMOVE_SHOCKING_EVENT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__DECISIONEVENT__REMOVE_ALL_SHOCKING_EVENTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  DECISIONEVENT::REMOVE_ALL_SHOCKING_EVENTS(a0);
  return mrb_nil_value();
}

mrb_value mruby__DECISIONEVENT__REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  DECISIONEVENT::REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS();
  return mrb_nil_value();
}

mrb_value mruby__DECISIONEVENT__SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  DECISIONEVENT::SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME();
  return mrb_nil_value();
}

mrb_value mruby__DECISIONEVENT__SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  DECISIONEVENT::SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME(a0);
  return mrb_nil_value();
}

mrb_value mruby__DECISIONEVENT__SUPPRESS_AGITATION_EVENTS_NEXT_FRAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  DECISIONEVENT::SUPPRESS_AGITATION_EVENTS_NEXT_FRAME();
  return mrb_nil_value();
}

mrb_value mruby__ZONE__GET_ZONE_AT_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  mrb_int r0 = ZONE::GET_ZONE_AT_COORDS(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ZONE__GET_ZONE_FROM_NAME_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_get_args(mrb,"s",&a0, &a0_size);
  mrb_int r0 = ZONE::GET_ZONE_FROM_NAME_ID((a0_size == 0 ? 0 : a0));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ZONE__GET_ZONE_POPSCHEDULE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = ZONE::GET_ZONE_POPSCHEDULE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ZONE__GET_NAME_OF_ZONE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  char* cstr = ZONE::GET_NAME_OF_ZONE(a0, a1, a2);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__ZONE__SET_ZONE_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ZONE::SET_ZONE_ENABLED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ZONE__GET_ZONE_SCUMMINESS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = ZONE::GET_ZONE_SCUMMINESS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ZONE__OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ZONE__CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(a0);
  return mrb_nil_value();
}

mrb_value mruby__ZONE__GET_HASH_OF_MAP_AREA_AT_COORDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  Hash r0 = ZONE::GET_HASH_OF_MAP_AREA_AT_COORDS(a0, a1, a2);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__ROPE__DELETE_CHILD_ROPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ROPE::DELETE_CHILD_ROPE(a0);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__LOAD_ROPE_DATA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  ROPE::LOAD_ROPE_DATA(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__ROPE__PIN_ROPE_VERTEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iifff",&a0, &a1, &a2, &a3, &a4);
  ROPE::PIN_ROPE_VERTEX(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__UNPIN_ROPE_VERTEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  ROPE::UNPIN_ROPE_VERTEX(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__GET_ROPE_VERTEX_COUNT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = ROPE::GET_ROPE_VERTEX_COUNT(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__ROPE__ATTACH_ROPE_TO_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_bool a5;
  mrb_get_args(mrb,"iifffb",&a0, &a1, &a2, &a3, &a4, &a5);
  ROPE::ATTACH_ROPE_TO_ENTITY(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__DETACH_ROPE_FROM_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  ROPE::DETACH_ROPE_FROM_ENTITY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__ROPE_SET_UPDATE_PINVERTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ROPE::ROPE_SET_UPDATE_PINVERTS(a0);
  return mrb_nil_value();
}

mrb_value mruby__ROPE___0xDC57A637A20006ED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  ROPE::_0xDC57A637A20006ED(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ROPE___0x36CCB9BE67B970FD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ROPE::_0x36CCB9BE67B970FD(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ROPE___0x84DE3B5FB3E666F0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ROPE::_0x84DE3B5FB3E666F0(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ROPE__GET_ROPE_LAST_VERTEX_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = ROPE::GET_ROPE_LAST_VERTEX_COORD(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__ROPE__GET_ROPE_VERTEX_COORD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Vector3 r0 = ROPE::GET_ROPE_VERTEX_COORD(a0, a1);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__ROPE__START_ROPE_WINDING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ROPE::START_ROPE_WINDING(a0);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__STOP_ROPE_WINDING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ROPE::STOP_ROPE_WINDING(a0);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__START_ROPE_UNWINDING_FRONT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ROPE::START_ROPE_UNWINDING_FRONT(a0);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__STOP_ROPE_UNWINDING_FRONT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ROPE::STOP_ROPE_UNWINDING_FRONT(a0);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__ROPE_CONVERT_TO_SIMPLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ROPE::ROPE_CONVERT_TO_SIMPLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__ROPE_LOAD_TEXTURES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  ROPE::ROPE_LOAD_TEXTURES();
  return mrb_nil_value();
}

mrb_value mruby__ROPE__ROPE_ARE_TEXTURES_LOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = ROPE::ROPE_ARE_TEXTURES_LOADED();
  return mrb_bool_value(r0);
}

mrb_value mruby__ROPE__ROPE_UNLOAD_TEXTURES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  ROPE::ROPE_UNLOAD_TEXTURES();
  return mrb_nil_value();
}

mrb_value mruby__ROPE___0x271C9D3ACA5D6409(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = ROPE::_0x271C9D3ACA5D6409(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__ROPE___0xBC0CE682D4D05650(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_int a10;
  mrb_int a11;
  mrb_int a12;
  mrb_int a13;
  mrb_get_args(mrb,"iiiiiiiiiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12, &a13);
  ROPE::_0xBC0CE682D4D05650(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return mrb_nil_value();
}

mrb_value mruby__ROPE___0xB1B6216CA2E7B55E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  ROPE::_0xB1B6216CA2E7B55E(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__ROPE___0xB743F735C03D7810(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  ROPE::_0xB743F735C03D7810(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ROPE___GET_ROPE_LENGTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = ROPE::_GET_ROPE_LENGTH(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__ROPE__ROPE_FORCE_LENGTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  ROPE::ROPE_FORCE_LENGTH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__ROPE_RESET_LENGTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ROPE::ROPE_RESET_LENGTH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__APPLY_IMPULSE_TO_CLOTH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_get_args(mrb,"fffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  ROPE::APPLY_IMPULSE_TO_CLOTH(a0, a1, a2, a3, a4, a5, a6);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__SET_DAMPING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_float a2;
  mrb_get_args(mrb,"iif",&a0, &a1, &a2);
  ROPE::SET_DAMPING(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__ACTIVATE_PHYSICS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ROPE::ACTIVATE_PHYSICS(a0);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__SET_CGOFFSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  ROPE::SET_CGOFFSET(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__GET_CGOFFSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vector3 r0 = ROPE::GET_CGOFFSET(a0);
  mrb_value rvector3 = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vector3"), 0, NULL);
  (void)mrb_funcall(mrb, rvector3, "__load", 3, mrb_float_value(mrb, r0.x), mrb_float_value(mrb, r0.y), mrb_float_value(mrb, r0.z));
  return rvector3;
}

mrb_value mruby__ROPE__SET_CG_AT_BOUNDCENTER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ROPE::SET_CG_AT_BOUNDCENTER(a0);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__BREAK_ENTITY_GLASS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_int a9;
  mrb_bool a10;
  mrb_get_args(mrb,"iffffffffib",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10);
  ROPE::BREAK_ENTITY_GLASS(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__SET_DISABLE_BREAKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ROPE::SET_DISABLE_BREAKING(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__ROPE___0xCC6E963682533882(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  ROPE::_0xCC6E963682533882(a0);
  return mrb_nil_value();
}

mrb_value mruby__ROPE__SET_DISABLE_FRAG_DAMAGE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  ROPE::SET_DISABLE_FRAG_DAMAGE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__WATER__TEST_PROBE_AGAINST_WATER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_get_args(mrb,"iiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  mrb_bool r0 = WATER::TEST_PROBE_AGAINST_WATER(a0, a1, a2, a3, a4, a5, a6);
  return mrb_bool_value(r0);
}

mrb_value mruby__WATER__TEST_PROBE_AGAINST_ALL_WATER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_get_args(mrb,"iiiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  mrb_bool r0 = WATER::TEST_PROBE_AGAINST_ALL_WATER(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_bool_value(r0);
}

mrb_value mruby__WATER__MODIFY_WATER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  WATER::MODIFY_WATER(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__WATER___0xFDBF4CDBC07E1706(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  Any r0 = WATER::_0xFDBF4CDBC07E1706(a0, a1, a2, a3, a4);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WATER___0xB1252E3E59A82AAF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  WATER::_0xB1252E3E59A82AAF(a0);
  return mrb_nil_value();
}

mrb_value mruby__WATER___0xB96B00E976BE977F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  WATER::_0xB96B00E976BE977F(a0);
  return mrb_nil_value();
}

mrb_value mruby__WATER___0x2B2A2CC86778B619(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = WATER::_0x2B2A2CC86778B619();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WATER___0x5E5E99285AE812DB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  WATER::_0x5E5E99285AE812DB();
  return mrb_nil_value();
}

mrb_value mruby__WORLDPROBE___0x7EE9F5D83DD4F90E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_get_args(mrb,"ffffffiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  mrb_int r0 = WORLDPROBE::_0x7EE9F5D83DD4F90E(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WORLDPROBE___CAST_RAY_POINT_TO_POINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_get_args(mrb,"ffffffiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  mrb_int r0 = WORLDPROBE::_CAST_RAY_POINT_TO_POINT(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WORLDPROBE___0x052837721A854EC7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  Any r0 = WORLDPROBE::_0x052837721A854EC7(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WORLDPROBE___0xFE466162C4401D18(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_int a9;
  mrb_int a10;
  mrb_int a11;
  mrb_int a12;
  mrb_get_args(mrb,"fffffffffiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12);
  Any r0 = WORLDPROBE::_0xFE466162C4401D18(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WORLDPROBE___0x37181417CE7C8900(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  Any r0 = WORLDPROBE::_0x37181417CE7C8900(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WORLDPROBE___CAST_3D_RAY_POINT_TO_POINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_get_args(mrb,"fffffffiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  Any r0 = WORLDPROBE::_CAST_3D_RAY_POINT_TO_POINT(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WORLDPROBE___0xE6AC6C45FBE83004(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_get_args(mrb,"fffffffiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  Any r0 = WORLDPROBE::_0xE6AC6C45FBE83004(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WORLDPROBE___0xFF6BE494C7987F34(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_get_args(mrb,"iiiii",&a0, &a1, &a2, &a3, &a4);
  Any r0 = WORLDPROBE::_0xFF6BE494C7987F34(a0, a1, a2, a3, a4);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__WORLDPROBE___0x2B3334BCA57CD799(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  WORLDPROBE::_0x2B3334BCA57CD799(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_IS_SIGNED_IN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_IS_SIGNED_IN();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_SIGNED_ONLINE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_IS_SIGNED_ONLINE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xBD545D44CCE70597(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xBD545D44CCE70597();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xEBCAB9E5048434F4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xEBCAB9E5048434F4();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x74FB3E29E6D10FA9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x74FB3E29E6D10FA9();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x7808619F31FF22DB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x7808619F31FF22DB();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xA0FA4EC6A05DA44E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xA0FA4EC6A05DA44E();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x85443FF4C328F53B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x85443FF4C328F53B();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x8D11E61A4ABF49CC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x8D11E61A4ABF49CC();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_CLOUD_AVAILABLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_IS_CLOUD_AVAILABLE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x67A5589628E0CFF6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x67A5589628E0CFF6();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xBA9775570DB788CF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xBA9775570DB788CF();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_HOST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_IS_HOST();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xA306F470D1660581(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xA306F470D1660581();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x4237E822315D8BA9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x4237E822315D8BA9();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_HAVE_ONLINE_PRIVILEGES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_HAVE_ONLINE_PRIVILEGES();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x1353F87E89946207(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x1353F87E89946207();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x72D918C99BCACC54(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x72D918C99BCACC54(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xAEEF48CDF5B6CE7C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORK::_0xAEEF48CDF5B6CE7C(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x78321BEA235FD8CD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_bool r0 = NETWORK::_0x78321BEA235FD8CD(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x595F028698072DD9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  mrb_bool r0 = NETWORK::_0x595F028698072DD9(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x83F28CE49FBBFFBA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  mrb_bool r0 = NETWORK::_0x83F28CE49FBBFFBA(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x76BF03FADBF154F5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x76BF03FADBF154F5();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x9614B71F8ADB982B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x9614B71F8ADB982B();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x5EA784D197556507(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x5EA784D197556507();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xA8ACB6459542A8C8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xA8ACB6459542A8C8();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x83FE8D7229593017(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x83FE8D7229593017();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_CAN_BAIL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_CAN_BAIL();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_BAIL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::NETWORK_BAIL();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x283B6062A2C01E9B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x283B6062A2C01E9B();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x9747292807126EDA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x9747292807126EDA();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_CAN_ENTER_MULTIPLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_CAN_ENTER_MULTIPLAYER();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_SESSION_ENTER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"iiiiii",&a0, &a1, &a2, &a3, &a4, &a5);
  Any r0 = NETWORK::NETWORK_SESSION_ENTER(a0, a1, a2, a3, a4, a5);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x2CFC76E0D087C994(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iiib",&a0, &a1, &a2, &a3);
  mrb_bool r0 = NETWORK::_0x2CFC76E0D087C994(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x94BC51E9449D917F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_bool a4;
  mrb_get_args(mrb,"iiiib",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = NETWORK::_0x94BC51E9449D917F(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xBE3E347A87ACEB82(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  mrb_bool r0 = NETWORK::_0xBE3E347A87ACEB82(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_SESSION_HOST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  mrb_bool r0 = NETWORK::NETWORK_SESSION_HOST(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xED34C0C02C098BB7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORK::_0xED34C0C02C098BB7(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_SESSION_HOST_FRIENDS_ONLY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORK::NETWORK_SESSION_HOST_FRIENDS_ONLY(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xFBCFA2EA2E206890(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::_0xFBCFA2EA2E206890();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x74732C6CA90DA2B4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::_0x74732C6CA90DA2B4();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xF3929C2379B60CCE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::_0xF3929C2379B60CCE();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xCEF70AA5B3F89BA1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::_0xCEF70AA5B3F89BA1();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_SESSION_END(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  mrb_bool r0 = NETWORK::NETWORK_SESSION_END(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_SESSION_KICK_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::NETWORK_SESSION_KICK_PLAYER(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___NETWORK_SESSION_ARE_PLAYERS_VOTING_TO_KICK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_NETWORK_SESSION_ARE_PLAYERS_VOTING_TO_KICK(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x59DF79317F85A7E0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x59DF79317F85A7E0();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xFFE1E5B792D92B34(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xFFE1E5B792D92B34();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x49EC8030F5015F8B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x49EC8030F5015F8B(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x8B6A4DD0AF9CE215(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORK::_0x8B6A4DD0AF9CE215(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x56CE820830EF040B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x56CE820830EF040B(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xCAE55F48D3D7875C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0xCAE55F48D3D7875C(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xF49ABC20D8552257(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0xF49ABC20D8552257(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x4811BBAC21C5FCD5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x4811BBAC21C5FCD5(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x5539C3EBF104A53A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x5539C3EBF104A53A(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x702BC4D605522539(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x702BC4D605522539(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x3F52E880AAF6C8CA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x3F52E880AAF6C8CA(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xF1EEA2DDA9FFA69D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0xF1EEA2DDA9FFA69D(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x1153FA02A659051C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x1153FA02A659051C();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xC19F6C8E7865A6FF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0xC19F6C8E7865A6FF(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x236406F60CF216D6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORK::_0x236406F60CF216D6(&a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x058F43EC59A8631A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x058F43EC59A8631A();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x600F8CB31C7AAB6E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x600F8CB31C7AAB6E(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xE532D6811B3A4D2A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0xE532D6811B3A4D2A(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xF7B2CFDE5C9F700D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ifff",&a0, &a1, &a2, &a3);
  mrb_bool r0 = NETWORK::_0xF7B2CFDE5C9F700D(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_FINDING_GAMERS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_IS_FINDING_GAMERS();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xF9B83B77929D8863(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xF9B83B77929D8863();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_NUM_FOUND_GAMERS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_GET_NUM_FOUND_GAMERS();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_FOUND_GAMER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORK::NETWORK_GET_FOUND_GAMER(&a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_CLEAR_FOUND_GAMERS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::NETWORK_CLEAR_FOUND_GAMERS();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x85A0EF54A500882C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x85A0EF54A500882C(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x2CC848A861D01493(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x2CC848A861D01493();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x94A8394D150B013A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x94A8394D150B013A();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x5AE17C6B0134B7F1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x5AE17C6B0134B7F1();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x02A8BEC6FD9AF660(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORK::_0x02A8BEC6FD9AF660(&a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x86E0660E4F5C956D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x86E0660E4F5C956D();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_IS_PLAYER_ANIMATION_DRAWING_SYNCHRONIZED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::NETWORK_IS_PLAYER_ANIMATION_DRAWING_SYNCHRONIZED();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_SESSION_CANCEL_INVITE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::NETWORK_SESSION_CANCEL_INVITE();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xA29177F7703B5644(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0xA29177F7703B5644();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_HAS_PENDING_INVITE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_HAS_PENDING_INVITE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xC42DD763159F3461(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xC42DD763159F3461();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x62A0296C1BB1CEB3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x62A0296C1BB1CEB3();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x23DFB504655D0CE4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x23DFB504655D0CE4();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_SESSION_GET_INVITER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::NETWORK_SESSION_GET_INVITER(&a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xD313DE83394AF134(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xD313DE83394AF134();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xBDB6F89C729CF388(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xBDB6F89C729CF388();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_SUPPRESS_INVITE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::NETWORK_SUPPRESS_INVITE(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_BLOCK_INVITES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::NETWORK_BLOCK_INVITES(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xCFEB8AF24FC1D0BB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0xCFEB8AF24FC1D0BB(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xF814FEC6A19FD6E0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0xF814FEC6A19FD6E0();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x6B07B9CE4D390375(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x6B07B9CE4D390375(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x7AC752103856FB20(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x7AC752103856FB20(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x74698374C45701D2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x74698374C45701D2();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x140E6A44870A11CE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x140E6A44870A11CE();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_SESSION_HOST_SINGLE_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::NETWORK_SESSION_HOST_SINGLE_PLAYER(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_SESSION_LEAVE_SINGLE_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::NETWORK_SESSION_LEAVE_SINGLE_PLAYER();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_IS_GAME_IN_PROGRESS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_IS_GAME_IN_PROGRESS();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_SESSION_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_IS_SESSION_ACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_IN_SESSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_IS_IN_SESSION();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_SESSION_STARTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_IS_SESSION_STARTED();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_SESSION_BUSY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_IS_SESSION_BUSY();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_CAN_SESSION_END(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_CAN_SESSION_END();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x271CC6AB59EBF9A5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x271CC6AB59EBF9A5(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xBA416D68C631496A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xBA416D68C631496A();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xA73667484D7037C3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0xA73667484D7037C3(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xB4AB419E0D86ACAE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORK::_0xB4AB419E0D86ACAE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x53AFD64C6758F2F9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x53AFD64C6758F2F9();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_SESSION_VOICE_HOST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::NETWORK_SESSION_VOICE_HOST();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_SESSION_VOICE_LEAVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::NETWORK_SESSION_VOICE_LEAVE();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xABD5E88B8A2D3DB2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0xABD5E88B8A2D3DB2(&a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_SET_KEEP_FOCUSPOINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_int a1;
  mrb_get_args(mrb,"bi",&a0, &a1);
  NETWORK::NETWORK_SET_KEEP_FOCUSPOINT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x5B8ED3DB018927B1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x5B8ED3DB018927B1(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x855BC38818F6F684(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x855BC38818F6F684();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xB5D3453C98456528(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xB5D3453C98456528();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xEF0912DDF7C4CB4B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xEF0912DDF7C4CB4B();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_SET_ACTIVITY_SPECTATOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::NETWORK_SET_ACTIVITY_SPECTATOR(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_IS_ACTIVITY_SPECTATOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_IS_ACTIVITY_SPECTATOR();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_SET_ACTIVITY_SPECTATOR_MAX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::NETWORK_SET_ACTIVITY_SPECTATOR_MAX(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_GET_ACTIVITY_PLAYER_NUM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  Any r0 = NETWORK::NETWORK_GET_ACTIVITY_PLAYER_NUM(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE(&a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_HOST_TRANSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"iiiiii",&a0, &a1, &a2, &a3, &a4, &a5);
  Any r0 = NETWORK::NETWORK_HOST_TRANSITION(a0, a1, a2, a3, a4, a5);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x71FB0EBCD4915D56(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  mrb_bool r0 = NETWORK::_0x71FB0EBCD4915D56(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xA091A5E44F0072E5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  mrb_bool r0 = NETWORK::_0xA091A5E44F0072E5(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xA06509A691D12BE4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xA06509A691D12BE4();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xB13E88E655E5A3BC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0xB13E88E655E5A3BC();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x6512765E3BE78C50(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x6512765E3BE78C50();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x0DBD5D7E3C5BEC3B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x0DBD5D7E3C5BEC3B();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x5DC577201723960A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x5DC577201723960A();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x5A6AA44FF8E931E6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x5A6AA44FF8E931E6();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x261E97AD7BCF3D40(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x261E97AD7BCF3D40(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x39917E1B4CB0F911(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x39917E1B4CB0F911(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_SET_TRANSITION_CREATOR_HANDLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::NETWORK_SET_TRANSITION_CREATOR_HANDLE(&a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_INVITE_GAMERS_TO_TRANSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORK::NETWORK_INVITE_GAMERS_TO_TRANSITION(&a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_SET_GAMER_INVITED_TO_TRANSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::NETWORK_SET_GAMER_INVITED_TO_TRANSITION(&a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_LEAVE_TRANSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_LEAVE_TRANSITION();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_LAUNCH_TRANSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_LAUNCH_TRANSITION();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xA2E9C1AB8A92E8CD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0xA2E9C1AB8A92E8CD(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_BAIL_TRANSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::NETWORK_BAIL_TRANSITION();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_DO_TRANSITION_TO_GAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_int a1;
  mrb_get_args(mrb,"bi",&a0, &a1);
  mrb_bool r0 = NETWORK::NETWORK_DO_TRANSITION_TO_GAME(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_DO_TRANSITION_TO_NEW_GAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"bib",&a0, &a1, &a2);
  mrb_bool r0 = NETWORK::NETWORK_DO_TRANSITION_TO_NEW_GAME(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_DO_TRANSITION_TO_FREEMODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_int a3;
  mrb_bool a4;
  mrb_get_args(mrb,"iibib",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = NETWORK::NETWORK_DO_TRANSITION_TO_FREEMODE(&a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_DO_TRANSITION_TO_NEW_FREEMODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_get_args(mrb,"iiibbb",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_bool r0 = NETWORK::NETWORK_DO_TRANSITION_TO_NEW_FREEMODE(&a0, a1, a2, a3, a4, a5);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_TRANSITION_TO_GAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_IS_TRANSITION_TO_GAME();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_TRANSITION_MEMBERS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = NETWORK::NETWORK_GET_TRANSITION_MEMBERS(&a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x521638ADA1BA0D18(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORK::_0x521638ADA1BA0D18(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_TRANSITION_HOST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_IS_TRANSITION_HOST();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_TRANSITION_HOST_FROM_HANDLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_IS_TRANSITION_HOST_FROM_HANDLE(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_TRANSITION_HOST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_GET_TRANSITION_HOST(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_IN_TRANSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_IS_IN_TRANSITION();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_TRANSITION_STARTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_IS_TRANSITION_STARTED();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_TRANSITION_BUSY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_IS_TRANSITION_BUSY();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x292564C735375EDF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x292564C735375EDF();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xC571D0E77D8BBC29(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xC571D0E77D8BBC29();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x2B3A8F7CA3A38FDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x2B3A8F7CA3A38FDE();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x43F4DBA69710E01E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x43F4DBA69710E01E();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x37A4494483B9F5C9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x37A4494483B9F5C9();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x0C978FDA19692C2C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  NETWORK::_0x0C978FDA19692C2C(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xD0A484CB2F829FBE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xD0A484CB2F829FBE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x30DE938B516F0AD2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x30DE938B516F0AD2(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xEEEDA5E6D7080987(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORK::_0xEEEDA5E6D7080987(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x973D76AA760A6CB6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x973D76AA760A6CB6(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_HAS_PLAYER_STARTED_TRANSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_HAS_PLAYER_STARTED_TRANSITION(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x2615AA2A695930C1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x2615AA2A695930C1(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_JOIN_TRANSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_JOIN_TRANSITION(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_HAS_INVITED_GAMER_TO_TRANSITION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_HAS_INVITED_GAMER_TO_TRANSITION(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x3F9990BF5F22759C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x3F9990BF5F22759C(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_ACTIVITY_SESSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_IS_ACTIVITY_SESSION();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x4A9FDE3A5A6D0437(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x4A9FDE3A5A6D0437(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x742B58F723233ED9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x742B58F723233ED9(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xCEFA968912D0F78D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xCEFA968912D0F78D();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_ACCEPT_PRESENCE_INVITE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_ACCEPT_PRESENCE_INVITE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xF0210268DB0974B1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0xF0210268DB0974B1(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_PRESENCE_INVITE_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::NETWORK_GET_PRESENCE_INVITE_ID(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_PRESENCE_INVITE_INVITER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::NETWORK_GET_PRESENCE_INVITE_INVITER(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x26E1CD96B0903D60(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x26E1CD96B0903D60(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x24409FC4C55CB22D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x24409FC4C55CB22D(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xD39B3FFF8FFDD5BF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0xD39B3FFF8FFDD5BF(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x728C4CC7920CD102(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x728C4CC7920CD102(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x3DBF2DF0AEB7D289(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x3DBF2DF0AEB7D289(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x8806CEBFABD3CE05(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x8806CEBFABD3CE05(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x76D9B976C4C09FDE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x76D9B976C4C09FDE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xC88156EBB786F8D5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xC88156EBB786F8D5();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x439BFDE3CD0610F6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x439BFDE3CD0610F6();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xEBF8284D8CADEB53(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0xEBF8284D8CADEB53();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_REMOVE_TRANSITION_INVITE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::NETWORK_REMOVE_TRANSITION_INVITE(&a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x726E0375C7A26368(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x726E0375C7A26368();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xF083835B70BA9BFE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0xF083835B70BA9BFE();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_HAS_INVITED_GAMER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_HAS_INVITED_GAMER(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x66F010A4B031A331(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x66F010A4B031A331(&a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__FILLOUT_PM_PLAYER_LIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = NETWORK::FILLOUT_PM_PLAYER_LIST(&a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__USING_NETWORK_WEAPONTYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::USING_NETWORK_WEAPONTYPE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x796A87B3B68D1F3D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x796A87B3B68D1F3D(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x2FC5650B0271CB57(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x2FC5650B0271CB57();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x01ABCE5E7CBDA196(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x01ABCE5E7CBDA196();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x120364DE2845DAF8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = NETWORK::_0x120364DE2845DAF8(&a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xFD8B834A8BA05048(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xFD8B834A8BA05048();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_CHATTING_IN_PLATFORM_PARTY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_IS_CHATTING_IN_PLATFORM_PARTY(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_IN_PARTY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_IS_IN_PARTY();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_PARTY_MEMBER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::NETWORK_IS_PARTY_MEMBER(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x2BF66D2E7414F686(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x2BF66D2E7414F686();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x14922ED3E38761F0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x14922ED3E38761F0();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xFA2888E3833C8E96(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0xFA2888E3833C8E96();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x25D990F8E0E3F13C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x25D990F8E0E3F13C();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x77FADDCBE3499DF7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x77FADDCBE3499DF7(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xF1B84178F8674195(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0xF1B84178F8674195(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x599E4FA1F87EB5FF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x599E4FA1F87EB5FF();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xE30CF56F1EFA5F43(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = NETWORK::_0xE30CF56F1EFA5F43(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_PLAYER_IS_CHEATER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_PLAYER_IS_CHEATER();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x172F75B6EE2233BA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x172F75B6EE2233BA();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_PLAYER_IS_BADSPORT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_PLAYER_IS_BADSPORT();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x46FB3ED415C7641C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = NETWORK::_0x46FB3ED415C7641C(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__BAD_SPORT_PLAYER_LEFT_DETECTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = NETWORK::BAD_SPORT_PLAYER_LEFT_DETECTED(&a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xE66C690248F11150(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORK::_0xE66C690248F11150(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_get_args(mrb,"ibi",&a0, &a1, &a2);
  NETWORK::NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xD1110739EEADB592(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_get_args(mrb,"ibi",&a0, &a1, &a2);
  mrb_bool r0 = NETWORK::_0xD1110739EEADB592(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___NETWORK_GET_NUM_PARTICIPANTS_HOST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = NETWORK::_NETWORK_GET_NUM_PARTICIPANTS_HOST();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_NUM_PARTICIPANTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = NETWORK::NETWORK_GET_NUM_PARTICIPANTS();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_SCRIPT_STATUS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_GET_SCRIPT_STATUS();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORK::NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(&a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORK::NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(&a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x64F62AFB081E260D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x64F62AFB081E260D();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x5D10B3795F3FC886(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x5D10B3795F3FC886();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_PLAYER_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::NETWORK_GET_PLAYER_INDEX(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_PARTICIPANT_INDEX(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::NETWORK_GET_PARTICIPANT_INDEX(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___NETWORK_GET_PLAYER_FROM_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Player r0 = NETWORK::_NETWORK_GET_PLAYER_FROM_PED(a0);
  mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Player"), 0, NULL);
  (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
  return rret;
}

mrb_value mruby__NETWORK__NETWORK_GET_NUM_CONNECTED_PLAYERS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = NETWORK::NETWORK_GET_NUM_CONNECTED_PLAYERS();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_PLAYER_CONNECTED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_IS_PLAYER_CONNECTED(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xCF61D4B4702EE9EB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xCF61D4B4702EE9EB();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_PARTICIPANT_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_PLAYER_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_IS_PLAYER_ACTIVE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_PLAYER_A_PARTICIPANT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_IS_PLAYER_A_PARTICIPANT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_HOST_OF_THIS_SCRIPT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_IS_HOST_OF_THIS_SCRIPT();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_HOST_OF_THIS_SCRIPT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_GET_HOST_OF_THIS_SCRIPT();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_HOST_OF_SCRIPT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"sii",&a0, &a0_size, &a1, &a2);
  mrb_int r0 = NETWORK::NETWORK_GET_HOST_OF_SCRIPT((a0_size == 0 ? 0 : a0), a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_SET_MISSION_FINISHED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::NETWORK_SET_MISSION_FINISHED();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_IS_SCRIPT_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_int a3;
  mrb_get_args(mrb,"iibi",&a0, &a1, &a2, &a3);
  mrb_bool r0 = NETWORK::NETWORK_IS_SCRIPT_ACTIVE(&a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x3658E8CD94FC121A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  Any r0 = NETWORK::_0x3658E8CD94FC121A(&a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x638A3A81733086DB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x638A3A81733086DB();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x2302C0264EA58D31(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x2302C0264EA58D31();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x741A3D8380319A81(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x741A3D8380319A81();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__PARTICIPANT_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = NETWORK::PARTICIPANT_ID();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__PARTICIPANT_ID_TO_INT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = NETWORK::PARTICIPANT_ID_TO_INT();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_RESURRECT_LOCAL_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"iiiiii",&a0, &a1, &a2, &a3, &a4, &a5);
  NETWORK::NETWORK_RESURRECT_LOCAL_PLAYER(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_IS_LOCAL_PLAYER_INVINCIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_IS_LOCAL_PLAYER_INVINCIBLE();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x9DD368BF06983221(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  NETWORK::_0x9DD368BF06983221(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x524FF0AEFF9C3973(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x524FF0AEFF9C3973(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xB07D3185E11657A5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0xB07D3185E11657A5(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_NETWORK_ID_FROM_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = NETWORK::NETWORK_GET_NETWORK_ID_FROM_ENTITY(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_ENTITY_FROM_NETWORK_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Entity r0 = NETWORK::NETWORK_GET_ENTITY_FROM_NETWORK_ID(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Entity"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__NETWORK___0xC7827959479DCC78(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0xC7827959479DCC78(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_ENTITY_IS_LOCAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_GET_ENTITY_IS_LOCAL(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x06FAACD625D80CAA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x06FAACD625D80CAA(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x7368E683BB9038D6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x7368E683BB9038D6(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_DOES_NETWORK_ID_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_DOES_NETWORK_ID_EXIST(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_HAS_CONTROL_OF_NETWORK_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_HAS_CONTROL_OF_NETWORK_ID(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_REQUEST_CONTROL_OF_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_REQUEST_CONTROL_OF_DOOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_REQUEST_CONTROL_OF_DOOR(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_HAS_CONTROL_OF_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_HAS_CONTROL_OF_PICKUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_HAS_CONTROL_OF_PICKUP(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_HAS_CONTROL_OF_DOOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_HAS_CONTROL_OF_DOOR(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xC01E93FAC20C3346(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0xC01E93FAC20C3346(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__VEH_TO_NET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = NETWORK::VEH_TO_NET(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__PED_TO_NET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = NETWORK::PED_TO_NET(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__OBJ_TO_NET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = NETWORK::OBJ_TO_NET(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NET_TO_VEH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Vehicle r0 = NETWORK::NET_TO_VEH(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Vehicle"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__NETWORK__NET_TO_PED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Ped r0 = NETWORK::NET_TO_PED(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Ped"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__NETWORK__NET_TO_OBJ(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Object r0 = NETWORK::NET_TO_OBJ(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Object"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__NETWORK__NET_TO_ENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Entity r0 = NETWORK::NET_TO_ENT(a0);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Entity"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__NETWORK__NETWORK_GET_LOCAL_HANDLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORK::NETWORK_GET_LOCAL_HANDLE(&a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xBC1D768F2F5D6C05(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0xBC1D768F2F5D6C05(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x58575AC3CF2CA8EC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x58575AC3CF2CA8EC(&a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GAMERTAG_FROM_HANDLE_START(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_GAMERTAG_FROM_HANDLE_START(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GAMERTAG_FROM_HANDLE_PENDING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_GAMERTAG_FROM_HANDLE_PENDING();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xD66C9E72B3CC4982(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = NETWORK::_0xD66C9E72B3CC4982(&a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x58CC181719256197(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  Any r0 = NETWORK::_0x58CC181719256197(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_MEMBER_ID_FROM_GAMER_HANDLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::NETWORK_MEMBER_ID_FROM_GAMER_HANDLE(&a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_GAMER_IN_MY_SESSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_IS_GAMER_IN_MY_SESSION(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_PLAYER_GET_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  char* cstr = NETWORK::NETWORK_PLAYER_GET_NAME(a0);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__NETWORK__NETWORK_PLAYER_IS_ROCKSTAR_DEV(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_PLAYER_IS_ROCKSTAR_DEV(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x565E430DB3B05BEC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x565E430DB3B05BEC(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_INACTIVE_PROFILE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_IS_INACTIVE_PROFILE(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_MAX_FRIENDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = NETWORK::NETWORK_GET_MAX_FRIENDS();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_FRIEND_COUNT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = NETWORK::NETWORK_GET_FRIEND_COUNT();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_FRIEND_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  char* cstr = NETWORK::NETWORK_GET_FRIEND_NAME(a0);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__NETWORK___NETWORK_GET_FRIEND_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  char* cstr = NETWORK::_NETWORK_GET_FRIEND_NAME(a0);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__NETWORK__NETWORK_IS_FRIEND_ONLINE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_IS_FRIEND_ONLINE(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x87EB7A3FFCB314DB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x87EB7A3FFCB314DB(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_FRIEND_IN_SAME_TITLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_IS_FRIEND_IN_SAME_TITLE(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_FRIEND_IN_MULTIPLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_IS_FRIEND_IN_MULTIPLAYER(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_PENDING_FRIEND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::NETWORK_IS_PENDING_FRIEND(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_ADDING_FRIEND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_IS_ADDING_FRIEND();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xBAD8F2A42B844821(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0xBAD8F2A42B844821(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x1B857666604B1A74(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x1B857666604B1A74(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x82377B65E943F72D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x82377B65E943F72D(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_CAN_SET_WAYPOINT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_CAN_SET_WAYPOINT();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xB309EBEA797E001F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0xB309EBEA797E001F(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x26F07DD83A5F7F98(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x26F07DD83A5F7F98();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_HAS_HEADSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_HAS_HEADSET();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x7D395EA61622E116(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x7D395EA61622E116(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xC0D2AF00BCC234CA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xC0D2AF00BCC234CA();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GAMER_HAS_HEADSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_GAMER_HAS_HEADSET(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_AM_I_MUTED_BY_GAMER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_AM_I_MUTED_BY_GAMER(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_GAMER_BLOCKED_BY_ME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_IS_GAMER_BLOCKED_BY_ME(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_AM_I_BLOCKED_BY_GAMER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_AM_I_BLOCKED_BY_GAMER(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xB57A49545BA53CE7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0xB57A49545BA53CE7(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xCCA4318E1AB03F1F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0xCCA4318E1AB03F1F(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x07DD29D5E22763F1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x07DD29D5E22763F1(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x135F9B7B7ADD2185(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x135F9B7B7ADD2185(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_PLAYER_TALKING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_IS_PLAYER_TALKING(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_PLAYER_HAS_HEADSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_PLAYER_HAS_HEADSET(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_PLAYER_MUTED_BY_ME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_IS_PLAYER_MUTED_BY_ME(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_AM_I_MUTED_BY_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_AM_I_MUTED_BY_PLAYER(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_PLAYER_BLOCKED_BY_ME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_IS_PLAYER_BLOCKED_BY_ME(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_AM_I_BLOCKED_BY_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_AM_I_BLOCKED_BY_PLAYER(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_GET_PLAYER_LOUDNESS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = NETWORK::NETWORK_GET_PLAYER_LOUDNESS(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__NETWORK__NETWORK_SET_TALKER_PROXIMITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  NETWORK::NETWORK_SET_TALKER_PROXIMITY(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_GET_TALKER_PROXIMITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_GET_TALKER_PROXIMITY();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_SET_VOICE_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::NETWORK_SET_VOICE_ACTIVE(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xCFEB46DCD7D8D5EB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0xCFEB46DCD7D8D5EB(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xAF66059A131AA269(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0xAF66059A131AA269(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_SET_TEAM_ONLY_CHAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::NETWORK_SET_TEAM_ONLY_CHAT(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x6F697A66CE78674E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORK::_0x6F697A66CE78674E(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_SET_OVERRIDE_SPECTATOR_MODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::NETWORK_SET_OVERRIDE_SPECTATOR_MODE(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x3C5C1E2C2FF814B1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x3C5C1E2C2FF814B1(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x9D7AFCBF21C51712(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x9D7AFCBF21C51712(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xF46A1E03E8755980(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0xF46A1E03E8755980(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x6A5D89D7769A40D8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x6A5D89D7769A40D8(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x3039AE5AD2C9C0C4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  NETWORK::_0x3039AE5AD2C9C0C4(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x97DD4C5944CC2E6A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORK::_0x97DD4C5944CC2E6A(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x57B192B4D4AD23D5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x57B192B4D4AD23D5(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xDDF73E2B1FEC5AB4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORK::_0xDDF73E2B1FEC5AB4(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x0FF2862B61A58AF9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x0FF2862B61A58AF9(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_SET_VOICE_CHANNEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::NETWORK_SET_VOICE_CHANNEL(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xE036A705F989E049(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0xE036A705F989E049();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__IS_NETWORK_VEHICLE_BEEN_DAMAGED_BY_ANY_OBJECT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  NETWORK::IS_NETWORK_VEHICLE_BEEN_DAMAGED_BY_ANY_OBJECT(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xF03755696450470C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0xF03755696450470C();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x5E3AA4CA2B6FB0EE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x5E3AA4CA2B6FB0EE(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xCA575C391FEA25CC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0xCA575C391FEA25CC(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___NETWORK_IS_TEXT_CHAT_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::_NETWORK_IS_TEXT_CHAT_ACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_SET_FRIENDLY_FIRE_OPTION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::NETWORK_SET_FRIENDLY_FIRE_OPTION(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_SET_RICH_PRESENCE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  NETWORK::NETWORK_SET_RICH_PRESENCE(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x3E200C2BCF4164EB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORK::_0x3E200C2BCF4164EB(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x5ED0356A0CE3A34F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x5ED0356A0CE3A34F();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x9769F811D1785B03(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_bool a4;
  mrb_bool a5;
  mrb_get_args(mrb,"ifffbb",&a0, &a1, &a2, &a3, &a4, &a5);
  NETWORK::_0x9769F811D1785B03(a0, a1, a2, a3, a4, a5);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xBF22E0F32968E967(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  NETWORK::_0xBF22E0F32968E967(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x715135F4B82AC90D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x715135F4B82AC90D(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___NETWORK_PLAYER_IS_IN_CLAN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::_NETWORK_PLAYER_IS_IN_CLAN();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x7543BB439F63792B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = NETWORK::_0x7543BB439F63792B(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x1F471B79ACC90BEF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x1F471B79ACC90BEF();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_CLAN_GET_MEMBERSHIP_DESC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORK::NETWORK_CLAN_GET_MEMBERSHIP_DESC(&a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_CLAN_DOWNLOAD_MEMBERSHIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_CLAN_DOWNLOAD_MEMBERSHIP(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xB3F64A6A91432477(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xB3F64A6A91432477();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_CLAN_GET_MEMBERSHIP_COUNT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::NETWORK_CLAN_GET_MEMBERSHIP_COUNT(&a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_CLAN_GET_MEMBERSHIP_VALID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORK::NETWORK_CLAN_GET_MEMBERSHIP_VALID(&a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_CLAN_JOIN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::NETWORK_CLAN_JOIN(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xC32EA7A2F6CA7557(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xC32EA7A2F6CA7557();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x13518FF1C6B28938(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x13518FF1C6B28938(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x113E6E3E50E286B0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x113E6E3E50E286B0(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x9AA46BADAD0E27ED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x9AA46BADAD0E27ED();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x042E4B70B93E6054(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x042E4B70B93E6054();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_GET_PRIMARY_CLAN_DATA_START(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORK::NETWORK_GET_PRIMARY_CLAN_DATA_START(&a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xB5074DB804E28CE7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xB5074DB804E28CE7();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x5B4F04F19376A0BA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x5B4F04F19376A0BA();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__SET_NETWORK_ID_CAN_MIGRATE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  NETWORK::SET_NETWORK_ID_CAN_MIGRATE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xA8A024587329F36A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  NETWORK::_0xA8A024587329F36A(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_SET_ENTITY_CAN_BLEND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  NETWORK::NETWORK_SET_ENTITY_CAN_BLEND(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xF1CA12B18AEF5298(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  NETWORK::_0xF1CA12B18AEF5298(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORK::SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xAAA553E7DD28A457(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0xAAA553E7DD28A457(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x3FA36981311FA4FF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  NETWORK::_0x3FA36981311FA4FF(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xA1607996431332DF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0xA1607996431332DF(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  NETWORK::SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__SET_LOCAL_PLAYER_VISIBLE_LOCALLY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::SET_LOCAL_PLAYER_VISIBLE_LOCALLY(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__SET_PLAYER_INVISIBLE_LOCALLY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  NETWORK::SET_PLAYER_INVISIBLE_LOCALLY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__SET_PLAYER_VISIBLE_LOCALLY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  NETWORK::SET_PLAYER_VISIBLE_LOCALLY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__FADE_OUT_LOCAL_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::FADE_OUT_LOCAL_PLAYER(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_FADE_OUT_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORK::NETWORK_FADE_OUT_ENTITY(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_FADE_IN_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  NETWORK::NETWORK_FADE_IN_ENTITY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x631DC5DFF4B110E3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x631DC5DFF4B110E3(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x422F32CC7E56ABAD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x422F32CC7E56ABAD(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__IS_PLAYER_IN_CUTSCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::IS_PLAYER_IN_CUTSCENE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__SET_ENTITY_VISIBLE_IN_CUTSCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORK::SET_ENTITY_VISIBLE_IN_CUTSCENE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__SET_ENTITY_LOCALLY_INVISIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::SET_ENTITY_LOCALLY_INVISIBLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__SET_ENTITY_LOCALLY_VISIBLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::SET_ENTITY_LOCALLY_VISIBLE(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  NETWORK::ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_get_args(mrb,"ffff",&a0, &a1, &a2, &a3);
  mrb_bool r0 = NETWORK::IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__IS_SPHERE_VISIBLE_TO_PLAYER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = NETWORK::IS_SPHERE_VISIBLE_TO_PLAYER(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__RESERVE_NETWORK_MISSION_OBJECTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::RESERVE_NETWORK_MISSION_OBJECTS(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__RESERVE_NETWORK_MISSION_PEDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::RESERVE_NETWORK_MISSION_PEDS(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__RESERVE_NETWORK_MISSION_VEHICLES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::RESERVE_NETWORK_MISSION_VEHICLES(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__CAN_REGISTER_MISSION_OBJECTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::CAN_REGISTER_MISSION_OBJECTS(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__CAN_REGISTER_MISSION_PEDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::CAN_REGISTER_MISSION_PEDS(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__CAN_REGISTER_MISSION_VEHICLES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::CAN_REGISTER_MISSION_VEHICLES(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__CAN_REGISTER_MISSION_ENTITIES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  mrb_bool r0 = NETWORK::CAN_REGISTER_MISSION_ENTITIES(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__GET_NUM_RESERVED_MISSION_OBJECTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  mrb_int r0 = NETWORK::GET_NUM_RESERVED_MISSION_OBJECTS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__GET_NUM_RESERVED_MISSION_PEDS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  mrb_int r0 = NETWORK::GET_NUM_RESERVED_MISSION_PEDS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__GET_NUM_RESERVED_MISSION_VEHICLES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  mrb_int r0 = NETWORK::GET_NUM_RESERVED_MISSION_VEHICLES(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x12B6281B6C6706C0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  Any r0 = NETWORK::_0x12B6281B6C6706C0(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xCB215C4B56A7FAE7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  Any r0 = NETWORK::_0xCB215C4B56A7FAE7(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x0CD9AB83489430EA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  Any r0 = NETWORK::_0x0CD9AB83489430EA(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xC7BE335216B5EC7C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xC7BE335216B5EC7C();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x0C1F7D49C39D2289(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x0C1F7D49C39D2289();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x0AFCE529F69B21FF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x0AFCE529F69B21FF();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xA72835064DD63E4C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xA72835064DD63E4C();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__GET_NETWORK_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = NETWORK::GET_NETWORK_TIME();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x89023FBBF9200E9F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x89023FBBF9200E9F();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x46718ACEEDEAFC84(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x46718ACEEDEAFC84();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__GET_TIME_OFFSET(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = NETWORK::GET_TIME_OFFSET(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___SUBTRACT_B_FROM_A_AND_CHECK_IF_NEGATIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORK::_SUBTRACT_B_FROM_A_AND_CHECK_IF_NEGATIVE(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___SUBTRACT_A_FROM_B_AND_CHECK_IF_NEGATIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORK::_SUBTRACT_A_FROM_B_AND_CHECK_IF_NEGATIVE(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___ARE_INTEGERS_EQUAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = NETWORK::_ARE_INTEGERS_EQUAL(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__GET_TIME_DIFFERENCE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = NETWORK::GET_TIME_DIFFERENCE(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___FORMAT_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  char* cstr = NETWORK::_FORMAT_TIME(a0);
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__NETWORK___GET_POSIX_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = NETWORK::_GET_POSIX_TIME();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_SET_IN_SPECTATOR_MODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_int a1;
  mrb_get_args(mrb,"bi",&a0, &a1);
  NETWORK::NETWORK_SET_IN_SPECTATOR_MODE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x419594E137637120(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"bib",&a0, &a1, &a2);
  NETWORK::_0x419594E137637120(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xFC18DB55AE19E046(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0xFC18DB55AE19E046(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x5C707A667DF8B9FA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_int a1;
  mrb_get_args(mrb,"bi",&a0, &a1);
  NETWORK::_0x5C707A667DF8B9FA(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_IS_IN_SPECTATOR_MODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_IS_IN_SPECTATOR_MODE();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_SET_IN_MP_CUTSCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  NETWORK::NETWORK_SET_IN_MP_CUTSCENE(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_IS_IN_MP_CUTSCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::NETWORK_IS_IN_MP_CUTSCENE();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_IS_PLAYER_IN_MP_CUTSCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_IS_PLAYER_IN_MP_CUTSCENE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__SET_NETWORK_VEHICLE_RESPOT_TIMER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORK::SET_NETWORK_VEHICLE_RESPOT_TIMER(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x6274C4712850841E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  NETWORK::_0x6274C4712850841E(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x21D04D7BC538C146(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x21D04D7BC538C146(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x77758139EC9B66C7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x77758139EC9B66C7(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_CREATE_SYNCHRONISED_SCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_int a9;
  mrb_get_args(mrb,"iiiiiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9);
  Any r0 = NETWORK::NETWORK_CREATE_SYNCHRONISED_SCENE(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  NETWORK::NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_START_SYNCHRONISED_SCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::NETWORK_START_SYNCHRONISED_SCENE(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_STOP_SYNCHRONISED_SCENE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::NETWORK_STOP_SYNCHRONISED_SCENE(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x02C40BF885C567B6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x02C40BF885C567B6(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xC9B43A33D09CADA7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0xC9B43A33D09CADA7(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xFB1F9381E80FA13F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = NETWORK::_0xFB1F9381E80FA13F(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x5A6FFA2433E2F14C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_int a8;
  mrb_get_args(mrb,"ifffffffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  mrb_bool r0 = NETWORK::_0x5A6FFA2433E2F14C(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x4BA92A18502BCA61(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_float a7;
  mrb_float a8;
  mrb_float a9;
  mrb_float a10;
  mrb_int a11;
  mrb_get_args(mrb,"iffffffffffi",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11);
  mrb_bool r0 = NETWORK::_0x4BA92A18502BCA61(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x3C891A251567DFCE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x3C891A251567DFCE(&a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xFB8F2A6F3DF08CBE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0xFB8F2A6F3DF08CBE();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x6C34F1208B8923FD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x6C34F1208B8923FD(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x17E0198B3882C2CB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x17E0198B3882C2CB();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xFB680D403909DC70(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORK::_0xFB680D403909DC70(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_END_TUTORIAL_SESSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::NETWORK_END_TUTORIAL_SESSION();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_IS_IN_TUTORIAL_SESSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::NETWORK_IS_IN_TUTORIAL_SESSION();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xB37E4E6A2388CA7B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xB37E4E6A2388CA7B();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x35F0B98A8387274D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x35F0B98A8387274D();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x3B39236746714134(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x3B39236746714134(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x9DE986FC9A87C474(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORK::_0x9DE986FC9A87C474(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xBBDF066252829606(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  NETWORK::_0xBBDF066252829606(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x919B3C98ED8292F9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x919B3C98ED8292F9(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_OVERRIDE_CLOCK_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xD972DF67326F966E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0xD972DF67326F966E();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xD7C95D322FF57522(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xD7C95D322FF57522();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_ADD_ENTITY_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"ffffff",&a0, &a1, &a2, &a3, &a4, &a5);
  Any r0 = NETWORK::NETWORK_ADD_ENTITY_AREA(a0, a1, a2, a3, a4, a5);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x376C6375BA60293A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_float a6;
  mrb_get_args(mrb,"fffffff",&a0, &a1, &a2, &a3, &a4, &a5, &a6);
  Any r0 = NETWORK::_0x376C6375BA60293A(a0, a1, a2, a3, a4, a5, a6);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x25B99872D588A101(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"ffffff",&a0, &a1, &a2, &a3, &a4, &a5);
  Any r0 = NETWORK::_0x25B99872D588A101(a0, a1, a2, a3, a4, a5);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_REMOVE_ENTITY_AREA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::NETWORK_REMOVE_ENTITY_AREA(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xE64A3CA08DFA37A9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0xE64A3CA08DFA37A9(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x4DF7CFFF471A7FB1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x4DF7CFFF471A7FB1(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x4A2D4E8BF4265B0F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x4A2D4E8BF4265B0F(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x2B1813ABA29016C5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  NETWORK::_0x2B1813ABA29016C5(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___DOWNLOAD_BG_SCRIPT_RPF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::_DOWNLOAD_BG_SCRIPT_RPF();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___HAS_BG_SCRIPT_BEEN_DOWNLOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::_HAS_BG_SCRIPT_BEEN_DOWNLOADED();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___DOWNLOAD_TUNABLES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_DOWNLOAD_TUNABLES();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___HAS_TUNABLES_BEEN_DOWNLOADED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = NETWORK::_HAS_TUNABLES_BEEN_DOWNLOADED();
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x10BD227A753B0D84(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x10BD227A753B0D84();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_DOES_TUNABLE_EXIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"ss",&a0, &a0_size, &a1, &a1_size);
  mrb_bool r0 = NETWORK::NETWORK_DOES_TUNABLE_EXIST((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1));
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_ACCESS_TUNABLE_BOOL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"ss",&a0, &a0_size, &a1, &a1_size);
  mrb_bool r0 = NETWORK::NETWORK_ACCESS_TUNABLE_BOOL((a0_size == 0 ? 0 : a0), (a1_size == 0 ? 0 : a1));
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___NETWORK_DOES_TUNABLE_EXIST_HASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORK::_NETWORK_DOES_TUNABLE_EXIST_HASH(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___NETWORK_ACCESS_TUNABLE_BOOL_HASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORK::_NETWORK_ACCESS_TUNABLE_BOOL_HASH(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___NETWORK_ACCESS_TUNABLE_BOOL_HASH_FAIL_VAL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  mrb_bool r0 = NETWORK::_NETWORK_ACCESS_TUNABLE_BOOL_HASH_FAIL_VAL(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x187382F8A3E0A6C3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x187382F8A3E0A6C3(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x7DB53B37A2F211A0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x7DB53B37A2F211A0();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_RESET_BODY_TRACKER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::NETWORK_RESET_BODY_TRACKER();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xD38C4A6D047C019D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xD38C4A6D047C019D();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x2E0BF682CC778D49(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x2E0BF682CC778D49(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x0EDE326D47CD0F3E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORK::_0x0EDE326D47CD0F3E(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__NETWORK_EXPLODE_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"ibbb",&a0, &a1, &a2, &a3);
  Any r0 = NETWORK::NETWORK_EXPLODE_VEHICLE(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xCD71A4ECAB22709E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0xCD71A4ECAB22709E(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xA7E30DE9272B6D49(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_get_args(mrb,"iffff",&a0, &a1, &a2, &a3, &a4);
  NETWORK::_0xA7E30DE9272B6D49(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x407091CF6037118E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x407091CF6037118E(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK__NETWORK_SET_PROPERTY_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::NETWORK_SET_PROPERTY_ID(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xC2B82527CA77053E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0xC2B82527CA77053E();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x367EF5E2F439B4C6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x367EF5E2F439B4C6(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x94538037EE44F5CF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0x94538037EE44F5CF(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xBD0BE0BFC927EAC1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0xBD0BE0BFC927EAC1();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x237D5336A9A54108(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x237D5336A9A54108(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x99B72C7ABDE5C910(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORK::_0x99B72C7ABDE5C910(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xF2EAC213D5EA0623(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xF2EAC213D5EA0623();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xEA14EEF5B7CD2C30(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xEA14EEF5B7CD2C30();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xB606E6CC59664972(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0xB606E6CC59664972(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x1D4DC17C38FEAFF0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x1D4DC17C38FEAFF0();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x662635855957C411(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x662635855957C411(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xB4271092CA7EDF48(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0xB4271092CA7EDF48(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xCA94551B50B4932C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0xCA94551B50B4932C(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x2A7776C709904AB0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x2A7776C709904AB0(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x6F44CBF56D79FAC0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = NETWORK::_0x6F44CBF56D79FAC0(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x58C21165F6545892(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORK::_0x58C21165F6545892(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x2EAC52B4019E2782(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x2EAC52B4019E2782();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__SET_STORE_ENABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::SET_STORE_ENABLED(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xA2F952104FC6DD4B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0xA2F952104FC6DD4B(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x72D0706CD6CCDB58(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x72D0706CD6CCDB58();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x722F5D28B61C5EA8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x722F5D28B61C5EA8(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x883D79C4071E18B3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x883D79C4071E18B3();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x265635150FB0D82E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x265635150FB0D82E();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x444C4525ECE0A4B9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x444C4525ECE0A4B9();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x59328EB08C5CEB2B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x59328EB08C5CEB2B();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xFAE628F1E9ADB239(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  NETWORK::_0xFAE628F1E9ADB239(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xC64DED7EF0D2FE37(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0xC64DED7EF0D2FE37(&a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x4C61B39930D045DA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x4C61B39930D045DA(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x3A3D5568AF297CD5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x3A3D5568AF297CD5(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x4F18196C8D38768D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x4F18196C8D38768D();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xC7ABAC5DE675EE3B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xC7ABAC5DE675EE3B();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x0B0CC10720653F3B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x0B0CC10720653F3B();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x8B0C2964BA471961(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x8B0C2964BA471961();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x88B588B41FF7868E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x88B588B41FF7868E();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x67FC09BC554A75E5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x67FC09BC554A75E5();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x966DD84FB6A46017(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x966DD84FB6A46017();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x9FEDF86898F100E9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x9FEDF86898F100E9();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x5E24341A7F92A74B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x5E24341A7F92A74B();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x24E4E51FC16305F9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x24E4E51FC16305F9();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xFBC5E768C7A77A6A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xFBC5E768C7A77A6A();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xC55A0B40FFB1ED23(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xC55A0B40FFB1ED23();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x17440AA15D1D3739(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x17440AA15D1D3739();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xE9B99B6853181409(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0xE9B99B6853181409();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xD53ACDBEF24A46E8(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xD53ACDBEF24A46E8();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x02ADA21EA2F6918F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x02ADA21EA2F6918F();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x941E5306BCD7C2C7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x941E5306BCD7C2C7();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xC87E740D9F3872CC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xC87E740D9F3872CC();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xEDF7F927136C224B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xEDF7F927136C224B();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xE0A6138401BCB837(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xE0A6138401BCB837();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x769951E2455E2EB5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x769951E2455E2EB5();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x3A17A27D75C74887(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x3A17A27D75C74887();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xBA96394A0EECFA65(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0xBA96394A0EECFA65();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xCD67AD041A394C9C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0xCD67AD041A394C9C(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x8C8D2739BA44AF0F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x8C8D2739BA44AF0F(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x703F12425ECA8BF5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x703F12425ECA8BF5(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xAEAB987727C5A8A4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0xAEAB987727C5A8A4(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xA7BAB11E7C9C6C5A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0xA7BAB11E7C9C6C5A(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x55AA95F481D694D2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x55AA95F481D694D2(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xC0173D6BFF4E0348(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0xC0173D6BFF4E0348(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xBF09786A7FCAB582(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0xBF09786A7FCAB582(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x7CF0448787B23758(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x7CF0448787B23758(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xBAF6BABF9E7CCC13(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = NETWORK::_0xBAF6BABF9E7CCC13(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x37025B27D9B658B1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = NETWORK::_0x37025B27D9B658B1(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x1D610EB0FEA716D9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x1D610EB0FEA716D9(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x7FCC39C46C3C03BD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x7FCC39C46C3C03BD(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x32DD916F3F7C9672(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x32DD916F3F7C9672(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x3054F114121C21EA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x3054F114121C21EA(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xA9240A96C74CCA13(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0xA9240A96C74CCA13(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x1ACCFBA3D8DAB2EE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = NETWORK::_0x1ACCFBA3D8DAB2EE(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x759299C5BB31D2A9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = NETWORK::_0x759299C5BB31D2A9(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x87E5C46C187FE0AE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = NETWORK::_0x87E5C46C187FE0AE(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x4E548C0D7AE39FF9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = NETWORK::_0x4E548C0D7AE39FF9(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x70EA8DA57840F9BE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x70EA8DA57840F9BE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x993CBE59D350D225(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x993CBE59D350D225(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x171DF6A0C07FB3DC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = NETWORK::_0x171DF6A0C07FB3DC(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x5E0165278F6339EE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x5E0165278F6339EE(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x2D5DC831176D0114(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x2D5DC831176D0114(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xEBFA8D50ADDC54C4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0xEBFA8D50ADDC54C4(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x162C23CA83ED0A62(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x162C23CA83ED0A62(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x40F7E66472DF3E5C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = NETWORK::_0x40F7E66472DF3E5C(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x5A34CD9C3C5BEC44(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x5A34CD9C3C5BEC44(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x68103E2247887242(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x68103E2247887242();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x45E816772E93A9DB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x45E816772E93A9DB();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x299EF3C576773506(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x299EF3C576773506();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x793FF272D5B365F4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x793FF272D5B365F4();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x5A0A3D1A186A5508(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x5A0A3D1A186A5508();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xA1E5E0204A6FCC70(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0xA1E5E0204A6FCC70();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x63B406D7884BFA95(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x63B406D7884BFA95();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x4D02279C83BE69FE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x4D02279C83BE69FE();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x597F8DBA9B206FC7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x597F8DBA9B206FC7();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x5CAE833B0EE0C500(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x5CAE833B0EE0C500(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x61A885D3F7CFEE9A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x61A885D3F7CFEE9A();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xF98DDE0A8ED09323(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0xF98DDE0A8ED09323(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xFD75DABC0957BF33(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0xFD75DABC0957BF33(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xF53E48461B71EECB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0xF53E48461B71EECB(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x098AB65B9ED9A9EC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = NETWORK::_0x098AB65B9ED9A9EC(&a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0xDC48473142545431(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xDC48473142545431();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x0AE1F1653B554AB9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x0AE1F1653B554AB9(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x62B9FEC9A11F10EF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x62B9FEC9A11F10EF();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xA75E2B6733DA5142(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xA75E2B6733DA5142();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x43865688AE10F0D7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x43865688AE10F0D7();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK__TEXTURE_DOWNLOAD_RELEASE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::TEXTURE_DOWNLOAD_RELEASE(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x5776ED562C134687(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0x5776ED562C134687(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK__TEXTURE_DOWNLOAD_GET_NAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::TEXTURE_DOWNLOAD_GET_NAME(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x8BD6C6DEA20E82C6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x8BD6C6DEA20E82C6(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x60EDD13EB3AC1FF3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x60EDD13EB3AC1FF3();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xEFFB25453D8600F9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0xEFFB25453D8600F9();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x66B59CFFD78467AF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x66B59CFFD78467AF();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x606E4D3E3CCCF3EB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x606E4D3E3CCCF3EB();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___IS_ROCKSTAR_BANNED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = NETWORK::_IS_ROCKSTAR_BANNED();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___IS_SOCIALCLUB_BANNED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = NETWORK::_IS_SOCIALCLUB_BANNED();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___IS_PLAYER_BANNED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = NETWORK::_IS_PLAYER_BANNED();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x422D396F80A96547(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x422D396F80A96547();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xA699957E60D80214(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORK::_0xA699957E60D80214(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORK___0x593570C289A77688(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x593570C289A77688();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x91B87C55093DE351(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x91B87C55093DE351();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x36391F397731595D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0x36391F397731595D(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0xDEB2B99A1AF1A2A6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORK::_0xDEB2B99A1AF1A2A6(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x9465E683B12D3F6B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x9465E683B12D3F6B();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xB7C7F6AD6424304B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0xB7C7F6AD6424304B();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0xC505036A35AFD01B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  NETWORK::_0xC505036A35AFD01B(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x267C78C60E806B9A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  NETWORK::_0x267C78C60E806B9A(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x6BFF5F84102DF80A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORK::_0x6BFF5F84102DF80A(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x5C497525F803486B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x5C497525F803486B();
  return mrb_nil_value();
}

mrb_value mruby__NETWORK___0x6FB7BB3607D27FA2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORK::_0x6FB7BB3607D27FA2();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORK___0x45A83257ED02D9BC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  NETWORK::_0x45A83257ED02D9BC();
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_INITIALIZE_CASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORKCASH::NETWORK_INITIALIZE_CASH(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_DELETE_CHARACTER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_DELETE_CHARACTER(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0xA921DED15FDF28F5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORKCASH::_0xA921DED15FDF28F5(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0x1C2473301B1C66BA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORKCASH::_0x1C2473301B1C66BA();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORKCASH__NETWORK_REFUND_CASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  char* a2;
  int a2_size;
  mrb_bool a3;
  mrb_get_args(mrb,"issb",&a0, &a1, &a1_size, &a2, &a2_size, &a3);
  NETWORKCASH::NETWORK_REFUND_CASH(a0, (a1_size == 0 ? 0 : a1), (a2_size == 0 ? 0 : a2), a3);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0x81404F3DC124FE5B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  mrb_bool r0 = NETWORKCASH::_0x81404F3DC124FE5B(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORKCASH___0x3A54E33660DED67F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORKCASH::_0x3A54E33660DED67F(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORKCASH__NETWORK_EARN_FROM_PICKUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORKCASH::NETWORK_EARN_FROM_PICKUP(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0xA03D4ACE0A3284CE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORKCASH::_0xA03D4ACE0A3284CE(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0xF514621E8EA463D0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORKCASH::_0xF514621E8EA463D0(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0xB1CC1B9EC3007A2A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORKCASH::_0xB1CC1B9EC3007A2A(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_EARN_FROM_BETTING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  NETWORKCASH::NETWORK_EARN_FROM_BETTING(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_EARN_FROM_JOB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  NETWORKCASH::NETWORK_EARN_FROM_JOB(a0, (a1_size == 0 ? 0 : a1));
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_EARN_FROM_IMPORT_EXPORT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORKCASH::NETWORK_EARN_FROM_IMPORT_EXPORT(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_EARN_FROM_HOLDUPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORKCASH::NETWORK_EARN_FROM_HOLDUPS(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_EARN_FROM_PROPERTY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORKCASH::NETWORK_EARN_FROM_PROPERTY(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0x515B4A22E4D3C6D7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  NETWORKCASH::_0x515B4A22E4D3C6D7(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0x4337511FA8221D36(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORKCASH::_0x4337511FA8221D36(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_EARN_FROM_ROCKSTAR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  NETWORKCASH::NETWORK_EARN_FROM_ROCKSTAR(a0);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_EARN_FROM_VEHICLE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_get_args(mrb,"iiiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7);
  NETWORKCASH::NETWORK_EARN_FROM_VEHICLE(a0, a1, a2, a3, a4, a5, a6, a7);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0x3F4D00167E41E0AD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_get_args(mrb,"iiiiiiiii",&a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);
  NETWORKCASH::_0x3F4D00167E41E0AD(a0, a1, a2, a3, a4, a5, a6, a7, a8);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___HAS_ITEM_BEEN_UNLOCKED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_int a4;
  mrb_get_args(mrb,"ibbbi",&a0, &a1, &a2, &a3, &a4);
  mrb_bool r0 = NETWORKCASH::_HAS_ITEM_BEEN_UNLOCKED(a0, a1, a2, a3, a4);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORKCASH__NETWORK_BUY_ITEM(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_bool a4;
  char* a5;
  int a5_size;
  mrb_int a6;
  mrb_int a7;
  mrb_int a8;
  mrb_bool a9;
  mrb_get_args(mrb,"iiiibsiiib",&a0, &a1, &a2, &a3, &a4, &a5, &a5_size, &a6, &a7, &a8, &a9);
  NETWORKCASH::NETWORK_BUY_ITEM(a0, a1, a2, a3, a4, (a5_size == 0 ? 0 : a5), a6, a7, a8, a9);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_TAXI(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_SPENT_TAXI(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0x5FD5ED82CBBE9989(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::_0x5FD5ED82CBBE9989(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0xAFE08B35EC0C9EAE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::_0xAFE08B35EC0C9EAE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0xEE99784E4467689C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_get_args(mrb,"ibib",&a0, &a1, &a2, &a3);
  NETWORKCASH::_0xEE99784E4467689C(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_BUY_HEALTHCARE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_BUY_HEALTHCARE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_BUY_AIRSTRIKE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_BUY_AIRSTRIKE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_BUY_HELI_STRIKE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_BUY_HELI_STRIKE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_AMMO_DROP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_SPENT_AMMO_DROP(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_BUY_BOUNTY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iibb",&a0, &a1, &a2, &a3);
  NETWORKCASH::NETWORK_BUY_BOUNTY(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_BUY_PROPERTY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"fibb",&a0, &a1, &a2, &a3);
  NETWORKCASH::NETWORK_BUY_PROPERTY(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_HELI_PICKUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_SPENT_HELI_PICKUP(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_BOAT_PICKUP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_SPENT_BOAT_PICKUP(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_BULL_SHARK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_SPENT_BULL_SHARK(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_CASH_DROP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_SPENT_CASH_DROP(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_HIRE_MUGGER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_SPENT_HIRE_MUGGER(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0x995A65F15F581359(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::_0x995A65F15F581359(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_HIRE_MERCENARY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_SPENT_HIRE_MERCENARY(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_BUY_OFFTHERADAR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_SPENT_BUY_OFFTHERADAR(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_BUY_REVEAL_PLAYERS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_SPENT_BUY_REVEAL_PLAYERS(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_CARWASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_bool a4;
  mrb_get_args(mrb,"iiibb",&a0, &a1, &a2, &a3, &a4);
  NETWORKCASH::NETWORK_SPENT_CARWASH(a0, a1, a2, a3, a4);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_CINEMA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iibb",&a0, &a1, &a2, &a3);
  NETWORKCASH::NETWORK_SPENT_CINEMA(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_TELESCOPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_SPENT_TELESCOPE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_HOLDUPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_SPENT_HOLDUPS(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_BUY_PASSIVE_MODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_SPENT_BUY_PASSIVE_MODE(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_PROSTITUTES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_SPENT_PROSTITUTES(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_ARREST_BAIL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_SPENT_ARREST_BAIL(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH__NETWORK_SPENT_BOUNTY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::NETWORK_SPENT_BOUNTY(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0x6A445B64ED7ABEB5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::_0x6A445B64ED7ABEB5(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0x20194D48EAEC9A41(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  Any r0 = NETWORKCASH::_0x20194D48EAEC9A41(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORKCASH___0x7C99101F7FCE2EE5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iibb",&a0, &a1, &a2, &a3);
  NETWORKCASH::_0x7C99101F7FCE2EE5(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0xD5BB406F4E04019F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::_0xD5BB406F4E04019F(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0x8204DA7934DF3155(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::_0x8204DA7934DF3155(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0x9D26502BB97BFE62(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ibb",&a0, &a1, &a2);
  NETWORKCASH::_0x9D26502BB97BFE62(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0x8A7B3952DD64D2B5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_bool a3;
  mrb_get_args(mrb,"iibb",&a0, &a1, &a2, &a3);
  NETWORKCASH::_0x8A7B3952DD64D2B5(a0, a1, a2, a3);
  return mrb_nil_value();
}

mrb_value mruby__NETWORKCASH___0x7C4FCCD2E4DEB394(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORKCASH::_0x7C4FCCD2E4DEB394();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORKCASH___0x76EF28DA05EA395A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORKCASH::_0x76EF28DA05EA395A();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORKCASH___0xA40F9C2623F6A8B5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORKCASH::_0xA40F9C2623F6A8B5(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORKCASH___0x5CBAD97E059E1B94(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORKCASH::_0x5CBAD97E059E1B94();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORKCASH___0xA6FA3979BED01B81(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = NETWORKCASH::_0xA6FA3979BED01B81();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORKCASH___0xDC18531D7019A535(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = NETWORKCASH::_0xDC18531D7019A535(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORKCASH__NETWORK_CAN_RECEIVE_PLAYER_CASH(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  mrb_bool r0 = NETWORKCASH::NETWORK_CAN_RECEIVE_PLAYER_CASH(a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORKCASH___0xF70EFA14FE091429(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORKCASH::_0xF70EFA14FE091429(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORKCASH___0xE260E0BB9CD995AC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = NETWORKCASH::_0xE260E0BB9CD995AC(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__NETWORKCASH___0xE154B48B68EF72BC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORKCASH::_0xE154B48B68EF72BC(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__NETWORKCASH___0x6FCF8DDEA146C45B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = NETWORKCASH::_0x6FCF8DDEA146C45B(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC1___0x278F76C3B0A8F109(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = DLC1::_0x278F76C3B0A8F109(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC1__INIT_SHOP_PED_COMPONENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  DLC1::INIT_SHOP_PED_COMPONENT(a0);
  return mrb_nil_value();
}

mrb_value mruby__DLC1__INIT_SHOP_PED_PROP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  DLC1::INIT_SHOP_PED_PROP(&a0);
  return mrb_nil_value();
}

mrb_value mruby__DLC1___0x50F457823CE6EB5F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  mrb_int r0 = DLC1::_0x50F457823CE6EB5F(a0, a1, a2, a3);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC1___GET_NUM_PROPS_FROM_OUTFIT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_bool a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"iiibii",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_int r0 = DLC1::_GET_NUM_PROPS_FROM_OUTFIT(a0, a1, a2, a3, a4, a5);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC1__GET_HASH_NAME_FOR_COMPONENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  Hash r0 = DLC1::GET_HASH_NAME_FOR_COMPONENT(a0, a1, a2, a3);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__DLC1__GET_HASH_NAME_FOR_PROP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  Hash r0 = DLC1::GET_HASH_NAME_FOR_PROP(a0, a1, a2, a3);
  if(r0 == 0) {
    return mrb_nil_value();
  } else {
    mrb_value rret = mrb_obj_new(mrb, mrb_class_get_under(mrb, mrb_module_get(mrb, "GTAV"), "Hash"), 0, NULL);
    (void)mrb_funcall(mrb, rret, "__load", 1, mrb_fixnum_value(r0));
    return rret;
  }
}

mrb_value mruby__DLC1___0xC17AD0E5752BECDA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = DLC1::_0xC17AD0E5752BECDA(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC1___GET_NUM_FORCED_COMPONENTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = DLC1::_GET_NUM_FORCED_COMPONENTS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC1___0x017568A8182D98A6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = DLC1::_0x017568A8182D98A6(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC1___0x341DE7ED1D2A1BFD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  mrb_bool r0 = DLC1::_0x341DE7ED1D2A1BFD(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__DLC1___0xF3FBE2D50A6A8C28(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_get_args(mrb,"ib",&a0, &a1);
  mrb_int r0 = DLC1::_0xF3FBE2D50A6A8C28(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC1___0x073CA26B079F956E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = DLC1::_0x073CA26B079F956E(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC1__GET_NUM_DLC_VEHICLES(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = DLC1::GET_NUM_DLC_VEHICLES();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC1__GET_DLC_VEHICLE_MODEL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = DLC1::GET_DLC_VEHICLE_MODEL(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC1__GET_DLC_VEHICLE_FLAGS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = DLC1::GET_DLC_VEHICLE_FLAGS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC1__GET_NUM_DLC_WEAPONS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = DLC1::GET_NUM_DLC_WEAPONS();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC1__GET_NUM_DLC_WEAPON_COMPONENTS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = DLC1::GET_NUM_DLC_WEAPON_COMPONENTS(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC1___IS_OUTFIT_EMPTY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = DLC1::_IS_OUTFIT_EMPTY(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__DLC1___0x0564B9FF9631B82C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = DLC1::_0x0564B9FF9631B82C(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__DLC1___0xC098810437312FFF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = DLC1::_0xC098810437312FFF(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC2__IS_DLC_PRESENT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = DLC2::IS_DLC_PRESENT(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__DLC2___0xF2E07819EF1A5289(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = DLC2::_0xF2E07819EF1A5289();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC2___0x9489659372A81585(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = DLC2::_0x9489659372A81585();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC2___0xA213B11DFF526300(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = DLC2::_0xA213B11DFF526300();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC2___0x8D30F648014A92B5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = DLC2::_0x8D30F648014A92B5();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DLC2__GET_IS_LOADING_SCREEN_ACTIVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = DLC2::GET_IS_LOADING_SCREEN_ACTIVE();
  return mrb_bool_value(r0);
}

mrb_value mruby__DLC2___NULLIFY(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = DLC2::_NULLIFY(&a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__DLC2___LOAD_SP_DLC_MAPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  DLC2::_LOAD_SP_DLC_MAPS();
  return mrb_nil_value();
}

mrb_value mruby__DLC2___LOAD_MP_DLC_MAPS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  DLC2::_LOAD_MP_DLC_MAPS();
  return mrb_nil_value();
}

mrb_value mruby__SYSTEM__WAIT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  SYSTEM::WAIT(a0);
  return mrb_nil_value();
}

mrb_value mruby__SYSTEM__START_NEW_SCRIPT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_get_args(mrb,"si",&a0, &a0_size, &a1);
  mrb_int r0 = SYSTEM::START_NEW_SCRIPT((a0_size == 0 ? 0 : a0), a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SYSTEM___START_NEW_STREAMED_SCRIPT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = SYSTEM::_START_NEW_STREAMED_SCRIPT(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SYSTEM__TIMERA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = SYSTEM::TIMERA();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SYSTEM__TIMERB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = SYSTEM::TIMERB();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SYSTEM__SETTIMERA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  SYSTEM::SETTIMERA(a0);
  return mrb_nil_value();
}

mrb_value mruby__SYSTEM__SETTIMERB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  SYSTEM::SETTIMERB(a0);
  return mrb_nil_value();
}

mrb_value mruby__SYSTEM__TIMESTEP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float r0 = SYSTEM::TIMESTEP();
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__SYSTEM__SIN(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  mrb_float r0 = SYSTEM::SIN(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__SYSTEM__COS(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  mrb_float r0 = SYSTEM::COS(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__SYSTEM__SQRT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  mrb_float r0 = SYSTEM::SQRT(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__SYSTEM__POW(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_get_args(mrb,"ff",&a0, &a1);
  mrb_float r0 = SYSTEM::POW(a0, a1);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__SYSTEM__VMAG(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  mrb_float r0 = SYSTEM::VMAG(a0, a1, a2);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__SYSTEM__VMAG2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_get_args(mrb,"fff",&a0, &a1, &a2);
  mrb_float r0 = SYSTEM::VMAG2(a0, a1, a2);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__SYSTEM__VDIST(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"ffffff",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_float r0 = SYSTEM::VDIST(a0, a1, a2, a3, a4, a5);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__SYSTEM__VDIST2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_float a2;
  mrb_float a3;
  mrb_float a4;
  mrb_float a5;
  mrb_get_args(mrb,"ffffff",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_float r0 = SYSTEM::VDIST2(a0, a1, a2, a3, a4, a5);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__SYSTEM__SHIFT_LEFT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = SYSTEM::SHIFT_LEFT(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SYSTEM__SHIFT_RIGHT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_int r0 = SYSTEM::SHIFT_RIGHT(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SYSTEM__FLOOR(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  mrb_int r0 = SYSTEM::FLOOR(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SYSTEM__CEIL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  mrb_int r0 = SYSTEM::CEIL(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SYSTEM__ROUND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_get_args(mrb,"f",&a0);
  mrb_int r0 = SYSTEM::ROUND(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SYSTEM__TO_FLOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_float r0 = SYSTEM::TO_FLOAT(a0);
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__DECORATOR__DECOR_SET_TIME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_int a2;
  mrb_get_args(mrb,"isi",&a0, &a1, &a1_size, &a2);
  mrb_bool r0 = DECORATOR::DECOR_SET_TIME(a0, (a1_size == 0 ? 0 : a1), a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__DECORATOR__DECOR_SET_BOOL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_bool a2;
  mrb_get_args(mrb,"isb",&a0, &a1, &a1_size, &a2);
  mrb_bool r0 = DECORATOR::DECOR_SET_BOOL(a0, (a1_size == 0 ? 0 : a1), a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__DECORATOR___DECOR_SET_FLOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_float a2;
  mrb_get_args(mrb,"isf",&a0, &a1, &a1_size, &a2);
  mrb_bool r0 = DECORATOR::_DECOR_SET_FLOAT(a0, (a1_size == 0 ? 0 : a1), a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__DECORATOR__DECOR_SET_INT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_int a2;
  mrb_get_args(mrb,"isi",&a0, &a1, &a1_size, &a2);
  mrb_bool r0 = DECORATOR::DECOR_SET_INT(a0, (a1_size == 0 ? 0 : a1), a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__DECORATOR__DECOR_GET_BOOL(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_bool r0 = DECORATOR::DECOR_GET_BOOL(a0, (a1_size == 0 ? 0 : a1));
  return mrb_bool_value(r0);
}

mrb_value mruby__DECORATOR___DECOR_GET_FLOAT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_float r0 = DECORATOR::_DECOR_GET_FLOAT(a0, (a1_size == 0 ? 0 : a1));
  return mrb_float_value(mrb,r0);
}

mrb_value mruby__DECORATOR__DECOR_GET_INT(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_int r0 = DECORATOR::DECOR_GET_INT(a0, (a1_size == 0 ? 0 : a1));
  return mrb_fixnum_value(r0);
}

mrb_value mruby__DECORATOR__DECOR_EXIST_ON(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_bool r0 = DECORATOR::DECOR_EXIST_ON(a0, (a1_size == 0 ? 0 : a1));
  return mrb_bool_value(r0);
}

mrb_value mruby__DECORATOR__DECOR_REMOVE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  char* a1;
  int a1_size;
  mrb_get_args(mrb,"is",&a0, &a1, &a1_size);
  mrb_bool r0 = DECORATOR::DECOR_REMOVE(a0, (a1_size == 0 ? 0 : a1));
  return mrb_bool_value(r0);
}

mrb_value mruby__DECORATOR__DECOR_REGISTER(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_get_args(mrb,"si",&a0, &a0_size, &a1);
  DECORATOR::DECOR_REGISTER((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__DECORATOR__DECOR_IS_REGISTERED_AS_TYPE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_get_args(mrb,"si",&a0, &a0_size, &a1);
  mrb_bool r0 = DECORATOR::DECOR_IS_REGISTERED_AS_TYPE((a0_size == 0 ? 0 : a0), a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__DECORATOR__DECOR_REGISTER_LOCK(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  DECORATOR::DECOR_REGISTER_LOCK();
  return mrb_nil_value();
}

mrb_value mruby__DECORATOR___0x241FCA5B1AA14F75(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = DECORATOR::_0x241FCA5B1AA14F75();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x03A93FF1A2CA0864(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = SOCIALCLUB::_0x03A93FF1A2CA0864();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0xBB8EA16ECBC976C4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = SOCIALCLUB::_0xBB8EA16ECBC976C4(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x93028F1DB42BFD08(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = SOCIALCLUB::_0x93028F1DB42BFD08(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x2C015348CF19CA1D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = SOCIALCLUB::_0x2C015348CF19CA1D(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x9A2C8064B6C1E41A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = SOCIALCLUB::_0x9A2C8064B6C1E41A(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__SOCIALCLUB___0xF3E31D16CBDCB304(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = SOCIALCLUB::_0xF3E31D16CBDCB304(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0xDA024BDBD600F44A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  SOCIALCLUB::_0xDA024BDBD600F44A(&a0);
  return mrb_nil_value();
}

mrb_value mruby__SOCIALCLUB___0xA68D3D229F4F3B06(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  SOCIALCLUB::_0xA68D3D229F4F3B06(&a0);
  return mrb_nil_value();
}

mrb_value mruby__SOCIALCLUB___0x6AFD2CD753FEEF83(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = SOCIALCLUB::_0x6AFD2CD753FEEF83(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x040ADDCBAFA1018A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  SOCIALCLUB::_0x040ADDCBAFA1018A(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__SOCIALCLUB___0x16DA8172459434AA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = SOCIALCLUB::_0x16DA8172459434AA();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x44ACA259D67651DB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  SOCIALCLUB::_0x44ACA259D67651DB(&a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__SOCIALCLUB___0x55DF6DB45179236E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  SOCIALCLUB::_0x55DF6DB45179236E();
  return mrb_nil_value();
}

mrb_value mruby__SOCIALCLUB___0x116FB94DC4B79F17(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  SOCIALCLUB::_0x116FB94DC4B79F17(&a0);
  return mrb_nil_value();
}

mrb_value mruby__SOCIALCLUB___0xBFA0A56A817C6C7D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  SOCIALCLUB::_0xBFA0A56A817C6C7D(a0);
  return mrb_nil_value();
}

mrb_value mruby__SOCIALCLUB___0xBC1CC91205EC8D6E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = SOCIALCLUB::_0xBC1CC91205EC8D6E();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0xDF649C4E9AFDD788(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = SOCIALCLUB::_0xDF649C4E9AFDD788();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x1F1E9682483697C7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = SOCIALCLUB::_0x1F1E9682483697C7(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x487912FD248EFDDF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_float a1;
  mrb_get_args(mrb,"if",&a0, &a1);
  mrb_bool r0 = SOCIALCLUB::_0x487912FD248EFDDF(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x8416FE4E4629D7D7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = SOCIALCLUB::_0x8416FE4E4629D7D7(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x1753344C770358AE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = SOCIALCLUB::_0x1753344C770358AE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x82E4A58BABC15AE7(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = SOCIALCLUB::_0x82E4A58BABC15AE7(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x85535ACF97FC0969(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = SOCIALCLUB::_0x85535ACF97FC0969(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x930DE22F07B1CCE3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_int r0 = SOCIALCLUB::_0x930DE22F07B1CCE3(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0xF22CA0FD74B80E7A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = SOCIALCLUB::_0xF22CA0FD74B80E7A(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x9237E334F6E43156(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = SOCIALCLUB::_0x9237E334F6E43156(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x700569DBA175A77C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = SOCIALCLUB::_0x700569DBA175A77C(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x1D4446A62D35B0D0(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = SOCIALCLUB::_0x1D4446A62D35B0D0(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x2E89990DDFF670C3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = SOCIALCLUB::_0x2E89990DDFF670C3(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x07C61676E5BB52CD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = SOCIALCLUB::_0x07C61676E5BB52CD(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x8147FFF6A718E1AD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = SOCIALCLUB::_0x8147FFF6A718E1AD(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0xD302E99EDF0449CF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = SOCIALCLUB::_0xD302E99EDF0449CF(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x5C4EBFFA98BDB41C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = SOCIALCLUB::_0x5C4EBFFA98BDB41C(a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0xFF8F3A92B75ED67A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = SOCIALCLUB::_0xFF8F3A92B75ED67A();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x4A7D6E727F941747(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  Any r0 = SOCIALCLUB::_0x4A7D6E727F941747(&a0);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x6BFB12CE158E3DD4(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = SOCIALCLUB::_0x6BFB12CE158E3DD4(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__SOCIALCLUB___0xFE4C1D0D3B9CC17E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = SOCIALCLUB::_0xFE4C1D0D3B9CC17E(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__SOCIALCLUB___0xD8122C407663B995(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = SOCIALCLUB::_0xD8122C407663B995();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x3001BEF2FECA3680(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = SOCIALCLUB::_0x3001BEF2FECA3680();
  return mrb_bool_value(r0);
}

mrb_value mruby__SOCIALCLUB___0x675721C9F644D161(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  SOCIALCLUB::_0x675721C9F644D161();
  return mrb_nil_value();
}

mrb_value mruby__SOCIALCLUB___SC_GET_NICKNAME(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* cstr = SOCIALCLUB::_SC_GET_NICKNAME();
  return mrb_str_new_cstr(mrb,cstr);
}

mrb_value mruby__SOCIALCLUB___0x418DC16FAE452C1C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = SOCIALCLUB::_0x418DC16FAE452C1C(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK___RETURN_ZERO(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = UNK::_RETURN_ZERO();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK___0xEF7D17BC6C85264C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UNK::_0xEF7D17BC6C85264C();
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK___GET_BROADCAST_FINSHED_LOS_SOUND(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UNK::_GET_BROADCAST_FINSHED_LOS_SOUND(a0);
  return mrb_nil_value();
}

mrb_value mruby__UNK___0x8AA464D4E0F6ACCD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK::_0x8AA464D4E0F6ACCD();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK___0xFC309E94546FCDB5(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UNK::_0xFC309E94546FCDB5(a0);
  return mrb_nil_value();
}

mrb_value mruby__UNK___0xC6DC823253FBB366(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK::_0xC6DC823253FBB366();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK___0xC7E7181C09F33B69(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UNK::_0xC7E7181C09F33B69(a0);
  return mrb_nil_value();
}

mrb_value mruby__UNK___0xFA1E0E893D915215(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UNK::_0xFA1E0E893D915215(a0);
  return mrb_nil_value();
}

mrb_value mruby__UNK___GET_UI_LANGUAGE_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = UNK::_GET_UI_LANGUAGE_ID();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK___GET_USER_LANGUAGE_ID(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int r0 = UNK::_GET_USER_LANGUAGE_ID();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK1___0x48621C9FCA3EBD28(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UNK1::_0x48621C9FCA3EBD28(a0);
  return mrb_nil_value();
}

mrb_value mruby__UNK1___0x81CBAE94390F9F89(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UNK1::_0x81CBAE94390F9F89();
  return mrb_nil_value();
}

mrb_value mruby__UNK1___0x13B350B8AD0EEE10(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UNK1::_0x13B350B8AD0EEE10();
  return mrb_nil_value();
}

mrb_value mruby__UNK1___0x293220DA1B46CEBC(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_float a0;
  mrb_float a1;
  mrb_bool a2;
  mrb_get_args(mrb,"ffb",&a0, &a1, &a2);
  UNK1::_0x293220DA1B46CEBC(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UNK1___0x208784099002BC30(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* a0;
  int a0_size;
  mrb_int a1;
  mrb_get_args(mrb,"si",&a0, &a0_size, &a1);
  UNK1::_0x208784099002BC30((a0_size == 0 ? 0 : a0), a1);
  return mrb_nil_value();
}

mrb_value mruby__UNK1___0xEB2D525B57F42B40(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UNK1::_0xEB2D525B57F42B40();
  return mrb_nil_value();
}

mrb_value mruby__UNK1___0xF854439EFBB3B583(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UNK1::_0xF854439EFBB3B583();
  return mrb_nil_value();
}

mrb_value mruby__UNK1___0xAF66DCEE6609B148(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UNK1::_0xAF66DCEE6609B148();
  return mrb_nil_value();
}

mrb_value mruby__UNK1___0x66972397E0757E7A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_int a2;
  mrb_get_args(mrb,"iii",&a0, &a1, &a2);
  UNK1::_0x66972397E0757E7A(a0, a1, a2);
  return mrb_nil_value();
}

mrb_value mruby__UNK1___SET_RECORDING_MODE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  UNK1::_SET_RECORDING_MODE(a0);
  return mrb_nil_value();
}

mrb_value mruby__UNK1___STOP_RECORDING_AND_SAVE_CLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UNK1::_STOP_RECORDING_AND_SAVE_CLIP();
  return mrb_nil_value();
}

mrb_value mruby__UNK1___STOP_RECORDING_AND_DISCARD_CLIP(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UNK1::_STOP_RECORDING_AND_DISCARD_CLIP();
  return mrb_nil_value();
}

mrb_value mruby__UNK1___0x644546EC5287471B(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK1::_0x644546EC5287471B();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK1___IS_RECORDING(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UNK1::_IS_RECORDING();
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK1___0xDF4B952F7D381B95(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK1::_0xDF4B952F7D381B95();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK1___0x4282E08174868BE3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK1::_0x4282E08174868BE3();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK1___0x33D47E85B476ABCD(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  mrb_bool r0 = UNK1::_0x33D47E85B476ABCD(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK2___0x7E2BD3EF6C205F09(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  UNK2::_0x7E2BD3EF6C205F09(a0, a1);
  return mrb_nil_value();
}

mrb_value mruby__UNK2___IS_INTERIOR_RENDERING_DISABLED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool r0 = UNK2::_IS_INTERIOR_RENDERING_DISABLED();
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK2___0x5AD3932DAEB1E5D3(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UNK2::_0x5AD3932DAEB1E5D3();
  return mrb_nil_value();
}

mrb_value mruby__UNK2___0xE058175F8EAFE79A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_get_args(mrb,"b",&a0);
  UNK2::_0xE058175F8EAFE79A(a0);
  return mrb_nil_value();
}

mrb_value mruby__UNK2___0x3353D13F09307691(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UNK2::_0x3353D13F09307691();
  return mrb_nil_value();
}

mrb_value mruby__UNK2___0x49DA8145672B2725(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  UNK2::_0x49DA8145672B2725();
  return mrb_nil_value();
}

mrb_value mruby__UNK3___NETWORK_SHOP_GET_PRICE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_bool a2;
  mrb_get_args(mrb,"iib",&a0, &a1, &a2);
  mrb_int r0 = UNK3::_NETWORK_SHOP_GET_PRICE(a0, a1, a2);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK3___0x3C4487461E9B0DCB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK3::_0x3C4487461E9B0DCB();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK3___0x2B949A1E6AEC8F6A(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK3::_0x2B949A1E6AEC8F6A();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK3___0x85F6C9ABA1DE2BCF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK3::_0x85F6C9ABA1DE2BCF();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK3___0x357B152EF96C30B6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK3::_0x357B152EF96C30B6();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK3___0xCF38DAFBB49EDE5E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UNK3::_0xCF38DAFBB49EDE5E(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___0xE3E5A7C64CA2C6ED(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK3::_0xE3E5A7C64CA2C6ED();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK3___0x0395CB47B022E62C(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UNK3::_0x0395CB47B022E62C(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___0xA135AC892A58FC07(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UNK3::_0xA135AC892A58FC07(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___0x72EB7BA9B69BF6AB(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK3::_0x72EB7BA9B69BF6AB();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK3___0x170910093218C8B9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UNK3::_0x170910093218C8B9(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___0xC13C38E47EA5DF31(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UNK3::_0xC13C38E47EA5DF31(&a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___0xB24F0944DA203D9E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UNK3::_0xB24F0944DA203D9E(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___0x74A0FD0688F1EE45(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UNK3::_0x74A0FD0688F1EE45(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___0x2F41D51BA3BCD1F1(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UNK3::_0x2F41D51BA3BCD1F1(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___0x810E8431C0614BF9(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK3::_0x810E8431C0614BF9();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK3___0x35A1B3E1D1315CFA(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_bool a0;
  mrb_bool a1;
  mrb_get_args(mrb,"bb",&a0, &a1);
  mrb_bool r0 = UNK3::_0x35A1B3E1D1315CFA(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___NETWORK_SHOP_BASKET_START(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_get_args(mrb,"iiii",&a0, &a1, &a2, &a3);
  mrb_bool r0 = UNK3::_NETWORK_SHOP_BASKET_START(&a0, a1, a2, a3);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___0xA65568121DF2EA26(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK3::_0xA65568121DF2EA26();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK3___0xF30980718C8ED876(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  Any r0 = UNK3::_0xF30980718C8ED876(a0, a1);
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK3___0x27F76CC6C55AD30E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK3::_0x27F76CC6C55AD30E();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK3___0x39BE7CEA8D9CC8E6(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UNK3::_0x39BE7CEA8D9CC8E6(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___0x3C5FD37B5499582E(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any a0;
  mrb_int a1;
  mrb_int a2;
  mrb_int a3;
  mrb_int a4;
  mrb_int a5;
  mrb_get_args(mrb,"iiiiii",&a0, &a1, &a2, &a3, &a4, &a5);
  mrb_bool r0 = UNK3::_0x3C5FD37B5499582E(&a0, a1, a2, a3, a4, a5);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___0xE2A99A9B524BEFFF(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UNK3::_0xE2A99A9B524BEFFF(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___0x51F1A8E48C3D2F6D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_bool a1;
  mrb_int a2;
  mrb_get_args(mrb,"ibi",&a0, &a1, &a2);
  mrb_bool r0 = UNK3::_0x51F1A8E48C3D2F6D(a0, a1, a2);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___0x0A6D923DFFC9BD89(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK3::_0x0A6D923DFFC9BD89();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK3___0x112CEF1615A1139F(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK3::_0x112CEF1615A1139F();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK3___0xD47A2C1BA117471D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = UNK3::_0xD47A2C1BA117471D(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___0xC2F7FE5309181C7D(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_int a1;
  mrb_get_args(mrb,"ii",&a0, &a1);
  mrb_bool r0 = UNK3::_0xC2F7FE5309181C7D(a0, a1);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___0x23789E777D14CE44(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK3::_0x23789E777D14CE44();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK3___0x350AA5EBC03D3BD2(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK3::_0x350AA5EBC03D3BD2();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK3___0x498C1E05CE5F7877(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  Any r0 = UNK3::_0x498C1E05CE5F7877();
  return mrb_fixnum_value(r0);
}

mrb_value mruby__UNK3___0x9507D4271988E1AE(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  mrb_bool r0 = UNK3::_0x9507D4271988E1AE(a0);
  return mrb_bool_value(r0);
}

mrb_value mruby__UNK3___GET_GAME_VERSION(mrb_state *mrb, mrb_value self) {
  if(call_limit_enabled && (call_limit-- < 0)) mrb_raise(mrb, mrb_class_get(mrb,"CallLimitExceeded"), "");
  char* cstr = UNK3::_GET_GAME_VERSION();
  return mrb_str_new_cstr(mrb,cstr);
}



void mruby_install_natives(mrb_state *mrb) {
  struct RClass *module_player = mrb_define_module(mrb, "PLAYER");
  struct RClass *module_entity = mrb_define_module(mrb, "ENTITY");
  struct RClass *module_ped = mrb_define_module(mrb, "PED");
  struct RClass *module_vehicle = mrb_define_module(mrb, "VEHICLE");
  struct RClass *module_object = mrb_define_module(mrb, "OBJECT");
  struct RClass *module_ai = mrb_define_module(mrb, "AI");
  struct RClass *module_gameplay = mrb_define_module(mrb, "GAMEPLAY");
  struct RClass *module_audio = mrb_define_module(mrb, "AUDIO");
  struct RClass *module_cutscene = mrb_define_module(mrb, "CUTSCENE");
  struct RClass *module_interior = mrb_define_module(mrb, "INTERIOR");
  struct RClass *module_cam = mrb_define_module(mrb, "CAM");
  struct RClass *module_weapon = mrb_define_module(mrb, "WEAPON");
  struct RClass *module_itemset = mrb_define_module(mrb, "ITEMSET");
  struct RClass *module_streaming = mrb_define_module(mrb, "STREAMING");
  struct RClass *module_script = mrb_define_module(mrb, "SCRIPT");
  struct RClass *module_ui = mrb_define_module(mrb, "UI");
  struct RClass *module_graphics = mrb_define_module(mrb, "GRAPHICS");
  struct RClass *module_stats = mrb_define_module(mrb, "STATS");
  struct RClass *module_brain = mrb_define_module(mrb, "BRAIN");
  struct RClass *module_mobile = mrb_define_module(mrb, "MOBILE");
  struct RClass *module_app = mrb_define_module(mrb, "APP");
  struct RClass *module_time = mrb_define_module(mrb, "TIME");
  struct RClass *module_pathfind = mrb_define_module(mrb, "PATHFIND");
  struct RClass *module_controls = mrb_define_module(mrb, "CONTROLS");
  struct RClass *module_datafile = mrb_define_module(mrb, "DATAFILE");
  struct RClass *module_fire = mrb_define_module(mrb, "FIRE");
  struct RClass *module_decisionevent = mrb_define_module(mrb, "DECISIONEVENT");
  struct RClass *module_zone = mrb_define_module(mrb, "ZONE");
  struct RClass *module_rope = mrb_define_module(mrb, "ROPE");
  struct RClass *module_water = mrb_define_module(mrb, "WATER");
  struct RClass *module_worldprobe = mrb_define_module(mrb, "WORLDPROBE");
  struct RClass *module_network = mrb_define_module(mrb, "NETWORK");
  struct RClass *module_networkcash = mrb_define_module(mrb, "NETWORKCASH");
  struct RClass *module_dlc1 = mrb_define_module(mrb, "DLC1");
  struct RClass *module_dlc2 = mrb_define_module(mrb, "DLC2");
  struct RClass *module_system = mrb_define_module(mrb, "SYSTEM");
  struct RClass *module_decorator = mrb_define_module(mrb, "DECORATOR");
  struct RClass *module_socialclub = mrb_define_module(mrb, "SOCIALCLUB");
  struct RClass *module_unk = mrb_define_module(mrb, "UNK");
  struct RClass *module_unk1 = mrb_define_module(mrb, "UNK1");
  struct RClass *module_unk2 = mrb_define_module(mrb, "UNK2");
  struct RClass *module_unk3 = mrb_define_module(mrb, "UNK3");

  mrb_define_method(mrb, module_graphics, "_WORLD3D_TO_SCREEN2D", mruby__GRAPHICS___WORLD3D_TO_SCREEN2D, MRB_ARGS_REQ(3));
  mrb_define_class_method(mrb, module_player, "GET_PLAYER_RGB_COLOUR", mruby__PLAYER__GET_PLAYER_RGB_COLOUR, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_player, "GET_PLAYER_TARGET_ENTITY", mruby__PLAYER__GET_PLAYER_TARGET_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_player, "GET_ENTITY_PLAYER_IS_FREE_AIMING_AT", mruby__PLAYER__GET_ENTITY_PLAYER_IS_FREE_AIMING_AT, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_player, "GET_PLAYER_PARACHUTE_TINT_INDEX", mruby__PLAYER__GET_PLAYER_PARACHUTE_TINT_INDEX, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_player, "GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX", mruby__PLAYER__GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_player, "GET_PLAYER_PARACHUTE_PACK_TINT_INDEX", mruby__PLAYER__GET_PLAYER_PARACHUTE_PACK_TINT_INDEX, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_player, "GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR", mruby__PLAYER__GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_ped, "GET_PED_LAST_DAMAGE_BONE", mruby__PED__GET_PED_LAST_DAMAGE_BONE, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_ped, "GET_GROUP_SIZE", mruby__PED__GET_GROUP_SIZE, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_ped, "IS_PED_EVASIVE_DIVING", mruby__PED__IS_PED_EVASIVE_DIVING, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_entity, "GET_ENTITY_MATRIX", mruby__ENTITY__GET_ENTITY_MATRIX, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_entity, "GET_ENTITY_QUATERNION", mruby__ENTITY__GET_ENTITY_QUATERNION, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_entity, "SET_OBJECT_AS_NO_LONGER_NEEDED", mruby__ENTITY__SET_OBJECT_AS_NO_LONGER_NEEDED, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_object, "DELETE_OBJECT", mruby__OBJECT__DELETE_OBJECT, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_vehicle, "GET_VEHICLE_CUSTOM_PRIMARY_COLOUR", mruby__VEHICLE__GET_VEHICLE_CUSTOM_PRIMARY_COLOUR, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_vehicle, "GET_VEHICLE_CUSTOM_SECONDARY_COLOUR", mruby__VEHICLE__GET_VEHICLE_CUSTOM_SECONDARY_COLOUR, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_vehicle, "GET_VEHICLE_COLOURS", mruby__VEHICLE__GET_VEHICLE_COLOURS, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_vehicle, "GET_VEHICLE_LIGHTS_STATE", mruby__VEHICLE__GET_VEHICLE_LIGHTS_STATE, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_vehicle, "GET_RANDOM_VEHICLE_MODEL_IN_MEMORY", mruby__VEHICLE__GET_RANDOM_VEHICLE_MODEL_IN_MEMORY, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_vehicle, "GET_VEHICLE_EXTRA_COLOURS", mruby__VEHICLE__GET_VEHICLE_EXTRA_COLOURS, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_vehicle, "GET_VEHICLE_TRAILER_VEHICLE", mruby__VEHICLE__GET_VEHICLE_TRAILER_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_vehicle, "GET_VEHICLE_MOD_COLOR_1", mruby__VEHICLE__GET_VEHICLE_MOD_COLOR_1, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_vehicle, "GET_VEHICLE_MOD_COLOR_2", mruby__VEHICLE__GET_VEHICLE_MOD_COLOR_2, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_vehicle, "GET_VEHICLE_TYRE_SMOKE_COLOR", mruby__VEHICLE__GET_VEHICLE_TYRE_SMOKE_COLOR, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_vehicle, "GET_VEHICLE_COLOR", mruby__VEHICLE__GET_VEHICLE_COLOR, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_vehicle, "_GET_VEHICLE_NEON_LIGHTS_COLOUR", mruby__VEHICLE___GET_VEHICLE_NEON_LIGHTS_COLOUR, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_vehicle, "_GET_VEHICLE_OWNER", mruby__VEHICLE___GET_VEHICLE_OWNER, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_graphics, "GET_SCREEN_RESOLUTION", mruby__GRAPHICS__GET_SCREEN_RESOLUTION, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, module_graphics, "_GET_SCREEN_ACTIVE_RESOLUTION", mruby__GRAPHICS___GET_SCREEN_ACTIVE_RESOLUTION, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, module_graphics, "SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED", mruby__GRAPHICS__SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_gameplay, "GET_MODEL_DIMENSIONS", mruby__GAMEPLAY__GET_MODEL_DIMENSIONS, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_gameplay, "GET_GROUND_Z_FOR_3D_COORD", mruby__GAMEPLAY__GET_GROUND_Z_FOR_3D_COORD, MRB_ARGS_REQ(4));
  mrb_define_class_method(mrb, module_gameplay, "_GET_WEATHER_TYPE_TRANSITION", mruby__GAMEPLAY___GET_WEATHER_TYPE_TRANSITION, MRB_ARGS_NONE());
  mrb_define_class_method(mrb, module_weapon, "GET_CURRENT_PED_WEAPON", mruby__WEAPON__GET_CURRENT_PED_WEAPON, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, module_weapon, "GET_CURRENT_PED_VEHICLE_WEAPON", mruby__WEAPON__GET_CURRENT_PED_VEHICLE_WEAPON, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_weapon, "GET_AMMO_IN_CLIP", mruby__WEAPON__GET_AMMO_IN_CLIP, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, module_weapon, "GET_MAX_AMMO", mruby__WEAPON__GET_MAX_AMMO, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, module_weapon, "GET_PED_LAST_WEAPON_IMPACT_COORD", mruby__WEAPON__GET_PED_LAST_WEAPON_IMPACT_COORD, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_stats, "STAT_GET_INT", mruby__STATS__STAT_GET_INT, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, module_stats, "STAT_GET_FLOAT", mruby__STATS__STAT_GET_FLOAT, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, module_stats, "STAT_GET_BOOL", mruby__STATS__STAT_GET_BOOL, MRB_ARGS_REQ(2));
  mrb_define_class_method(mrb, module_ui, "REMOVE_BLIP", mruby__UI__REMOVE_BLIP, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_ui, "GET_HUD_COLOUR", mruby__UI__GET_HUD_COLOUR, MRB_ARGS_REQ(1));
  mrb_define_class_method(mrb, module_pathfind, "GET_STREET_NAME_AT_COORD", mruby__PATHFIND__GET_STREET_NAME_AT_COORD, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_player, "GET_PLAYER_PED", mruby__PLAYER__GET_PLAYER_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "GET_PLAYER_PED_SCRIPT_INDEX", mruby__PLAYER__GET_PLAYER_PED_SCRIPT_INDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_PLAYER_MODEL", mruby__PLAYER__SET_PLAYER_MODEL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "CHANGE_PLAYER_PED", mruby__PLAYER__CHANGE_PLAYER_PED, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_player, "GET_NUMBER_OF_PLAYERS", mruby__PLAYER__GET_NUMBER_OF_PLAYERS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "GET_PLAYER_TEAM", mruby__PLAYER__GET_PLAYER_TEAM, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_PLAYER_TEAM", mruby__PLAYER__SET_PLAYER_TEAM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "GET_PLAYER_NAME", mruby__PLAYER__GET_PLAYER_NAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "GET_WANTED_LEVEL_RADIUS", mruby__PLAYER__GET_WANTED_LEVEL_RADIUS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "GET_PLAYER_WANTED_CENTRE_POSITION", mruby__PLAYER__GET_PLAYER_WANTED_CENTRE_POSITION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_PLAYER_WANTED_CENTRE_POSITION", mruby__PLAYER__SET_PLAYER_WANTED_CENTRE_POSITION, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_player, "GET_WANTED_LEVEL_THRESHOLD", mruby__PLAYER__GET_WANTED_LEVEL_THRESHOLD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_PLAYER_WANTED_LEVEL", mruby__PLAYER__SET_PLAYER_WANTED_LEVEL, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_player, "SET_PLAYER_WANTED_LEVEL_NO_DROP", mruby__PLAYER__SET_PLAYER_WANTED_LEVEL_NO_DROP, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_player, "SET_PLAYER_WANTED_LEVEL_NOW", mruby__PLAYER__SET_PLAYER_WANTED_LEVEL_NOW, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP", mruby__PLAYER__ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "ARE_PLAYER_STARS_GREYED_OUT", mruby__PLAYER__ARE_PLAYER_STARS_GREYED_OUT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_DISPATCH_COPS_FOR_PLAYER", mruby__PLAYER__SET_DISPATCH_COPS_FOR_PLAYER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "IS_PLAYER_WANTED_LEVEL_GREATER", mruby__PLAYER__IS_PLAYER_WANTED_LEVEL_GREATER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "CLEAR_PLAYER_WANTED_LEVEL", mruby__PLAYER__CLEAR_PLAYER_WANTED_LEVEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "IS_PLAYER_DEAD", mruby__PLAYER__IS_PLAYER_DEAD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "IS_PLAYER_PRESSING_HORN", mruby__PLAYER__IS_PLAYER_PRESSING_HORN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_PLAYER_CONTROL", mruby__PLAYER__SET_PLAYER_CONTROL, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_player, "GET_PLAYER_WANTED_LEVEL", mruby__PLAYER__GET_PLAYER_WANTED_LEVEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_MAX_WANTED_LEVEL", mruby__PLAYER__SET_MAX_WANTED_LEVEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_POLICE_RADAR_BLIPS", mruby__PLAYER__SET_POLICE_RADAR_BLIPS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_POLICE_IGNORE_PLAYER", mruby__PLAYER__SET_POLICE_IGNORE_PLAYER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "IS_PLAYER_PLAYING", mruby__PLAYER__IS_PLAYER_PLAYING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_EVERYONE_IGNORE_PLAYER", mruby__PLAYER__SET_EVERYONE_IGNORE_PLAYER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_ALL_RANDOM_PEDS_FLEE", mruby__PLAYER__SET_ALL_RANDOM_PEDS_FLEE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME", mruby__PLAYER__SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_HUD_ANIM_STOP_LEVEL", mruby__PLAYER__SET_HUD_ANIM_STOP_LEVEL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_AREAS_GENERATOR_ORIENTATION", mruby__PLAYER__SET_AREAS_GENERATOR_ORIENTATION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS", mruby__PLAYER__SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_WANTED_LEVEL_MULTIPLIER", mruby__PLAYER__SET_WANTED_LEVEL_MULTIPLIER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_WANTED_LEVEL_DIFFICULTY", mruby__PLAYER__SET_WANTED_LEVEL_DIFFICULTY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "RESET_WANTED_LEVEL_DIFFICULTY", mruby__PLAYER__RESET_WANTED_LEVEL_DIFFICULTY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "START_FIRING_AMNESTY", mruby__PLAYER__START_FIRING_AMNESTY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "REPORT_CRIME", mruby__PLAYER__REPORT_CRIME, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_player, "_0x9A987297ED8BD838", mruby__PLAYER___0x9A987297ED8BD838, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "_0xBC9490CA15AEA8FB", mruby__PLAYER___0xBC9490CA15AEA8FB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0x4669B3ED80F24B4E", mruby__PLAYER___0x4669B3ED80F24B4E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0xAD73CE5A09E42D12", mruby__PLAYER___0xAD73CE5A09E42D12, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0x36F1B38855F2A8DF", mruby__PLAYER___0x36F1B38855F2A8DF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0xDC64D2C53493ED12", mruby__PLAYER___0xDC64D2C53493ED12, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0xB45EFF719D8427A6", mruby__PLAYER___0xB45EFF719D8427A6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0x0032A6DBA562C518", mruby__PLAYER___0x0032A6DBA562C518, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "CAN_PLAYER_START_MISSION", mruby__PLAYER__CAN_PLAYER_START_MISSION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "IS_PLAYER_READY_FOR_CUTSCENE", mruby__PLAYER__IS_PLAYER_READY_FOR_CUTSCENE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "IS_PLAYER_TARGETTING_ENTITY", mruby__PLAYER__IS_PLAYER_TARGETTING_ENTITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "IS_PLAYER_FREE_AIMING", mruby__PLAYER__IS_PLAYER_FREE_AIMING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "IS_PLAYER_FREE_AIMING_AT_ENTITY", mruby__PLAYER__IS_PLAYER_FREE_AIMING_AT_ENTITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_LOCKON_RANGE_OVERRIDE", mruby__PLAYER__SET_PLAYER_LOCKON_RANGE_OVERRIDE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_CAN_DO_DRIVE_BY", mruby__PLAYER__SET_PLAYER_CAN_DO_DRIVE_BY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_CAN_BE_HASSLED_BY_GANGS", mruby__PLAYER__SET_PLAYER_CAN_BE_HASSLED_BY_GANGS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_CAN_USE_COVER", mruby__PLAYER__SET_PLAYER_CAN_USE_COVER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "GET_MAX_WANTED_LEVEL", mruby__PLAYER__GET_MAX_WANTED_LEVEL, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "IS_PLAYER_TARGETTING_ANYTHING", mruby__PLAYER__IS_PLAYER_TARGETTING_ANYTHING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_PLAYER_SPRINT", mruby__PLAYER__SET_PLAYER_SPRINT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "RESET_PLAYER_STAMINA", mruby__PLAYER__RESET_PLAYER_STAMINA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "RESTORE_PLAYER_STAMINA", mruby__PLAYER__RESTORE_PLAYER_STAMINA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "GET_PLAYER_SPRINT_STAMINA_REMAINING", mruby__PLAYER__GET_PLAYER_SPRINT_STAMINA_REMAINING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "GET_PLAYER_SPRINT_TIME_REMAINING", mruby__PLAYER__GET_PLAYER_SPRINT_TIME_REMAINING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "GET_PLAYER_UNDERWATER_TIME_REMAINING", mruby__PLAYER__GET_PLAYER_UNDERWATER_TIME_REMAINING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "GET_PLAYER_GROUP", mruby__PLAYER__GET_PLAYER_GROUP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "GET_PLAYER_MAX_ARMOUR", mruby__PLAYER__GET_PLAYER_MAX_ARMOUR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "IS_PLAYER_CONTROL_ON", mruby__PLAYER__IS_PLAYER_CONTROL_ON, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0x7C814D2FB49F40C0", mruby__PLAYER___0x7C814D2FB49F40C0, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "IS_PLAYER_SCRIPT_CONTROL_ON", mruby__PLAYER__IS_PLAYER_SCRIPT_CONTROL_ON, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "IS_PLAYER_CLIMBING", mruby__PLAYER__IS_PLAYER_CLIMBING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "IS_PLAYER_BEING_ARRESTED", mruby__PLAYER__IS_PLAYER_BEING_ARRESTED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "RESET_PLAYER_ARREST_STATE", mruby__PLAYER__RESET_PLAYER_ARREST_STATE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "GET_PLAYERS_LAST_VEHICLE", mruby__PLAYER__GET_PLAYERS_LAST_VEHICLE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "GET_PLAYER_INDEX", mruby__PLAYER__GET_PLAYER_INDEX, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "INT_TO_PLAYERINDEX", mruby__PLAYER__INT_TO_PLAYERINDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "INT_TO_PARTICIPANTINDEX", mruby__PLAYER__INT_TO_PARTICIPANTINDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "GET_TIME_SINCE_PLAYER_HIT_VEHICLE", mruby__PLAYER__GET_TIME_SINCE_PLAYER_HIT_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "GET_TIME_SINCE_PLAYER_HIT_PED", mruby__PLAYER__GET_TIME_SINCE_PLAYER_HIT_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT", mruby__PLAYER__GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC", mruby__PLAYER__GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "IS_PLAYER_FREE_FOR_AMBIENT_TASK", mruby__PLAYER__IS_PLAYER_FREE_FOR_AMBIENT_TASK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "PLAYER_ID", mruby__PLAYER__PLAYER_ID, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "PLAYER_PED_ID", mruby__PLAYER__PLAYER_PED_ID, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "NETWORK_PLAYER_ID_TO_INT", mruby__PLAYER__NETWORK_PLAYER_ID_TO_INT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "HAS_FORCE_CLEANUP_OCCURRED", mruby__PLAYER__HAS_FORCE_CLEANUP_OCCURRED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "FORCE_CLEANUP", mruby__PLAYER__FORCE_CLEANUP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME", mruby__PLAYER__FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID", mruby__PLAYER__FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP", mruby__PLAYER__GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE", mruby__PLAYER__SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE", mruby__PLAYER__SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "GIVE_ACHIEVEMENT_TO_PLAYER", mruby__PLAYER__GIVE_ACHIEVEMENT_TO_PLAYER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0xC2AFFFDABBDC2C5C", mruby__PLAYER___0xC2AFFFDABBDC2C5C, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "_0x1C186837D0619335", mruby__PLAYER___0x1C186837D0619335, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "HAS_ACHIEVEMENT_BEEN_PASSED", mruby__PLAYER__HAS_ACHIEVEMENT_BEEN_PASSED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "IS_PLAYER_ONLINE", mruby__PLAYER__IS_PLAYER_ONLINE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "IS_PLAYER_LOGGING_IN_NP", mruby__PLAYER__IS_PLAYER_LOGGING_IN_NP, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "DISPLAY_SYSTEM_SIGNIN_UI", mruby__PLAYER__DISPLAY_SYSTEM_SIGNIN_UI, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "IS_SYSTEM_UI_BEING_DISPLAYED", mruby__PLAYER__IS_SYSTEM_UI_BEING_DISPLAYED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "SET_PLAYER_INVINCIBLE", mruby__PLAYER__SET_PLAYER_INVINCIBLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "GET_PLAYER_INVINCIBLE", mruby__PLAYER__GET_PLAYER_INVINCIBLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0xCAC57395B151135F", mruby__PLAYER___0xCAC57395B151135F, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "REMOVE_PLAYER_HELMET", mruby__PLAYER__REMOVE_PLAYER_HELMET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "GIVE_PLAYER_RAGDOLL_CONTROL", mruby__PLAYER__GIVE_PLAYER_RAGDOLL_CONTROL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_LOCKON", mruby__PLAYER__SET_PLAYER_LOCKON, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_TARGETING_MODE", mruby__PLAYER__SET_PLAYER_TARGETING_MODE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0x5702B917B99DB1CD", mruby__PLAYER___0x5702B917B99DB1CD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0xB9CF1F793A9F1BF1", mruby__PLAYER___0xB9CF1F793A9F1BF1, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED", mruby__PLAYER__CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED", mruby__PLAYER__HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED", mruby__PLAYER__CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED", mruby__PLAYER__HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE", mruby__PLAYER__SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_SWIM_MULTIPLIER_FOR_PLAYER", mruby__PLAYER__SET_SWIM_MULTIPLIER_FOR_PLAYER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER", mruby__PLAYER__SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "GET_TIME_SINCE_LAST_ARREST", mruby__PLAYER__GET_TIME_SINCE_LAST_ARREST, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "GET_TIME_SINCE_LAST_DEATH", mruby__PLAYER__GET_TIME_SINCE_LAST_DEATH, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "ASSISTED_MOVEMENT_CLOSE_ROUTE", mruby__PLAYER__ASSISTED_MOVEMENT_CLOSE_ROUTE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "ASSISTED_MOVEMENT_FLUSH_ROUTE", mruby__PLAYER__ASSISTED_MOVEMENT_FLUSH_ROUTE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "SET_PLAYER_FORCED_AIM", mruby__PLAYER__SET_PLAYER_FORCED_AIM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_FORCED_ZOOM", mruby__PLAYER__SET_PLAYER_FORCED_ZOOM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_FORCE_SKIP_AIM_INTRO", mruby__PLAYER__SET_PLAYER_FORCE_SKIP_AIM_INTRO, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "DISABLE_PLAYER_FIRING", mruby__PLAYER__DISABLE_PLAYER_FIRING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "_0xB885852C39CC265D", mruby__PLAYER___0xB885852C39CC265D, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "SET_DISABLE_AMBIENT_MELEE_MOVE", mruby__PLAYER__SET_DISABLE_AMBIENT_MELEE_MOVE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_MAX_ARMOUR", mruby__PLAYER__SET_PLAYER_MAX_ARMOUR, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SPECIAL_ABILITY_DEACTIVATE", mruby__PLAYER__SPECIAL_ABILITY_DEACTIVATE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SPECIAL_ABILITY_DEACTIVATE_FAST", mruby__PLAYER__SPECIAL_ABILITY_DEACTIVATE_FAST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SPECIAL_ABILITY_RESET", mruby__PLAYER__SPECIAL_ABILITY_RESET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0xC9A763D8FE87436A", mruby__PLAYER___0xC9A763D8FE87436A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SPECIAL_ABILITY_CHARGE_SMALL", mruby__PLAYER__SPECIAL_ABILITY_CHARGE_SMALL, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_player, "SPECIAL_ABILITY_CHARGE_MEDIUM", mruby__PLAYER__SPECIAL_ABILITY_CHARGE_MEDIUM, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_player, "SPECIAL_ABILITY_CHARGE_LARGE", mruby__PLAYER__SPECIAL_ABILITY_CHARGE_LARGE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_player, "SPECIAL_ABILITY_CHARGE_CONTINUOUS", mruby__PLAYER__SPECIAL_ABILITY_CHARGE_CONTINUOUS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SPECIAL_ABILITY_CHARGE_ABSOLUTE", mruby__PLAYER__SPECIAL_ABILITY_CHARGE_ABSOLUTE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_player, "SPECIAL_ABILITY_CHARGE_NORMALIZED", mruby__PLAYER__SPECIAL_ABILITY_CHARGE_NORMALIZED, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_player, "SPECIAL_ABILITY_FILL_METER", mruby__PLAYER__SPECIAL_ABILITY_FILL_METER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SPECIAL_ABILITY_DEPLETE_METER", mruby__PLAYER__SPECIAL_ABILITY_DEPLETE_METER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SPECIAL_ABILITY_LOCK", mruby__PLAYER__SPECIAL_ABILITY_LOCK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SPECIAL_ABILITY_UNLOCK", mruby__PLAYER__SPECIAL_ABILITY_UNLOCK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "IS_SPECIAL_ABILITY_UNLOCKED", mruby__PLAYER__IS_SPECIAL_ABILITY_UNLOCKED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "IS_SPECIAL_ABILITY_ACTIVE", mruby__PLAYER__IS_SPECIAL_ABILITY_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "IS_SPECIAL_ABILITY_METER_FULL", mruby__PLAYER__IS_SPECIAL_ABILITY_METER_FULL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "ENABLE_SPECIAL_ABILITY", mruby__PLAYER__ENABLE_SPECIAL_ABILITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "IS_SPECIAL_ABILITY_ENABLED", mruby__PLAYER__IS_SPECIAL_ABILITY_ENABLED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_SPECIAL_ABILITY_MULTIPLIER", mruby__PLAYER__SET_SPECIAL_ABILITY_MULTIPLIER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0xFFEE8FA29AB9A18E", mruby__PLAYER___0xFFEE8FA29AB9A18E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0x5FC472C501CCADB3", mruby__PLAYER___0x5FC472C501CCADB3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0xF10B44FD479D69F3", mruby__PLAYER___0xF10B44FD479D69F3, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "_0xDD2620B7B9D16FF1", mruby__PLAYER___0xDD2620B7B9D16FF1, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "START_PLAYER_TELEPORT", mruby__PLAYER__START_PLAYER_TELEPORT, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_player, "_HAS_PLAYER_TELEPORT_FINISHED", mruby__PLAYER___HAS_PLAYER_TELEPORT_FINISHED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "STOP_PLAYER_TELEPORT", mruby__PLAYER__STOP_PLAYER_TELEPORT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "IS_PLAYER_TELEPORT_ACTIVE", mruby__PLAYER__IS_PLAYER_TELEPORT_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "GET_PLAYER_CURRENT_STEALTH_NOISE", mruby__PLAYER__GET_PLAYER_CURRENT_STEALTH_NOISE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER", mruby__PLAYER__SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_WEAPON_DAMAGE_MODIFIER", mruby__PLAYER__SET_PLAYER_WEAPON_DAMAGE_MODIFIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_WEAPON_DEFENSE_MODIFIER", mruby__PLAYER__SET_PLAYER_WEAPON_DEFENSE_MODIFIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER", mruby__PLAYER__SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER", mruby__PLAYER__SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_VEHICLE_DAMAGE_MODIFIER", mruby__PLAYER__SET_PLAYER_VEHICLE_DAMAGE_MODIFIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_VEHICLE_DEFENSE_MODIFIER", mruby__PLAYER__SET_PLAYER_VEHICLE_DEFENSE_MODIFIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_PARACHUTE_TINT_INDEX", mruby__PLAYER__SET_PLAYER_PARACHUTE_TINT_INDEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX", mruby__PLAYER__SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_PARACHUTE_PACK_TINT_INDEX", mruby__PLAYER__SET_PLAYER_PARACHUTE_PACK_TINT_INDEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_HAS_RESERVE_PARACHUTE", mruby__PLAYER__SET_PLAYER_HAS_RESERVE_PARACHUTE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "GET_PLAYER_HAS_RESERVE_PARACHUTE", mruby__PLAYER__GET_PLAYER_HAS_RESERVE_PARACHUTE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL", mruby__PLAYER__SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR", mruby__PLAYER__SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_player, "SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS", mruby__PLAYER__SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_NOISE_MULTIPLIER", mruby__PLAYER__SET_PLAYER_NOISE_MULTIPLIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_SNEAKING_NOISE_MULTIPLIER", mruby__PLAYER__SET_PLAYER_SNEAKING_NOISE_MULTIPLIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "CAN_PED_HEAR_PLAYER", mruby__PLAYER__CAN_PED_HEAR_PLAYER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SIMULATE_PLAYER_INPUT_GAIT", mruby__PLAYER__SIMULATE_PLAYER_INPUT_GAIT, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_player, "RESET_PLAYER_INPUT_GAIT", mruby__PLAYER__RESET_PLAYER_INPUT_GAIT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE", mruby__PLAYER__SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "_0xD2B315B6689D537D", mruby__PLAYER___0xD2B315B6689D537D, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_STEALTH_PERCEPTION_MODIFIER", mruby__PLAYER__SET_PLAYER_STEALTH_PERCEPTION_MODIFIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "_0x690A61A6D13583F6", mruby__PLAYER___0x690A61A6D13583F6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0x9EDD76E87D5D51BA", mruby__PLAYER___0x9EDD76E87D5D51BA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_PLAYER_SIMULATE_AIMING", mruby__PLAYER__SET_PLAYER_SIMULATE_AIMING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_CLOTH_PIN_FRAMES", mruby__PLAYER__SET_PLAYER_CLOTH_PIN_FRAMES, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_CLOTH_PACKAGE_INDEX", mruby__PLAYER__SET_PLAYER_CLOTH_PACKAGE_INDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_PLAYER_CLOTH_LOCK_COUNTER", mruby__PLAYER__SET_PLAYER_CLOTH_LOCK_COUNTER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "PLAYER_ATTACH_VIRTUAL_BOUND", mruby__PLAYER__PLAYER_ATTACH_VIRTUAL_BOUND, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_player, "PLAYER_DETACH_VIRTUAL_BOUND", mruby__PLAYER__PLAYER_DETACH_VIRTUAL_BOUND, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_player, "HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE", mruby__PLAYER__HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0x38D28DA81E4E9BF9", mruby__PLAYER___0x38D28DA81E4E9BF9, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0xBC0753C9CA14B506", mruby__PLAYER___0xBC0753C9CA14B506, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_player, "_0x5006D96C995A5827", mruby__PLAYER___0x5006D96C995A5827, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_player, "IS_PLAYER_RIDING_TRAIN", mruby__PLAYER__IS_PLAYER_RIDING_TRAIN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "HAS_PLAYER_LEFT_THE_WORLD", mruby__PLAYER__HAS_PLAYER_LEFT_THE_WORLD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0xFF300C7649724A0B", mruby__PLAYER___0xFF300C7649724A0B, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE", mruby__PLAYER__SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_player, "CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE", mruby__PLAYER__CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_PLAYER_PARACHUTE_MODEL_OVERRIDE", mruby__PLAYER__SET_PLAYER_PARACHUTE_MODEL_OVERRIDE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE", mruby__PLAYER__CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE", mruby__PLAYER__SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE", mruby__PLAYER__CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "DISABLE_PLAYER_VEHICLE_REWARDS", mruby__PLAYER__DISABLE_PLAYER_VEHICLE_REWARDS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0x2F7CEB6520288061", mruby__PLAYER___0x2F7CEB6520288061, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0x5DC40A8869C22141", mruby__PLAYER___0x5DC40A8869C22141, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_player, "_0x65FAEE425DE637B0", mruby__PLAYER___0x65FAEE425DE637B0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0x5501B7A5CDB79D37", mruby__PLAYER___0x5501B7A5CDB79D37, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_player, "_0x56105E599CAB0EFA", mruby__PLAYER___0x56105E599CAB0EFA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "DOES_ENTITY_EXIST", mruby__ENTITY__DOES_ENTITY_EXIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "DOES_ENTITY_BELONG_TO_THIS_SCRIPT", mruby__ENTITY__DOES_ENTITY_BELONG_TO_THIS_SCRIPT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "DOES_ENTITY_HAVE_DRAWABLE", mruby__ENTITY__DOES_ENTITY_HAVE_DRAWABLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "DOES_ENTITY_HAVE_PHYSICS", mruby__ENTITY__DOES_ENTITY_HAVE_PHYSICS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "HAS_ENTITY_ANIM_FINISHED", mruby__ENTITY__HAS_ENTITY_ANIM_FINISHED, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_entity, "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT", mruby__ENTITY__HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED", mruby__ENTITY__HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE", mruby__ENTITY__HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY", mruby__ENTITY__HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_entity, "HAS_ENTITY_CLEAR_LOS_TO_ENTITY", mruby__ENTITY__HAS_ENTITY_CLEAR_LOS_TO_ENTITY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_entity, "HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT", mruby__ENTITY__HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "HAS_ENTITY_COLLIDED_WITH_ANYTHING", mruby__ENTITY__HAS_ENTITY_COLLIDED_WITH_ANYTHING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_LAST_MATERIAL_HIT_BY_ENTITY", mruby__ENTITY__GET_LAST_MATERIAL_HIT_BY_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY", mruby__ENTITY__GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "FORCE_ENTITY_AI_AND_ANIMATION_UPDATE", mruby__ENTITY__FORCE_ENTITY_AI_AND_ANIMATION_UPDATE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_ANIM_CURRENT_TIME", mruby__ENTITY__GET_ENTITY_ANIM_CURRENT_TIME, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_ANIM_TOTAL_TIME", mruby__ENTITY__GET_ENTITY_ANIM_TOTAL_TIME, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_entity, "_GET_ANIM_DURATION", mruby__ENTITY___GET_ANIM_DURATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_ATTACHED_TO", mruby__ENTITY__GET_ENTITY_ATTACHED_TO, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_COORDS", mruby__ENTITY__GET_ENTITY_COORDS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_FORWARD_VECTOR", mruby__ENTITY__GET_ENTITY_FORWARD_VECTOR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_FORWARD_X", mruby__ENTITY__GET_ENTITY_FORWARD_X, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_FORWARD_Y", mruby__ENTITY__GET_ENTITY_FORWARD_Y, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_HEADING", mruby__ENTITY__GET_ENTITY_HEADING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "_GET_ENTITY_PHYSICS_HEADING", mruby__ENTITY___GET_ENTITY_PHYSICS_HEADING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_HEALTH", mruby__ENTITY__GET_ENTITY_HEALTH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_MAX_HEALTH", mruby__ENTITY__GET_ENTITY_MAX_HEALTH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_MAX_HEALTH", mruby__ENTITY__SET_ENTITY_MAX_HEALTH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_HEIGHT", mruby__ENTITY__GET_ENTITY_HEIGHT, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_HEIGHT_ABOVE_GROUND", mruby__ENTITY__GET_ENTITY_HEIGHT_ABOVE_GROUND, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_MODEL", mruby__ENTITY__GET_ENTITY_MODEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS", mruby__ENTITY__GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_entity, "GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS", mruby__ENTITY__GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_PITCH", mruby__ENTITY__GET_ENTITY_PITCH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_ROLL", mruby__ENTITY__GET_ENTITY_ROLL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_ROTATION", mruby__ENTITY__GET_ENTITY_ROTATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_ROTATION_VELOCITY", mruby__ENTITY__GET_ENTITY_ROTATION_VELOCITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_SPEED", mruby__ENTITY__GET_ENTITY_SPEED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_SPEED_VECTOR", mruby__ENTITY__GET_ENTITY_SPEED_VECTOR, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_UPRIGHT_VALUE", mruby__ENTITY__GET_ENTITY_UPRIGHT_VALUE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_VELOCITY", mruby__ENTITY__GET_ENTITY_VELOCITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_OBJECT_INDEX_FROM_ENTITY_INDEX", mruby__ENTITY__GET_OBJECT_INDEX_FROM_ENTITY_INDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_PED_INDEX_FROM_ENTITY_INDEX", mruby__ENTITY__GET_PED_INDEX_FROM_ENTITY_INDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_VEHICLE_INDEX_FROM_ENTITY_INDEX", mruby__ENTITY__GET_VEHICLE_INDEX_FROM_ENTITY_INDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_WORLD_POSITION_OF_ENTITY_BONE", mruby__ENTITY__GET_WORLD_POSITION_OF_ENTITY_BONE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "GET_NEAREST_PLAYER_TO_ENTITY", mruby__ENTITY__GET_NEAREST_PLAYER_TO_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM", mruby__ENTITY__GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_TYPE", mruby__ENTITY__GET_ENTITY_TYPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "_GET_ENTITY_POPULATION_TYPE", mruby__ENTITY___GET_ENTITY_POPULATION_TYPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_AN_ENTITY", mruby__ENTITY__IS_AN_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_A_PED", mruby__ENTITY__IS_ENTITY_A_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_A_MISSION_ENTITY", mruby__ENTITY__IS_ENTITY_A_MISSION_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_A_VEHICLE", mruby__ENTITY__IS_ENTITY_A_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_AN_OBJECT", mruby__ENTITY__IS_ENTITY_AN_OBJECT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_AT_COORD", mruby__ENTITY__IS_ENTITY_AT_COORD, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_AT_ENTITY", mruby__ENTITY__IS_ENTITY_AT_ENTITY, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_ATTACHED", mruby__ENTITY__IS_ENTITY_ATTACHED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_ATTACHED_TO_ANY_OBJECT", mruby__ENTITY__IS_ENTITY_ATTACHED_TO_ANY_OBJECT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_ATTACHED_TO_ANY_PED", mruby__ENTITY__IS_ENTITY_ATTACHED_TO_ANY_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_ATTACHED_TO_ANY_VEHICLE", mruby__ENTITY__IS_ENTITY_ATTACHED_TO_ANY_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_ATTACHED_TO_ENTITY", mruby__ENTITY__IS_ENTITY_ATTACHED_TO_ENTITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_DEAD", mruby__ENTITY__IS_ENTITY_DEAD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_IN_AIR", mruby__ENTITY__IS_ENTITY_IN_AIR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_IN_ANGLED_AREA", mruby__ENTITY__IS_ENTITY_IN_ANGLED_AREA, MRB_ARGS_REQ(11));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_IN_AREA", mruby__ENTITY__IS_ENTITY_IN_AREA, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_IN_ZONE", mruby__ENTITY__IS_ENTITY_IN_ZONE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_IN_WATER", mruby__ENTITY__IS_ENTITY_IN_WATER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_SUBMERGED_LEVEL", mruby__ENTITY__GET_ENTITY_SUBMERGED_LEVEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "_0x694E00132F2823ED", mruby__ENTITY___0x694E00132F2823ED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_ON_SCREEN", mruby__ENTITY__IS_ENTITY_ON_SCREEN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_PLAYING_ANIM", mruby__ENTITY__IS_ENTITY_PLAYING_ANIM, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_STATIC", mruby__ENTITY__IS_ENTITY_STATIC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_TOUCHING_ENTITY", mruby__ENTITY__IS_ENTITY_TOUCHING_ENTITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_TOUCHING_MODEL", mruby__ENTITY__IS_ENTITY_TOUCHING_MODEL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_UPRIGHT", mruby__ENTITY__IS_ENTITY_UPRIGHT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_UPSIDEDOWN", mruby__ENTITY__IS_ENTITY_UPSIDEDOWN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_VISIBLE", mruby__ENTITY__IS_ENTITY_VISIBLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_VISIBLE_TO_SCRIPT", mruby__ENTITY__IS_ENTITY_VISIBLE_TO_SCRIPT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_OCCLUDED", mruby__ENTITY__IS_ENTITY_OCCLUDED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "WOULD_ENTITY_BE_OCCLUDED", mruby__ENTITY__WOULD_ENTITY_BE_OCCLUDED, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_entity, "IS_ENTITY_WAITING_FOR_WORLD_COLLISION", mruby__ENTITY__IS_ENTITY_WAITING_FOR_WORLD_COLLISION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS", mruby__ENTITY__APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_entity, "APPLY_FORCE_TO_ENTITY", mruby__ENTITY__APPLY_FORCE_TO_ENTITY, MRB_ARGS_REQ(14));
  mrb_define_method(mrb, module_entity, "ATTACH_ENTITY_TO_ENTITY", mruby__ENTITY__ATTACH_ENTITY_TO_ENTITY, MRB_ARGS_REQ(15));
  mrb_define_method(mrb, module_entity, "ATTACH_ENTITY_TO_ENTITY_PHYSICALLY", mruby__ENTITY__ATTACH_ENTITY_TO_ENTITY_PHYSICALLY, MRB_ARGS_REQ(19));
  mrb_define_method(mrb, module_entity, "PROCESS_ENTITY_ATTACHMENTS", mruby__ENTITY__PROCESS_ENTITY_ATTACHMENTS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_BONE_INDEX_BY_NAME", mruby__ENTITY__GET_ENTITY_BONE_INDEX_BY_NAME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "CLEAR_ENTITY_LAST_DAMAGE_ENTITY", mruby__ENTITY__CLEAR_ENTITY_LAST_DAMAGE_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "DELETE_ENTITY", mruby__ENTITY__DELETE_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "DETACH_ENTITY", mruby__ENTITY__DETACH_ENTITY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_entity, "FREEZE_ENTITY_POSITION", mruby__ENTITY__FREEZE_ENTITY_POSITION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "_0x3910051CCECDB00C", mruby__ENTITY___0x3910051CCECDB00C, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "PLAY_ENTITY_ANIM", mruby__ENTITY__PLAY_ENTITY_ANIM, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_entity, "PLAY_SYNCHRONIZED_ENTITY_ANIM", mruby__ENTITY__PLAY_SYNCHRONIZED_ENTITY_ANIM, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_entity, "STOP_SYNCHRONIZED_MAP_ENTITY_ANIM", mruby__ENTITY__STOP_SYNCHRONIZED_MAP_ENTITY_ANIM, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_entity, "STOP_ENTITY_ANIM", mruby__ENTITY__STOP_ENTITY_ANIM, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_entity, "STOP_SYNCHRONIZED_ENTITY_ANIM", mruby__ENTITY__STOP_SYNCHRONIZED_ENTITY_ANIM, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_entity, "HAS_ANIM_EVENT_FIRED", mruby__ENTITY__HAS_ANIM_EVENT_FIRED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_ANIM_CURRENT_TIME", mruby__ENTITY__SET_ENTITY_ANIM_CURRENT_TIME, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_ANIM_SPEED", mruby__ENTITY__SET_ENTITY_ANIM_SPEED, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_AS_MISSION_ENTITY", mruby__ENTITY__SET_ENTITY_AS_MISSION_ENTITY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_AS_NO_LONGER_NEEDED", mruby__ENTITY__SET_ENTITY_AS_NO_LONGER_NEEDED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "SET_PED_AS_NO_LONGER_NEEDED", mruby__ENTITY__SET_PED_AS_NO_LONGER_NEEDED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "SET_VEHICLE_AS_NO_LONGER_NEEDED", mruby__ENTITY__SET_VEHICLE_AS_NO_LONGER_NEEDED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_CAN_BE_DAMAGED", mruby__ENTITY__SET_ENTITY_CAN_BE_DAMAGED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP", mruby__ENTITY__SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS", mruby__ENTITY__SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_COLLISION", mruby__ENTITY__SET_ENTITY_COLLISION, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_entity, "_0xCCF1E97BEFDAE480", mruby__ENTITY___0xCCF1E97BEFDAE480, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "_0x9EBC85ED0FFFE51C", mruby__ENTITY___0x9EBC85ED0FFFE51C, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_COORDS", mruby__ENTITY__SET_ENTITY_COORDS, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_entity, "_SET_ENTITY_COORDS_2", mruby__ENTITY___SET_ENTITY_COORDS_2, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_COORDS_NO_OFFSET", mruby__ENTITY__SET_ENTITY_COORDS_NO_OFFSET, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_DYNAMIC", mruby__ENTITY__SET_ENTITY_DYNAMIC, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_HEADING", mruby__ENTITY__SET_ENTITY_HEADING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_HEALTH", mruby__ENTITY__SET_ENTITY_HEALTH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_INVINCIBLE", mruby__ENTITY__SET_ENTITY_INVINCIBLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_IS_TARGET_PRIORITY", mruby__ENTITY__SET_ENTITY_IS_TARGET_PRIORITY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_LIGHTS", mruby__ENTITY__SET_ENTITY_LIGHTS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_LOAD_COLLISION_FLAG", mruby__ENTITY__SET_ENTITY_LOAD_COLLISION_FLAG, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "HAS_COLLISION_LOADED_AROUND_ENTITY", mruby__ENTITY__HAS_COLLISION_LOADED_AROUND_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_MAX_SPEED", mruby__ENTITY__SET_ENTITY_MAX_SPEED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_ONLY_DAMAGED_BY_PLAYER", mruby__ENTITY__SET_ENTITY_ONLY_DAMAGED_BY_PLAYER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP", mruby__ENTITY__SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_PROOFS", mruby__ENTITY__SET_ENTITY_PROOFS, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_QUATERNION", mruby__ENTITY__SET_ENTITY_QUATERNION, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_RECORDS_COLLISIONS", mruby__ENTITY__SET_ENTITY_RECORDS_COLLISIONS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_ROTATION", mruby__ENTITY__SET_ENTITY_ROTATION, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_VISIBLE", mruby__ENTITY__SET_ENTITY_VISIBLE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_VELOCITY", mruby__ENTITY__SET_ENTITY_VELOCITY, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_HAS_GRAVITY", mruby__ENTITY__SET_ENTITY_HAS_GRAVITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_LOD_DIST", mruby__ENTITY__SET_ENTITY_LOD_DIST, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_LOD_DIST", mruby__ENTITY__GET_ENTITY_LOD_DIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_ALPHA", mruby__ENTITY__SET_ENTITY_ALPHA, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_entity, "GET_ENTITY_ALPHA", mruby__ENTITY__GET_ENTITY_ALPHA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "RESET_ENTITY_ALPHA", mruby__ENTITY__RESET_ENTITY_ALPHA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "_0x5C3B791D580E0BC2", mruby__ENTITY___0x5C3B791D580E0BC2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_ALWAYS_PRERENDER", mruby__ENTITY__SET_ENTITY_ALWAYS_PRERENDER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_RENDER_SCORCHED", mruby__ENTITY__SET_ENTITY_RENDER_SCORCHED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_TRAFFICLIGHT_OVERRIDE", mruby__ENTITY__SET_ENTITY_TRAFFICLIGHT_OVERRIDE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "_0x78E8E3A640178255", mruby__ENTITY___0x78E8E3A640178255, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_entity, "CREATE_MODEL_SWAP", mruby__ENTITY__CREATE_MODEL_SWAP, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_entity, "REMOVE_MODEL_SWAP", mruby__ENTITY__REMOVE_MODEL_SWAP, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_entity, "CREATE_MODEL_HIDE", mruby__ENTITY__CREATE_MODEL_HIDE, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_entity, "CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS", mruby__ENTITY__CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_entity, "REMOVE_MODEL_HIDE", mruby__ENTITY__REMOVE_MODEL_HIDE, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_entity, "CREATE_FORCED_OBJECT", mruby__ENTITY__CREATE_FORCED_OBJECT, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_entity, "REMOVE_FORCED_OBJECT", mruby__ENTITY__REMOVE_FORCED_OBJECT, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_NO_COLLISION_ENTITY", mruby__ENTITY__SET_ENTITY_NO_COLLISION_ENTITY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_entity, "SET_ENTITY_MOTION_BLUR", mruby__ENTITY__SET_ENTITY_MOTION_BLUR, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "_0xE12ABE5E3A389A6C", mruby__ENTITY___0xE12ABE5E3A389A6C, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "_0xA80AE305E0A3044F", mruby__ENTITY___0xA80AE305E0A3044F, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "_0xDC6F8601FAF2E893", mruby__ENTITY___0xDC6F8601FAF2E893, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "_0x2C2E3DC128F44309", mruby__ENTITY___0x2C2E3DC128F44309, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_entity, "_0x1A092BB0C3808B96", mruby__ENTITY___0x1A092BB0C3808B96, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "CREATE_PED", mruby__PED__CREATE_PED, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_ped, "DELETE_PED", mruby__PED__DELETE_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "CLONE_PED", mruby__PED__CLONE_PED, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "_ASSIGN_PLAYER_TO_PED", mruby__PED___ASSIGN_PLAYER_TO_PED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_VEHICLE", mruby__PED__IS_PED_IN_VEHICLE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_MODEL", mruby__PED__IS_PED_IN_MODEL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_ANY_VEHICLE", mruby__PED__IS_PED_IN_ANY_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_COP_PED_IN_AREA_3D", mruby__PED__IS_COP_PED_IN_AREA_3D, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ped, "IS_PED_INJURED", mruby__PED__IS_PED_INJURED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_HURT", mruby__PED__IS_PED_HURT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_FATALLY_INJURED", mruby__PED__IS_PED_FATALLY_INJURED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_DEAD_OR_DYING", mruby__PED__IS_PED_DEAD_OR_DYING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_CONVERSATION_PED_DEAD", mruby__PED__IS_CONVERSATION_PED_DEAD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_AIMING_FROM_COVER", mruby__PED__IS_PED_AIMING_FROM_COVER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_RELOADING", mruby__PED__IS_PED_RELOADING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_A_PLAYER", mruby__PED__IS_PED_A_PLAYER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "CREATE_PED_INSIDE_VEHICLE", mruby__PED__CREATE_PED_INSIDE_VEHICLE, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ped, "SET_PED_DESIRED_HEADING", mruby__PED__SET_PED_DESIRED_HEADING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xFF287323B0E2C69A", mruby__PED___0xFF287323B0E2C69A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_FACING_PED", mruby__PED__IS_PED_FACING_PED, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_MELEE_COMBAT", mruby__PED__IS_PED_IN_MELEE_COMBAT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_STOPPED", mruby__PED__IS_PED_STOPPED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_SHOOTING_IN_AREA", mruby__PED__IS_PED_SHOOTING_IN_AREA, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_ped, "IS_ANY_PED_SHOOTING_IN_AREA", mruby__PED__IS_ANY_PED_SHOOTING_IN_AREA, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_ped, "IS_PED_SHOOTING", mruby__PED__IS_PED_SHOOTING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_ACCURACY", mruby__PED__SET_PED_ACCURACY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_PED_ACCURACY", mruby__PED__GET_PED_ACCURACY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_MODEL", mruby__PED__IS_PED_MODEL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "EXPLODE_PED_HEAD", mruby__PED__EXPLODE_PED_HEAD, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "REMOVE_PED_ELEGANTLY", mruby__PED__REMOVE_PED_ELEGANTLY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "ADD_ARMOUR_TO_PED", mruby__PED__ADD_ARMOUR_TO_PED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_ARMOUR", mruby__PED__SET_PED_ARMOUR, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_INTO_VEHICLE", mruby__PED__SET_PED_INTO_VEHICLE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "SET_PED_ALLOW_VEHICLES_OVERRIDE", mruby__PED__SET_PED_ALLOW_VEHICLES_OVERRIDE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "CAN_CREATE_RANDOM_PED", mruby__PED__CAN_CREATE_RANDOM_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "CREATE_RANDOM_PED", mruby__PED__CREATE_RANDOM_PED, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "CREATE_RANDOM_PED_AS_DRIVER", mruby__PED__CREATE_RANDOM_PED_AS_DRIVER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "CAN_CREATE_RANDOM_DRIVER", mruby__PED__CAN_CREATE_RANDOM_DRIVER, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "CAN_CREATE_RANDOM_BIKE_RIDER", mruby__PED__CAN_CREATE_RANDOM_BIKE_RIDER, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "SET_PED_MOVE_ANIMS_BLEND_OUT", mruby__PED__SET_PED_MOVE_ANIMS_BLEND_OUT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_BE_DRAGGED_OUT", mruby__PED__SET_PED_CAN_BE_DRAGGED_OUT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xF2BEBCDFAFDAA19E", mruby__PED___0xF2BEBCDFAFDAA19E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_MALE", mruby__PED__IS_PED_MALE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_HUMAN", mruby__PED__IS_PED_HUMAN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_VEHICLE_PED_IS_IN", mruby__PED__GET_VEHICLE_PED_IS_IN, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "RESET_PED_LAST_VEHICLE", mruby__PED__RESET_PED_LAST_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_DENSITY_MULTIPLIER_THIS_FRAME", mruby__PED__SET_PED_DENSITY_MULTIPLIER_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME", mruby__PED__SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x5A7F62FDA59759BD", mruby__PED___0x5A7F62FDA59759BD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME", mruby__PED__SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "SET_PED_NON_CREATION_AREA", mruby__PED__SET_PED_NON_CREATION_AREA, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ped, "CLEAR_PED_NON_CREATION_AREA", mruby__PED__CLEAR_PED_NON_CREATION_AREA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "_0x4759CC730F947C81", mruby__PED___0x4759CC730F947C81, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "IS_PED_ON_MOUNT", mruby__PED__IS_PED_ON_MOUNT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_MOUNT", mruby__PED__GET_MOUNT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_ON_VEHICLE", mruby__PED__IS_PED_ON_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_ON_SPECIFIC_VEHICLE", mruby__PED__IS_PED_ON_SPECIFIC_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_MONEY", mruby__PED__SET_PED_MONEY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_PED_MONEY", mruby__PED__GET_PED_MONEY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xFF4803BC019852D9", mruby__PED___0xFF4803BC019852D9, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x6B0E6172C9A4D902", mruby__PED___0x6B0E6172C9A4D902, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x9911F4A24485F653", mruby__PED___0x9911F4A24485F653, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_SUFFERS_CRITICAL_HITS", mruby__PED__SET_PED_SUFFERS_CRITICAL_HITS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xAFC976FD0580C7B3", mruby__PED___0xAFC976FD0580C7B3, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_PED_SITTING_IN_VEHICLE", mruby__PED__IS_PED_SITTING_IN_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_PED_SITTING_IN_ANY_VEHICLE", mruby__PED__IS_PED_SITTING_IN_ANY_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_ON_FOOT", mruby__PED__IS_PED_ON_FOOT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_ON_ANY_BIKE", mruby__PED__IS_PED_ON_ANY_BIKE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_PLANTING_BOMB", mruby__PED__IS_PED_PLANTING_BOMB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_DEAD_PED_PICKUP_COORDS", mruby__PED__GET_DEAD_PED_PICKUP_COORDS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_ANY_BOAT", mruby__PED__IS_PED_IN_ANY_BOAT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_ANY_SUB", mruby__PED__IS_PED_IN_ANY_SUB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_ANY_HELI", mruby__PED__IS_PED_IN_ANY_HELI, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_ANY_PLANE", mruby__PED__IS_PED_IN_ANY_PLANE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_FLYING_VEHICLE", mruby__PED__IS_PED_IN_FLYING_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_DIES_IN_WATER", mruby__PED__SET_PED_DIES_IN_WATER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_DIES_IN_SINKING_VEHICLE", mruby__PED__SET_PED_DIES_IN_SINKING_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_PED_ARMOUR", mruby__PED__GET_PED_ARMOUR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_STAY_IN_VEHICLE_WHEN_JACKED", mruby__PED__SET_PED_STAY_IN_VEHICLE_WHEN_JACKED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_BE_SHOT_IN_VEHICLE", mruby__PED__SET_PED_CAN_BE_SHOT_IN_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "CLEAR_PED_LAST_DAMAGE_BONE", mruby__PED__CLEAR_PED_LAST_DAMAGE_BONE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_AI_WEAPON_DAMAGE_MODIFIER", mruby__PED__SET_AI_WEAPON_DAMAGE_MODIFIER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "RESET_AI_WEAPON_DAMAGE_MODIFIER", mruby__PED__RESET_AI_WEAPON_DAMAGE_MODIFIER, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER", mruby__PED__SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER", mruby__PED__RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "_0x2F3C3D9F50681DE4", mruby__PED___0x2F3C3D9F50681DE4, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_BE_TARGETTED", mruby__PED__SET_PED_CAN_BE_TARGETTED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_BE_TARGETTED_BY_TEAM", mruby__PED__SET_PED_CAN_BE_TARGETTED_BY_TEAM, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_BE_TARGETTED_BY_PLAYER", mruby__PED__SET_PED_CAN_BE_TARGETTED_BY_PLAYER, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "_0x061CB768363D6424", mruby__PED___0x061CB768363D6424, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_TIME_EXCLUSIVE_DISPLAY_TEXTURE", mruby__PED__SET_TIME_EXCLUSIVE_DISPLAY_TEXTURE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_ANY_POLICE_VEHICLE", mruby__PED__IS_PED_IN_ANY_POLICE_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "FORCE_PED_TO_OPEN_PARACHUTE", mruby__PED__FORCE_PED_TO_OPEN_PARACHUTE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_PARACHUTE_FREE_FALL", mruby__PED__IS_PED_IN_PARACHUTE_FREE_FALL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_FALLING", mruby__PED__IS_PED_FALLING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_JUMPING", mruby__PED__IS_PED_JUMPING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_CLIMBING", mruby__PED__IS_PED_CLIMBING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_VAULTING", mruby__PED__IS_PED_VAULTING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_DIVING", mruby__PED__IS_PED_DIVING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_JUMPING_OUT_OF_VEHICLE", mruby__PED__IS_PED_JUMPING_OUT_OF_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x26AF0E8E30BD2A2C", mruby__PED___0x26AF0E8E30BD2A2C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_PED_PARACHUTE_STATE", mruby__PED__GET_PED_PARACHUTE_STATE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_PED_PARACHUTE_LANDING_TYPE", mruby__PED__GET_PED_PARACHUTE_LANDING_TYPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_PARACHUTE_TINT_INDEX", mruby__PED__SET_PED_PARACHUTE_TINT_INDEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_RESERVE_PARACHUTE_TINT_INDEX", mruby__PED__SET_PED_RESERVE_PARACHUTE_TINT_INDEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x8C4F3BF23B6237DB", mruby__PED___0x8C4F3BF23B6237DB, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "SET_PED_DUCKING", mruby__PED__SET_PED_DUCKING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_PED_DUCKING", mruby__PED__IS_PED_DUCKING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_ANY_TAXI", mruby__PED__IS_PED_IN_ANY_TAXI, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_ID_RANGE", mruby__PED__SET_PED_ID_RANGE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x52D59AB61DDC05DD", mruby__PED___0x52D59AB61DDC05DD, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xEC4B4B3B9908052A", mruby__PED___0xEC4B4B3B9908052A, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x733C87D4CE22BEA2", mruby__PED___0x733C87D4CE22BEA2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_SEEING_RANGE", mruby__PED__SET_PED_SEEING_RANGE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_HEARING_RANGE", mruby__PED__SET_PED_HEARING_RANGE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_VISUAL_FIELD_MIN_ANGLE", mruby__PED__SET_PED_VISUAL_FIELD_MIN_ANGLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_VISUAL_FIELD_MAX_ANGLE", mruby__PED__SET_PED_VISUAL_FIELD_MAX_ANGLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE", mruby__PED__SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE", mruby__PED__SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE", mruby__PED__SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_VISUAL_FIELD_CENTER_ANGLE", mruby__PED__SET_PED_VISUAL_FIELD_CENTER_ANGLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_STEALTH_MOVEMENT", mruby__PED__SET_PED_STEALTH_MOVEMENT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "GET_PED_STEALTH_MOVEMENT", mruby__PED__GET_PED_STEALTH_MOVEMENT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "CREATE_GROUP", mruby__PED__CREATE_GROUP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_AS_GROUP_LEADER", mruby__PED__SET_PED_AS_GROUP_LEADER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_AS_GROUP_MEMBER", mruby__PED__SET_PED_AS_GROUP_MEMBER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_TELEPORT_TO_GROUP_LEADER", mruby__PED__SET_PED_CAN_TELEPORT_TO_GROUP_LEADER, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "REMOVE_GROUP", mruby__PED__REMOVE_GROUP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "REMOVE_PED_FROM_GROUP", mruby__PED__REMOVE_PED_FROM_GROUP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_GROUP_MEMBER", mruby__PED__IS_PED_GROUP_MEMBER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_PED_HANGING_ON_TO_VEHICLE", mruby__PED__IS_PED_HANGING_ON_TO_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_GROUP_SEPARATION_RANGE", mruby__PED__SET_GROUP_SEPARATION_RANGE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_MIN_GROUND_TIME_FOR_STUNGUN", mruby__PED__SET_PED_MIN_GROUND_TIME_FOR_STUNGUN, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_PED_PRONE", mruby__PED__IS_PED_PRONE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_COMBAT", mruby__PED__IS_PED_IN_COMBAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "CAN_PED_IN_COMBAT_SEE_TARGET", mruby__PED__CAN_PED_IN_COMBAT_SEE_TARGET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_PED_DOING_DRIVEBY", mruby__PED__IS_PED_DOING_DRIVEBY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_JACKING", mruby__PED__IS_PED_JACKING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_BEING_JACKED", mruby__PED__IS_PED_BEING_JACKED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_BEING_STUNNED", mruby__PED__IS_PED_BEING_STUNNED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_PEDS_JACKER", mruby__PED__GET_PEDS_JACKER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_JACK_TARGET", mruby__PED__GET_JACK_TARGET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_FLEEING", mruby__PED__IS_PED_FLEEING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_COVER", mruby__PED__IS_PED_IN_COVER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_COVER_FACING_LEFT", mruby__PED__IS_PED_IN_COVER_FACING_LEFT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x6A03BF943D767C93", mruby__PED___0x6A03BF943D767C93, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_GOING_INTO_COVER", mruby__PED__IS_PED_GOING_INTO_COVER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_PINNED_DOWN", mruby__PED__SET_PED_PINNED_DOWN, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "GET_SEAT_PED_IS_TRYING_TO_ENTER", mruby__PED__GET_SEAT_PED_IS_TRYING_TO_ENTER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_VEHICLE_PED_IS_TRYING_TO_ENTER", mruby__PED__GET_VEHICLE_PED_IS_TRYING_TO_ENTER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_GET_PED_KILLER", mruby__PED___GET_PED_KILLER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_PED_CAUSE_OF_DEATH", mruby__PED__GET_PED_CAUSE_OF_DEATH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_GET_PED_TIME_OF_DEATH", mruby__PED___GET_PED_TIME_OF_DEATH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x5407B7288D0478B7", mruby__PED___0x5407B7288D0478B7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x336B3D200AB007CB", mruby__PED___0x336B3D200AB007CB, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH", mruby__PED__SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_RELATIONSHIP_GROUP_HASH", mruby__PED__SET_PED_RELATIONSHIP_GROUP_HASH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_RELATIONSHIP_BETWEEN_GROUPS", mruby__PED__SET_RELATIONSHIP_BETWEEN_GROUPS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "CLEAR_RELATIONSHIP_BETWEEN_GROUPS", mruby__PED__CLEAR_RELATIONSHIP_BETWEEN_GROUPS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "REMOVE_RELATIONSHIP_GROUP", mruby__PED__REMOVE_RELATIONSHIP_GROUP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_RELATIONSHIP_BETWEEN_PEDS", mruby__PED__GET_RELATIONSHIP_BETWEEN_PEDS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH", mruby__PED__GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_PED_RELATIONSHIP_GROUP_HASH", mruby__PED__GET_PED_RELATIONSHIP_GROUP_HASH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_RELATIONSHIP_BETWEEN_GROUPS", mruby__PED__GET_RELATIONSHIP_BETWEEN_GROUPS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_BE_TARGETED_WITHOUT_LOS", mruby__PED__SET_PED_CAN_BE_TARGETED_WITHOUT_LOS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_TO_INFORM_RESPECTED_FRIENDS", mruby__PED__SET_PED_TO_INFORM_RESPECTED_FRIENDS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "IS_PED_RESPONDING_TO_EVENT", mruby__PED__IS_PED_RESPONDING_TO_EVENT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_FIRING_PATTERN", mruby__PED__SET_PED_FIRING_PATTERN, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_SHOOT_RATE", mruby__PED__SET_PED_SHOOT_RATE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_COMBAT_FLOAT", mruby__PED__SET_COMBAT_FLOAT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "GET_COMBAT_FLOAT", mruby__PED__GET_COMBAT_FLOAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "DOES_GROUP_EXIST", mruby__PED__DOES_GROUP_EXIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_PED_GROUP_INDEX", mruby__PED__GET_PED_GROUP_INDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_GROUP", mruby__PED__IS_PED_IN_GROUP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_PLAYER_PED_IS_FOLLOWING", mruby__PED__GET_PLAYER_PED_IS_FOLLOWING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_GROUP_FORMATION", mruby__PED__SET_GROUP_FORMATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_GROUP_FORMATION_SPACING", mruby__PED__SET_GROUP_FORMATION_SPACING, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "RESET_GROUP_FORMATION_DEFAULT_SPACING", mruby__PED__RESET_GROUP_FORMATION_DEFAULT_SPACING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_VEHICLE_PED_IS_USING", mruby__PED__GET_VEHICLE_PED_IS_USING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_EXCLUSIVE_PHONE_RELATIONSHIPS", mruby__PED__SET_EXCLUSIVE_PHONE_RELATIONSHIPS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_GRAVITY", mruby__PED__SET_PED_GRAVITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "APPLY_DAMAGE_TO_PED", mruby__PED__APPLY_DAMAGE_TO_PED, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "_0x36B77BB84687C318", mruby__PED___0x36B77BB84687C318, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_ALLOWED_TO_DUCK", mruby__PED__SET_PED_ALLOWED_TO_DUCK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_NEVER_LEAVES_GROUP", mruby__PED__SET_PED_NEVER_LEAVES_GROUP, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_PED_TYPE", mruby__PED__GET_PED_TYPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_AS_COP", mruby__PED__SET_PED_AS_COP, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_MAX_HEALTH", mruby__PED__SET_PED_MAX_HEALTH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_PED_MAX_HEALTH", mruby__PED__GET_PED_MAX_HEALTH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_MAX_TIME_IN_WATER", mruby__PED__SET_PED_MAX_TIME_IN_WATER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_MAX_TIME_UNDERWATER", mruby__PED__SET_PED_MAX_TIME_UNDERWATER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x2735233A786B1BEF", mruby__PED___0x2735233A786B1BEF, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x952F06BEECD775CC", mruby__PED___0x952F06BEECD775CC, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "_0xE6CA85E7259CE16B", mruby__PED___0xE6CA85E7259CE16B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE", mruby__PED__SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "CAN_KNOCK_PED_OFF_VEHICLE", mruby__PED__CAN_KNOCK_PED_OFF_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "KNOCK_PED_OFF_VEHICLE", mruby__PED__KNOCK_PED_OFF_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_COORDS_NO_GANG", mruby__PED__SET_PED_COORDS_NO_GANG, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "GET_PED_AS_GROUP_MEMBER", mruby__PED__GET_PED_AS_GROUP_MEMBER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_GET_PED_AS_GROUP_LEADER", mruby__PED___GET_PED_AS_GROUP_LEADER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_KEEP_TASK", mruby__PED__SET_PED_KEEP_TASK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x49E50BDB8BA4DAB2", mruby__PED___0x49E50BDB8BA4DAB2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_PED_SWIMMING", mruby__PED__IS_PED_SWIMMING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_SWIMMING_UNDER_WATER", mruby__PED__IS_PED_SWIMMING_UNDER_WATER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_COORDS_KEEP_VEHICLE", mruby__PED__SET_PED_COORDS_KEEP_VEHICLE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "SET_PED_DIES_IN_VEHICLE", mruby__PED__SET_PED_DIES_IN_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_CREATE_RANDOM_COPS", mruby__PED__SET_CREATE_RANDOM_COPS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS", mruby__PED__SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_CREATE_RANDOM_COPS_ON_SCENARIOS", mruby__PED__SET_CREATE_RANDOM_COPS_ON_SCENARIOS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "CAN_CREATE_RANDOM_COPS", mruby__PED__CAN_CREATE_RANDOM_COPS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "SET_PED_AS_ENEMY", mruby__PED__SET_PED_AS_ENEMY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_SMASH_GLASS", mruby__PED__SET_PED_CAN_SMASH_GLASS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "IS_PED_IN_ANY_TRAIN", mruby__PED__IS_PED_IN_ANY_TRAIN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_GETTING_INTO_A_VEHICLE", mruby__PED__IS_PED_GETTING_INTO_A_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE", mruby__PED__IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_ENABLE_HANDCUFFS", mruby__PED__SET_ENABLE_HANDCUFFS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_ENABLE_BOUND_ANKLES", mruby__PED__SET_ENABLE_BOUND_ANKLES, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_ENABLE_SCUBA", mruby__PED__SET_ENABLE_SCUBA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_CAN_ATTACK_FRIENDLY", mruby__PED__SET_CAN_ATTACK_FRIENDLY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "GET_PED_ALERTNESS", mruby__PED__GET_PED_ALERTNESS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_ALERTNESS", mruby__PED__SET_PED_ALERTNESS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE", mruby__PED__SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_MOVEMENT_CLIPSET", mruby__PED__SET_PED_MOVEMENT_CLIPSET, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "RESET_PED_MOVEMENT_CLIPSET", mruby__PED__RESET_PED_MOVEMENT_CLIPSET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_STRAFE_CLIPSET", mruby__PED__SET_PED_STRAFE_CLIPSET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "RESET_PED_STRAFE_CLIPSET", mruby__PED__RESET_PED_STRAFE_CLIPSET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_WEAPON_MOVEMENT_CLIPSET", mruby__PED__SET_PED_WEAPON_MOVEMENT_CLIPSET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "RESET_PED_WEAPON_MOVEMENT_CLIPSET", mruby__PED__RESET_PED_WEAPON_MOVEMENT_CLIPSET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_DRIVE_BY_CLIPSET_OVERRIDE", mruby__PED__SET_PED_DRIVE_BY_CLIPSET_OVERRIDE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE", mruby__PED__CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x9DBA107B4937F809", mruby__PED___0x9DBA107B4937F809, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xC79196DCB36F6121", mruby__PED___0xC79196DCB36F6121, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x80054D7FCC70EEC6", mruby__PED___0x80054D7FCC70EEC6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_IN_VEHICLE_CONTEXT", mruby__PED__SET_PED_IN_VEHICLE_CONTEXT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "RESET_PED_IN_VEHICLE_CONTEXT", mruby__PED__RESET_PED_IN_VEHICLE_CONTEXT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM", mruby__PED__IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "CLEAR_PED_ALTERNATE_WALK_ANIM", mruby__PED__CLEAR_PED_ALTERNATE_WALK_ANIM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_ALTERNATE_MOVEMENT_ANIM", mruby__PED__SET_PED_ALTERNATE_MOVEMENT_ANIM, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ped, "CLEAR_PED_ALTERNATE_MOVEMENT_ANIM", mruby__PED__CLEAR_PED_ALTERNATE_MOVEMENT_ANIM, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "GET_PED_DRAWABLE_VARIATION", mruby__PED__GET_PED_DRAWABLE_VARIATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS", mruby__PED__GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_PED_TEXTURE_VARIATION", mruby__PED__GET_PED_TEXTURE_VARIATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_NUMBER_OF_PED_TEXTURE_VARIATIONS", mruby__PED__GET_NUMBER_OF_PED_TEXTURE_VARIATIONS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS", mruby__PED__GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS", mruby__PED__GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "GET_PED_PALETTE_VARIATION", mruby__PED__GET_PED_PALETTE_VARIATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x1E77FA7A62EE6C4C", mruby__PED___0x1E77FA7A62EE6C4C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xF033419D1B81FAE8", mruby__PED___0xF033419D1B81FAE8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_COMPONENT_VARIATION_VALID", mruby__PED__IS_PED_COMPONENT_VARIATION_VALID, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "SET_PED_COMPONENT_VARIATION", mruby__PED__SET_PED_COMPONENT_VARIATION, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "SET_PED_RANDOM_COMPONENT_VARIATION", mruby__PED__SET_PED_RANDOM_COMPONENT_VARIATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_RANDOM_PROPS", mruby__PED__SET_PED_RANDOM_PROPS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_DEFAULT_COMPONENT_VARIATION", mruby__PED__SET_PED_DEFAULT_COMPONENT_VARIATION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_BLEND_FROM_PARENTS", mruby__PED__SET_PED_BLEND_FROM_PARENTS, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "SET_PED_HEAD_BLEND_DATA", mruby__PED__SET_PED_HEAD_BLEND_DATA, MRB_ARGS_REQ(11));
  mrb_define_method(mrb, module_ped, "UPDATE_PED_HEAD_BLEND_DATA", mruby__PED__UPDATE_PED_HEAD_BLEND_DATA, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "_SET_PED_EYE_COLOR", mruby__PED___SET_PED_EYE_COLOR, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_HEAD_OVERLAY", mruby__PED__SET_PED_HEAD_OVERLAY, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "_GET_PED_HEAD_OVERLAY_VALUE", mruby__PED___GET_PED_HEAD_OVERLAY_VALUE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_GET_NUM_HEAD_OVERLAY_VALUES", mruby__PED___GET_NUM_HEAD_OVERLAY_VALUES, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_SET_PED_HEAD_OVERLAY_COLOR", mruby__PED___SET_PED_HEAD_OVERLAY_COLOR, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "_SET_PED_HAIR_COLOR", mruby__PED___SET_PED_HAIR_COLOR, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "_GET_NUM_HAIR_COLORS", mruby__PED___GET_NUM_HAIR_COLORS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "_0xD1F7CA1535D22818", mruby__PED___0xD1F7CA1535D22818, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "_0xED6D8E27A43B8CDE", mruby__PED___0xED6D8E27A43B8CDE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xEA9960D07DADCF10", mruby__PED___0xEA9960D07DADCF10, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x3E802F11FBE27674", mruby__PED___0x3E802F11FBE27674, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xF41B5D290C99A3D6", mruby__PED___0xF41B5D290C99A3D6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xE0D36E5D9E99CC21", mruby__PED___0xE0D36E5D9E99CC21, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xAAA6A3698A69E048", mruby__PED___0xAAA6A3698A69E048, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x0525A2C2562F3CD4", mruby__PED___0x0525A2C2562F3CD4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x604E810189EE3A59", mruby__PED___0x604E810189EE3A59, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xC56FBF2F228E1DAC", mruby__PED___0xC56FBF2F228E1DAC, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "_SET_PED_FACE_FEATURE", mruby__PED___SET_PED_FACE_FEATURE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "HAS_PED_HEAD_BLEND_FINISHED", mruby__PED__HAS_PED_HEAD_BLEND_FINISHED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x4668D80430D6C299", mruby__PED___0x4668D80430D6C299, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xCC9682B8951C5229", mruby__PED___0xCC9682B8951C5229, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "_0xA21C118553BBDF02", mruby__PED___0xA21C118553BBDF02, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_GET_FIRST_PARENT_ID_FOR_PED_TYPE", mruby__PED___GET_FIRST_PARENT_ID_FOR_PED_TYPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_GET_NUM_PARENT_PEDS_OF_TYPE", mruby__PED___GET_NUM_PARENT_PEDS_OF_TYPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x39D55A620FCB6A3A", mruby__PED___0x39D55A620FCB6A3A, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "_0x66680A92700F43DF", mruby__PED___0x66680A92700F43DF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x5AAB586FFEC0FD96", mruby__PED___0x5AAB586FFEC0FD96, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x2B16A3BFF1FBCE49", mruby__PED___0x2B16A3BFF1FBCE49, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "_0x784002A632822099", mruby__PED___0x784002A632822099, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xF79F9DEF0AADE61A", mruby__PED___0xF79F9DEF0AADE61A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_PED_PROP_INDEX", mruby__PED__GET_PED_PROP_INDEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_PROP_INDEX", mruby__PED__SET_PED_PROP_INDEX, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "KNOCK_OFF_PED_PROP", mruby__PED__KNOCK_OFF_PED_PROP, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "CLEAR_PED_PROP", mruby__PED__CLEAR_PED_PROP, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "CLEAR_ALL_PED_PROPS", mruby__PED__CLEAR_ALL_PED_PROPS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xAFF4710E2A0A6C12", mruby__PED___0xAFF4710E2A0A6C12, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_PED_PROP_TEXTURE_INDEX", mruby__PED__GET_PED_PROP_TEXTURE_INDEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x1280804F7CFD2D6C", mruby__PED___0x1280804F7CFD2D6C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x36C6984C3ED0C911", mruby__PED___0x36C6984C3ED0C911, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xB50EB4CCB29704AC", mruby__PED___0xB50EB4CCB29704AC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xFEC9A3B1820F3331", mruby__PED___0xFEC9A3B1820F3331, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_BLOCKING_OF_NON_TEMPORARY_EVENTS", mruby__PED__SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_BOUNDS_ORIENTATION", mruby__PED__SET_PED_BOUNDS_ORIENTATION, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ped, "REGISTER_TARGET", mruby__PED__REGISTER_TARGET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "REGISTER_HATED_TARGETS_AROUND_PED", mruby__PED__REGISTER_HATED_TARGETS_AROUND_PED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_RANDOM_PED_AT_COORD", mruby__PED__GET_RANDOM_PED_AT_COORD, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ped, "SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND", mruby__PED__SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x03EA03AF85A85CB7", mruby__PED___0x03EA03AF85A85CB7, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_ped, "_0xDED5AF5A0EA4B297", mruby__PED___0xDED5AF5A0EA4B297, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_DRIVER_ABILITY", mruby__PED__SET_DRIVER_ABILITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_DRIVER_AGGRESSIVENESS", mruby__PED__SET_DRIVER_AGGRESSIVENESS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "CAN_PED_RAGDOLL", mruby__PED__CAN_PED_RAGDOLL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_TO_RAGDOLL", mruby__PED__SET_PED_TO_RAGDOLL, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ped, "SET_PED_TO_RAGDOLL_WITH_FALL", mruby__PED__SET_PED_TO_RAGDOLL_WITH_FALL, MRB_ARGS_REQ(14));
  mrb_define_method(mrb, module_ped, "SET_PED_RAGDOLL_ON_COLLISION", mruby__PED__SET_PED_RAGDOLL_ON_COLLISION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_PED_RAGDOLL", mruby__PED__IS_PED_RAGDOLL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_RUNNING_RAGDOLL_TASK", mruby__PED__IS_PED_RUNNING_RAGDOLL_TASK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_RAGDOLL_FORCE_FALL", mruby__PED__SET_PED_RAGDOLL_FORCE_FALL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "RESET_PED_RAGDOLL_TIMER", mruby__PED__RESET_PED_RAGDOLL_TIMER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_RAGDOLL", mruby__PED__SET_PED_CAN_RAGDOLL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xD1871251F3B5ACD7", mruby__PED___0xD1871251F3B5ACD7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_RUNNING_MOBILE_PHONE_TASK", mruby__PED__IS_PED_RUNNING_MOBILE_PHONE_TASK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xA3F3564A5B3646C0", mruby__PED___0xA3F3564A5B3646C0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_SET_PED_RAGDOLL_BLOCKING_FLAGS", mruby__PED___SET_PED_RAGDOLL_BLOCKING_FLAGS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xD86D101FCFD00A4B", mruby__PED___0xD86D101FCFD00A4B, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_ANGLED_DEFENSIVE_AREA", mruby__PED__SET_PED_ANGLED_DEFENSIVE_AREA, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_ped, "SET_PED_SPHERE_DEFENSIVE_AREA", mruby__PED__SET_PED_SPHERE_DEFENSIVE_AREA, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ped, "_0xF9B8F91AAD3B953E", mruby__PED___0xF9B8F91AAD3B953E, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ped, "_0xE4723DB6E736CCFF", mruby__PED___0xE4723DB6E736CCFF, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ped, "SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED", mruby__PED__SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED, MRB_ARGS_REQ(11));
  mrb_define_method(mrb, module_ped, "SET_PED_DEFENSIVE_AREA_DIRECTION", mruby__PED__SET_PED_DEFENSIVE_AREA_DIRECTION, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "REMOVE_PED_DEFENSIVE_AREA", mruby__PED__REMOVE_PED_DEFENSIVE_AREA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_PED_DEFENSIVE_AREA_POSITION", mruby__PED__GET_PED_DEFENSIVE_AREA_POSITION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xBA63D9FE45412247", mruby__PED___0xBA63D9FE45412247, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_PREFERRED_COVER_SET", mruby__PED__SET_PED_PREFERRED_COVER_SET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "REMOVE_PED_PREFERRED_COVER_SET", mruby__PED__REMOVE_PED_PREFERRED_COVER_SET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "REVIVE_INJURED_PED", mruby__PED__REVIVE_INJURED_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "RESURRECT_PED", mruby__PED__RESURRECT_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_NAME_DEBUG", mruby__PED__SET_PED_NAME_DEBUG, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_PED_EXTRACTED_DISPLACEMENT", mruby__PED__GET_PED_EXTRACTED_DISPLACEMENT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_DIES_WHEN_INJURED", mruby__PED__SET_PED_DIES_WHEN_INJURED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_ENABLE_WEAPON_BLOCKING", mruby__PED__SET_PED_ENABLE_WEAPON_BLOCKING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xF9ACF4A08098EA25", mruby__PED___0xF9ACF4A08098EA25, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "RESET_PED_VISIBLE_DAMAGE", mruby__PED__RESET_PED_VISIBLE_DAMAGE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "APPLY_PED_BLOOD_DAMAGE_BY_ZONE", mruby__PED__APPLY_PED_BLOOD_DAMAGE_BY_ZONE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "APPLY_PED_BLOOD", mruby__PED__APPLY_PED_BLOOD, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ped, "APPLY_PED_DAMAGE_DECAL", mruby__PED__APPLY_PED_DAMAGE_DECAL, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_ped, "APPLY_PED_DAMAGE_PACK", mruby__PED__APPLY_PED_DAMAGE_PACK, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "CLEAR_PED_BLOOD_DAMAGE", mruby__PED__CLEAR_PED_BLOOD_DAMAGE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "CLEAR_PED_BLOOD_DAMAGE_BY_ZONE", mruby__PED__CLEAR_PED_BLOOD_DAMAGE_BY_ZONE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "HIDE_PED_BLOOD_DAMAGE_BY_ZONE", mruby__PED__HIDE_PED_BLOOD_DAMAGE_BY_ZONE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "CLEAR_PED_DAMAGE_DECAL_BY_ZONE", mruby__PED__CLEAR_PED_DAMAGE_DECAL_BY_ZONE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "GET_PED_DECORATIONS_STATE", mruby__PED__GET_PED_DECORATIONS_STATE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x2B694AFCF64E6994", mruby__PED___0x2B694AFCF64E6994, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "CLEAR_PED_WETNESS", mruby__PED__CLEAR_PED_WETNESS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_WETNESS_HEIGHT", mruby__PED__SET_PED_WETNESS_HEIGHT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_WETNESS_ENABLED_THIS_FRAME", mruby__PED__SET_PED_WETNESS_ENABLED_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x6585D955A68452A5", mruby__PED___0x6585D955A68452A5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_SWEAT", mruby__PED__SET_PED_SWEAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_APPLY_PED_OVERLAY", mruby__PED___APPLY_PED_OVERLAY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "_0x5619BFA07CFD7833", mruby__PED___0x5619BFA07CFD7833, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "_GET_TATTOO_ZONE", mruby__PED___GET_TATTOO_ZONE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "CLEAR_PED_DECORATIONS", mruby__PED__CLEAR_PED_DECORATIONS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xE3B27E70CEAB9F0C", mruby__PED___0xE3B27E70CEAB9F0C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "WAS_PED_SKELETON_UPDATED", mruby__PED__WAS_PED_SKELETON_UPDATED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_PED_BONE_COORDS", mruby__PED__GET_PED_BONE_COORDS, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "CREATE_NM_MESSAGE", mruby__PED__CREATE_NM_MESSAGE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GIVE_PED_NM_MESSAGE", mruby__PED__GIVE_PED_NM_MESSAGE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "ADD_SCENARIO_BLOCKING_AREA", mruby__PED__ADD_SCENARIO_BLOCKING_AREA, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_ped, "REMOVE_SCENARIO_BLOCKING_AREAS", mruby__PED__REMOVE_SCENARIO_BLOCKING_AREAS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "REMOVE_SCENARIO_BLOCKING_AREA", mruby__PED__REMOVE_SCENARIO_BLOCKING_AREA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA", mruby__PED__SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "IS_PED_USING_SCENARIO", mruby__PED__IS_PED_USING_SCENARIO, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_PED_USING_ANY_SCENARIO", mruby__PED__IS_PED_USING_ANY_SCENARIO, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xFE07FF6495D52E2A", mruby__PED___0xFE07FF6495D52E2A, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "_0x9A77DFD295E29B09", mruby__PED___0x9A77DFD295E29B09, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x25361A96E0F7E419", mruby__PED___0x25361A96E0F7E419, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "_0xEC6935EBE0847B90", mruby__PED___0xEC6935EBE0847B90, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "_0xA3A9299C4F2ADB98", mruby__PED___0xA3A9299C4F2ADB98, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xF1C03A5352243A30", mruby__PED___0xF1C03A5352243A30, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xEEED8FAFEC331A70", mruby__PED___0xEEED8FAFEC331A70, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "_0x425AECF167663F48", mruby__PED___0x425AECF167663F48, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x5B6010B3CBC29095", mruby__PED___0x5B6010B3CBC29095, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xCEDA60A74219D064", mruby__PED___0xCEDA60A74219D064, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "PLAY_FACIAL_ANIM", mruby__PED__PLAY_FACIAL_ANIM, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "CLEAR_FACIAL_IDLE_ANIM_OVERRIDE", mruby__PED__CLEAR_FACIAL_IDLE_ANIM_OVERRIDE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_PLAY_GESTURE_ANIMS", mruby__PED__SET_PED_CAN_PLAY_GESTURE_ANIMS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_PLAY_VISEME_ANIMS", mruby__PED__SET_PED_CAN_PLAY_VISEME_ANIMS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "_0x33A60D8BDD6E508C", mruby__PED___0x33A60D8BDD6E508C, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_PLAY_AMBIENT_ANIMS", mruby__PED__SET_PED_CAN_PLAY_AMBIENT_ANIMS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS", mruby__PED__SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xC2EE020F5FB4DB53", mruby__PED___0xC2EE020F5FB4DB53, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_ARM_IK", mruby__PED__SET_PED_CAN_ARM_IK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_HEAD_IK", mruby__PED__SET_PED_CAN_HEAD_IK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_LEG_IK", mruby__PED__SET_PED_CAN_LEG_IK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_TORSO_IK", mruby__PED__SET_PED_CAN_TORSO_IK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xF5846EDB26A98A24", mruby__PED___0xF5846EDB26A98A24, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x6647C5F6F5792496", mruby__PED___0x6647C5F6F5792496, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT", mruby__PED__SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_PED_HEADTRACKING_PED", mruby__PED__IS_PED_HEADTRACKING_PED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_PED_HEADTRACKING_ENTITY", mruby__PED__IS_PED_HEADTRACKING_ENTITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_PRIMARY_LOOKAT", mruby__PED__SET_PED_PRIMARY_LOOKAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x78C4E9961DB3EB5B", mruby__PED___0x78C4E9961DB3EB5B, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x82A3D6D9CC2CB8E3", mruby__PED___0x82A3D6D9CC2CB8E3, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xA660FAF550EB37E5", mruby__PED___0xA660FAF550EB37E5, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CONFIG_FLAG", mruby__PED__SET_PED_CONFIG_FLAG, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "SET_PED_RESET_FLAG", mruby__PED__SET_PED_RESET_FLAG, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "GET_PED_CONFIG_FLAG", mruby__PED__GET_PED_CONFIG_FLAG, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "GET_PED_RESET_FLAG", mruby__PED__GET_PED_RESET_FLAG, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_GROUP_MEMBER_PASSENGER_INDEX", mruby__PED__SET_PED_GROUP_MEMBER_PASSENGER_INDEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_EVASIVE_DIVE", mruby__PED__SET_PED_CAN_EVASIVE_DIVE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_SHOOTS_AT_COORD", mruby__PED__SET_PED_SHOOTS_AT_COORD, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "SET_PED_MODEL_IS_SUPPRESSED", mruby__PED__SET_PED_MODEL_IS_SUPPRESSED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "STOP_ANY_PED_MODEL_BEING_SUPPRESSED", mruby__PED__STOP_ANY_PED_MODEL_BEING_SUPPRESSED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_BE_TARGETED_WHEN_INJURED", mruby__PED__SET_PED_CAN_BE_TARGETED_WHEN_INJURED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_GENERATES_DEAD_BODY_EVENTS", mruby__PED__SET_PED_GENERATES_DEAD_BODY_EVENTS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xE43A13C9E4CCCBCF", mruby__PED___0xE43A13C9E4CCCBCF, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT", mruby__PED__SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GIVE_PED_HELMET", mruby__PED__GIVE_PED_HELMET, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "REMOVE_PED_HELMET", mruby__PED__REMOVE_PED_HELMET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x14590DDBEDB1EC85", mruby__PED___0x14590DDBEDB1EC85, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_HELMET", mruby__PED__SET_PED_HELMET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_HELMET_FLAG", mruby__PED__SET_PED_HELMET_FLAG, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_HELMET_PROP_INDEX", mruby__PED__SET_PED_HELMET_PROP_INDEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_HELMET_TEXTURE_INDEX", mruby__PED__SET_PED_HELMET_TEXTURE_INDEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_PED_WEARING_HELMET", mruby__PED__IS_PED_WEARING_HELMET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x687C0B594907D2E8", mruby__PED___0x687C0B594907D2E8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x451294E859ECC018", mruby__PED___0x451294E859ECC018, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x9D728C1E12BF5518", mruby__PED___0x9D728C1E12BF5518, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xF2385935BFFD4D92", mruby__PED___0xF2385935BFFD4D92, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_TO_LOAD_COVER", mruby__PED__SET_PED_TO_LOAD_COVER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_COWER_IN_COVER", mruby__PED__SET_PED_CAN_COWER_IN_COVER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_PEEK_IN_COVER", mruby__PED__SET_PED_CAN_PEEK_IN_COVER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE", mruby__PED__SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_LEG_IK_MODE", mruby__PED__SET_PED_LEG_IK_MODE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_MOTION_BLUR", mruby__PED__SET_PED_MOTION_BLUR, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAN_SWITCH_WEAPON", mruby__PED__SET_PED_CAN_SWITCH_WEAPON, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_DIES_INSTANTLY_IN_WATER", mruby__PED__SET_PED_DIES_INSTANTLY_IN_WATER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x1A330D297AAC6BC1", mruby__PED___0x1A330D297AAC6BC1, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "STOP_PED_WEAPON_FIRING_WHEN_DROPPED", mruby__PED__STOP_PED_WEAPON_FIRING_WHEN_DROPPED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_SCRIPTED_ANIM_SEAT_OFFSET", mruby__PED__SET_SCRIPTED_ANIM_SEAT_OFFSET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_COMBAT_MOVEMENT", mruby__PED__SET_PED_COMBAT_MOVEMENT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_PED_COMBAT_MOVEMENT", mruby__PED__GET_PED_COMBAT_MOVEMENT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_COMBAT_ABILITY", mruby__PED__SET_PED_COMBAT_ABILITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_COMBAT_RANGE", mruby__PED__SET_PED_COMBAT_RANGE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_PED_COMBAT_RANGE", mruby__PED__GET_PED_COMBAT_RANGE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_COMBAT_ATTRIBUTES", mruby__PED__SET_PED_COMBAT_ATTRIBUTES, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "SET_PED_TARGET_LOSS_RESPONSE", mruby__PED__SET_PED_TARGET_LOSS_RESPONSE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xDCCA191DF9980FD7", mruby__PED___0xDCCA191DF9980FD7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_PERFORMING_STEALTH_KILL", mruby__PED__IS_PED_PERFORMING_STEALTH_KILL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xEBD0EDBA5BE957CF", mruby__PED___0xEBD0EDBA5BE957CF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_BEING_STEALTH_KILLED", mruby__PED__IS_PED_BEING_STEALTH_KILLED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_MELEE_TARGET_FOR_PED", mruby__PED__GET_MELEE_TARGET_FOR_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "WAS_PED_KILLED_BY_STEALTH", mruby__PED__WAS_PED_KILLED_BY_STEALTH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "WAS_PED_KILLED_BY_TAKEDOWN", mruby__PED__WAS_PED_KILLED_BY_TAKEDOWN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x61767F73EACEED21", mruby__PED___0x61767F73EACEED21, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_FLEE_ATTRIBUTES", mruby__PED__SET_PED_FLEE_ATTRIBUTES, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "SET_PED_COWER_HASH", mruby__PED__SET_PED_COWER_HASH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x2016C603D6B8987C", mruby__PED___0x2016C603D6B8987C, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_STEERS_AROUND_PEDS", mruby__PED__SET_PED_STEERS_AROUND_PEDS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_STEERS_AROUND_OBJECTS", mruby__PED__SET_PED_STEERS_AROUND_OBJECTS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_STEERS_AROUND_VEHICLES", mruby__PED__SET_PED_STEERS_AROUND_VEHICLES, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xA9B61A329BFDCBEA", mruby__PED___0xA9B61A329BFDCBEA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x570389D1C3DE3C6B", mruby__PED___0x570389D1C3DE3C6B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x576594E8D64375E2", mruby__PED___0x576594E8D64375E2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xA52D5247A4227E14", mruby__PED___0xA52D5247A4227E14, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_ANY_PED_NEAR_POINT", mruby__PED__IS_ANY_PED_NEAR_POINT, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "_0x2208438012482A1A", mruby__PED___0x2208438012482A1A, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "_0xFCF37A457CB96DC0", mruby__PED___0xFCF37A457CB96DC0, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "_0x7D7A2E43E74E2EB8", mruby__PED___0x7D7A2E43E74E2EB8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_PED_FLOOD_INVINCIBILITY", mruby__PED__GET_PED_FLOOD_INVINCIBILITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xCD018C591F94CB43", mruby__PED___0xCD018C591F94CB43, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x75BA1CB3B7D40CAF", mruby__PED___0x75BA1CB3B7D40CAF, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_TRACKED_PED_VISIBLE", mruby__PED__IS_TRACKED_PED_VISIBLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x511F1A683387C7E2", mruby__PED___0x511F1A683387C7E2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_TRACKED", mruby__PED__IS_PED_TRACKED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "HAS_PED_RECEIVED_EVENT", mruby__PED__HAS_PED_RECEIVED_EVENT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x6CD5A433374D4CFB", mruby__PED___0x6CD5A433374D4CFB, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_PED_BONE_INDEX", mruby__PED__GET_PED_BONE_INDEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_PED_RAGDOLL_BONE_INDEX", mruby__PED__GET_PED_RAGDOLL_BONE_INDEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_ENVEFF_SCALE", mruby__PED__SET_PED_ENVEFF_SCALE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_PED_ENVEFF_SCALE", mruby__PED__GET_PED_ENVEFF_SCALE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_ENABLE_PED_ENVEFF_SCALE", mruby__PED__SET_ENABLE_PED_ENVEFF_SCALE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x110F526AB784111F", mruby__PED___0x110F526AB784111F, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xD69411AA0CEBF9E9", mruby__PED___0xD69411AA0CEBF9E9, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "_0x1216E0BFA72CC703", mruby__PED___0x1216E0BFA72CC703, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x2B5AA717A181FB4C", mruby__PED___0x2B5AA717A181FB4C, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xB8B52E498014F5B0", mruby__PED___0xB8B52E498014F5B0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "CREATE_SYNCHRONIZED_SCENE", mruby__PED__CREATE_SYNCHRONIZED_SCENE, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ped, "_0x62EC273D00187DCA", mruby__PED___0x62EC273D00187DCA, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "IS_SYNCHRONIZED_SCENE_RUNNING", mruby__PED__IS_SYNCHRONIZED_SCENE_RUNNING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_SYNCHRONIZED_SCENE_ORIGIN", mruby__PED__SET_SYNCHRONIZED_SCENE_ORIGIN, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_ped, "SET_SYNCHRONIZED_SCENE_PHASE", mruby__PED__SET_SYNCHRONIZED_SCENE_PHASE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_SYNCHRONIZED_SCENE_PHASE", mruby__PED__GET_SYNCHRONIZED_SCENE_PHASE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_SYNCHRONIZED_SCENE_RATE", mruby__PED__SET_SYNCHRONIZED_SCENE_RATE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "GET_SYNCHRONIZED_SCENE_RATE", mruby__PED__GET_SYNCHRONIZED_SCENE_RATE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_SYNCHRONIZED_SCENE_LOOPED", mruby__PED__SET_SYNCHRONIZED_SCENE_LOOPED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "IS_SYNCHRONIZED_SCENE_LOOPED", mruby__PED__IS_SYNCHRONIZED_SCENE_LOOPED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x394B9CD12435C981", mruby__PED___0x394B9CD12435C981, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x7F2F4F13AC5257EF", mruby__PED___0x7F2F4F13AC5257EF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY", mruby__PED__ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "DETACH_SYNCHRONIZED_SCENE", mruby__PED__DETACH_SYNCHRONIZED_SCENE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xCD9CC7E200A52A6F", mruby__PED___0xCD9CC7E200A52A6F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "FORCE_PED_MOTION_STATE", mruby__PED__FORCE_PED_MOTION_STATE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "SET_PED_MAX_MOVE_BLEND_RATIO", mruby__PED__SET_PED_MAX_MOVE_BLEND_RATIO, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_MIN_MOVE_BLEND_RATIO", mruby__PED__SET_PED_MIN_MOVE_BLEND_RATIO, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_MOVE_RATE_OVERRIDE", mruby__PED__SET_PED_MOVE_RATE_OVERRIDE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x46B05BCAE43856B0", mruby__PED___0x46B05BCAE43856B0, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x7350823473013C02", mruby__PED___0x7350823473013C02, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PED_USING_ACTION_MODE", mruby__PED__IS_PED_USING_ACTION_MODE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_USING_ACTION_MODE", mruby__PED__SET_PED_USING_ACTION_MODE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "_0x781DE8FA214E87D2", mruby__PED___0x781DE8FA214E87D2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "SET_PED_CAPSULE", mruby__PED__SET_PED_CAPSULE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "REGISTER_PEDHEADSHOT", mruby__PED__REGISTER_PEDHEADSHOT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x953563CE563143AF", mruby__PED___0x953563CE563143AF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "UNREGISTER_PEDHEADSHOT", mruby__PED__UNREGISTER_PEDHEADSHOT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PEDHEADSHOT_VALID", mruby__PED__IS_PEDHEADSHOT_VALID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "IS_PEDHEADSHOT_READY", mruby__PED__IS_PEDHEADSHOT_READY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "GET_PEDHEADSHOT_TXD_STRING", mruby__PED__GET_PEDHEADSHOT_TXD_STRING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xF0DAEF2F545BEE25", mruby__PED___0xF0DAEF2F545BEE25, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x5D517B27CF6ECD04", mruby__PED___0x5D517B27CF6ECD04, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0xEBB376779A760AA8", mruby__PED___0xEBB376779A760AA8, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "_0x876928DDDFCCC9CD", mruby__PED___0x876928DDDFCCC9CD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "_0xE8A169E666CBC541", mruby__PED___0xE8A169E666CBC541, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "_0xC1F6EBF9A3D55538", mruby__PED___0xC1F6EBF9A3D55538, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x600048C60D5C2C51", mruby__PED___0x600048C60D5C2C51, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x2DF9038C90AD5264", mruby__PED___0x2DF9038C90AD5264, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_ped, "_0xB2AFF10216DEFA2F", mruby__PED___0xB2AFF10216DEFA2F, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_ped, "_0xFEE4A5459472A9F8", mruby__PED___0xFEE4A5459472A9F8, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "_0x3C67506996001F5E", mruby__PED___0x3C67506996001F5E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "_0xA586FBEB32A53DBB", mruby__PED___0xA586FBEB32A53DBB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "_0xF445DE8DA80A1792", mruby__PED___0xF445DE8DA80A1792, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "_0xA635C11B8C44AFC2", mruby__PED___0xA635C11B8C44AFC2, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ped, "SET_IK_TARGET", mruby__PED__SET_IK_TARGET, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_ped, "_0xED3C76ADFA6D07C4", mruby__PED___0xED3C76ADFA6D07C4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "REQUEST_ACTION_MODE_ASSET", mruby__PED__REQUEST_ACTION_MODE_ASSET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "HAS_ACTION_MODE_ASSET_LOADED", mruby__PED__HAS_ACTION_MODE_ASSET_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "REMOVE_ACTION_MODE_ASSET", mruby__PED__REMOVE_ACTION_MODE_ASSET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "REQUEST_STEALTH_MODE_ASSET", mruby__PED__REQUEST_STEALTH_MODE_ASSET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "HAS_STEALTH_MODE_ASSET_LOADED", mruby__PED__HAS_STEALTH_MODE_ASSET_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "REMOVE_STEALTH_MODE_ASSET", mruby__PED__REMOVE_STEALTH_MODE_ASSET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "SET_PED_LOD_MULTIPLIER", mruby__PED__SET_PED_LOD_MULTIPLIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xE861D0B05C7662B8", mruby__PED___0xE861D0B05C7662B8, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ped, "_0x129466ED55140F8D", mruby__PED___0x129466ED55140F8D, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0xCB968B53FC7F916D", mruby__PED___0xCB968B53FC7F916D, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ped, "_0x68772DB2B2526F9F", mruby__PED___0x68772DB2B2526F9F, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "_0x06087579E7AA85A9", mruby__PED___0x06087579E7AA85A9, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ped, "_0xD8C3BE3EE94CAF2D", mruby__PED___0xD8C3BE3EE94CAF2D, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ped, "_0xD33DAA36272177C4", mruby__PED___0xD33DAA36272177C4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ped, "_0x83A169EABCDB10A2", mruby__PED___0x83A169EABCDB10A2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ped, "_0x288DF530C92DAD6F", mruby__PED___0x288DF530C92DAD6F, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "CREATE_VEHICLE", mruby__VEHICLE__CREATE_VEHICLE, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_vehicle, "DELETE_VEHICLE", mruby__VEHICLE__DELETE_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x7D6F9A3EF26136A0", mruby__VEHICLE___0x7D6F9A3EF26136A0, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON", mruby__VEHICLE__SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xE6B0E8CFC3633BF0", mruby__VEHICLE___0xE6B0E8CFC3633BF0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_MODEL", mruby__VEHICLE__IS_VEHICLE_MODEL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "DOES_SCRIPT_VEHICLE_GENERATOR_EXIST", mruby__VEHICLE__DOES_SCRIPT_VEHICLE_GENERATOR_EXIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "CREATE_SCRIPT_VEHICLE_GENERATOR", mruby__VEHICLE__CREATE_SCRIPT_VEHICLE_GENERATOR, MRB_ARGS_REQ(17));
  mrb_define_method(mrb, module_vehicle, "DELETE_SCRIPT_VEHICLE_GENERATOR", mruby__VEHICLE__DELETE_SCRIPT_VEHICLE_GENERATOR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_SCRIPT_VEHICLE_GENERATOR", mruby__VEHICLE__SET_SCRIPT_VEHICLE_GENERATOR, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA", mruby__VEHICLE__SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_vehicle, "SET_ALL_VEHICLE_GENERATORS_ACTIVE", mruby__VEHICLE__SET_ALL_VEHICLE_GENERATORS_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_vehicle, "SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE", mruby__VEHICLE__SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x9A75585FB2E54FAD", mruby__VEHICLE___0x9A75585FB2E54FAD, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "_0x0A436B8643716D14", mruby__VEHICLE___0x0A436B8643716D14, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_ON_GROUND_PROPERLY", mruby__VEHICLE__SET_VEHICLE_ON_GROUND_PROPERLY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_ALL_VEHICLES_SPAWN", mruby__VEHICLE__SET_ALL_VEHICLES_SPAWN, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_STUCK_ON_ROOF", mruby__VEHICLE__IS_VEHICLE_STUCK_ON_ROOF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "ADD_VEHICLE_UPSIDEDOWN_CHECK", mruby__VEHICLE__ADD_VEHICLE_UPSIDEDOWN_CHECK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "REMOVE_VEHICLE_UPSIDEDOWN_CHECK", mruby__VEHICLE__REMOVE_VEHICLE_UPSIDEDOWN_CHECK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_STOPPED", mruby__VEHICLE__IS_VEHICLE_STOPPED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_NUMBER_OF_PASSENGERS", mruby__VEHICLE__GET_VEHICLE_NUMBER_OF_PASSENGERS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS", mruby__VEHICLE__GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_GET_VEHICLE_MODEL_MAX_NUMBER_OF_PASSENGERS", mruby__VEHICLE___GET_VEHICLE_MODEL_MAX_NUMBER_OF_PASSENGERS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0xF7F203E31F96F6A1", mruby__VEHICLE___0xF7F203E31F96F6A1, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xE33FFA906CE74880", mruby__VEHICLE___0xE33FFA906CE74880, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME", mruby__VEHICLE__SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME", mruby__VEHICLE__SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME", mruby__VEHICLE__SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0xD4B8E3D1917BC86B", mruby__VEHICLE___0xD4B8E3D1917BC86B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x90B6DA738A9A25DA", mruby__VEHICLE___0x90B6DA738A9A25DA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_FAR_DRAW_VEHICLES", mruby__VEHICLE__SET_FAR_DRAW_VEHICLES, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_NUMBER_OF_PARKED_VEHICLES", mruby__VEHICLE__SET_NUMBER_OF_PARKED_VEHICLES, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_DOORS_LOCKED", mruby__VEHICLE__SET_VEHICLE_DOORS_LOCKED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_PED_TARGETTABLE_VEHICLE_DESTROY", mruby__VEHICLE__SET_PED_TARGETTABLE_VEHICLE_DESTROY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "DISABLE_VEHICLE_IMPACT_EXPLOSION_ACTIVATION", mruby__VEHICLE__DISABLE_VEHICLE_IMPACT_EXPLOSION_ACTIVATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER", mruby__VEHICLE__SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER", mruby__VEHICLE__GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS", mruby__VEHICLE__SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x9737A37136F07E75", mruby__VEHICLE___0x9737A37136F07E75, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_DOORS_LOCKED_FOR_TEAM", mruby__VEHICLE__SET_VEHICLE_DOORS_LOCKED_FOR_TEAM, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "EXPLODE_VEHICLE", mruby__VEHICLE__EXPLODE_VEHICLE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_OUT_OF_CONTROL", mruby__VEHICLE__SET_VEHICLE_OUT_OF_CONTROL, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_TIMED_EXPLOSION", mruby__VEHICLE__SET_VEHICLE_TIMED_EXPLOSION, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "_0x99AD4CCCB128CBC9", mruby__VEHICLE___0x99AD4CCCB128CBC9, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x6ADAABD3068C5235", mruby__VEHICLE___0x6ADAABD3068C5235, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_vehicle, "_0xEF49CF0270307CBE", mruby__VEHICLE___0xEF49CF0270307CBE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_vehicle, "_0xAE3FEE8709B39DCB", mruby__VEHICLE___0xAE3FEE8709B39DCB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_TAXI_LIGHTS", mruby__VEHICLE__SET_TAXI_LIGHTS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "IS_TAXI_LIGHT_ON", mruby__VEHICLE__IS_TAXI_LIGHT_ON, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_IN_GARAGE_AREA", mruby__VEHICLE__IS_VEHICLE_IN_GARAGE_AREA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_COLOURS", mruby__VEHICLE__SET_VEHICLE_COLOURS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_FULLBEAM", mruby__VEHICLE__SET_VEHICLE_FULLBEAM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "STEER_UNLOCK_BIAS", mruby__VEHICLE__STEER_UNLOCK_BIAS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_CUSTOM_PRIMARY_COLOUR", mruby__VEHICLE__SET_VEHICLE_CUSTOM_PRIMARY_COLOUR, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR", mruby__VEHICLE__CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM", mruby__VEHICLE__GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_CUSTOM_SECONDARY_COLOUR", mruby__VEHICLE__SET_VEHICLE_CUSTOM_SECONDARY_COLOUR, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR", mruby__VEHICLE__CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM", mruby__VEHICLE__GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_SET_VEHICLE_PAINT_FADE", mruby__VEHICLE___SET_VEHICLE_PAINT_FADE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_GET_VEHICLE_PAINT_FADE", mruby__VEHICLE___GET_VEHICLE_PAINT_FADE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_CAN_RESPRAY_VEHICLE", mruby__VEHICLE__SET_CAN_RESPRAY_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x33506883545AC0DF", mruby__VEHICLE___0x33506883545AC0DF, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_JITTER_VEHICLE", mruby__VEHICLE___JITTER_VEHICLE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_vehicle, "SET_BOAT_ANCHOR", mruby__VEHICLE__SET_BOAT_ANCHOR, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_GET_BOAT_ANCHOR", mruby__VEHICLE___GET_BOAT_ANCHOR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0xE3EBAAE484798530", mruby__VEHICLE___0xE3EBAAE484798530, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xB28B1FE5BFADD7F5", mruby__VEHICLE___0xB28B1FE5BFADD7F5, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xE842A9398079BD82", mruby__VEHICLE___0xE842A9398079BD82, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x8F719973E1445BA2", mruby__VEHICLE___0x8F719973E1445BA2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_SIREN", mruby__VEHICLE__SET_VEHICLE_SIREN, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_SIREN_ON", mruby__VEHICLE__IS_VEHICLE_SIREN_ON, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0xB5CC40FBCB586380", mruby__VEHICLE___0xB5CC40FBCB586380, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_STRONG", mruby__VEHICLE__SET_VEHICLE_STRONG, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "REMOVE_VEHICLE_STUCK_CHECK", mruby__VEHICLE__REMOVE_VEHICLE_STUCK_CHECK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_SEAT_FREE", mruby__VEHICLE__IS_VEHICLE_SEAT_FREE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_PED_IN_VEHICLE_SEAT", mruby__VEHICLE__GET_PED_IN_VEHICLE_SEAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_LAST_PED_IN_VEHICLE_SEAT", mruby__VEHICLE__GET_LAST_PED_IN_VEHICLE_SEAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_TYRE_BURST", mruby__VEHICLE__IS_VEHICLE_TYRE_BURST, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_FORWARD_SPEED", mruby__VEHICLE__SET_VEHICLE_FORWARD_SPEED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_TASK_BRING_VEHICLE_TO_HALT", mruby__VEHICLE___TASK_BRING_VEHICLE_TO_HALT, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "_0x37EBBF3117BD6A25", mruby__VEHICLE___0x37EBBF3117BD6A25, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_PED_ENABLED_BIKE_RINGTONE", mruby__VEHICLE__SET_PED_ENABLED_BIKE_RINGTONE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x62CA17B74C435651", mruby__VEHICLE___0x62CA17B74C435651, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x375E7FC44F21C8AB", mruby__VEHICLE___0x375E7FC44F21C8AB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x89D630CF5EA96D23", mruby__VEHICLE___0x89D630CF5EA96D23, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x6A98C2ECF57FA5D4", mruby__VEHICLE___0x6A98C2ECF57FA5D4, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x7C0043FDFF6436BC", mruby__VEHICLE___0x7C0043FDFF6436BC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x8AA9180DE2FEDD45", mruby__VEHICLE___0x8AA9180DE2FEDD45, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x0A6A279F3AA4FD70", mruby__VEHICLE___0x0A6A279F3AA4FD70, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x634148744F385576", mruby__VEHICLE___0x634148744F385576, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0xE6F13851780394DA", mruby__VEHICLE___0xE6F13851780394DA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_TYRE_BURST", mruby__VEHICLE__SET_VEHICLE_TYRE_BURST, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_DOORS_SHUT", mruby__VEHICLE__SET_VEHICLE_DOORS_SHUT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_TYRES_CAN_BURST", mruby__VEHICLE__SET_VEHICLE_TYRES_CAN_BURST, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_TYRES_CAN_BURST", mruby__VEHICLE__GET_VEHICLE_TYRES_CAN_BURST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_WHEELS_CAN_BREAK", mruby__VEHICLE__SET_VEHICLE_WHEELS_CAN_BREAK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_DOOR_OPEN", mruby__VEHICLE__SET_VEHICLE_DOOR_OPEN, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "REMOVE_VEHICLE_WINDOW", mruby__VEHICLE__REMOVE_VEHICLE_WINDOW, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "ROLL_DOWN_WINDOWS", mruby__VEHICLE__ROLL_DOWN_WINDOWS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "ROLL_DOWN_WINDOW", mruby__VEHICLE__ROLL_DOWN_WINDOW, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "ROLL_UP_WINDOW", mruby__VEHICLE__ROLL_UP_WINDOW, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SMASH_VEHICLE_WINDOW", mruby__VEHICLE__SMASH_VEHICLE_WINDOW, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "FIX_VEHICLE_WINDOW", mruby__VEHICLE__FIX_VEHICLE_WINDOW, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_DETACH_VEHICLE_WINDSCREEN", mruby__VEHICLE___DETACH_VEHICLE_WINDSCREEN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_EJECT_JB700_ROOF", mruby__VEHICLE___EJECT_JB700_ROOF, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_LIGHTS", mruby__VEHICLE__SET_VEHICLE_LIGHTS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xC45C27EF50F36ADC", mruby__VEHICLE___0xC45C27EF50F36ADC, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x1FD09E7390A74D54", mruby__VEHICLE___0x1FD09E7390A74D54, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_ALARM", mruby__VEHICLE__SET_VEHICLE_ALARM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "START_VEHICLE_ALARM", mruby__VEHICLE__START_VEHICLE_ALARM, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_ALARM_ACTIVATED", mruby__VEHICLE__IS_VEHICLE_ALARM_ACTIVATED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_INTERIORLIGHT", mruby__VEHICLE__SET_VEHICLE_INTERIORLIGHT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_LIGHT_MULTIPLIER", mruby__VEHICLE__SET_VEHICLE_LIGHT_MULTIPLIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "ATTACH_VEHICLE_TO_TRAILER", mruby__VEHICLE__ATTACH_VEHICLE_TO_TRAILER, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "_0x16B5E274BDE402F8", mruby__VEHICLE___0x16B5E274BDE402F8, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_vehicle, "_0x374706271354CB18", mruby__VEHICLE___0x374706271354CB18, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "DETACH_VEHICLE_FROM_TRAILER", mruby__VEHICLE__DETACH_VEHICLE_FROM_TRAILER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_ATTACHED_TO_TRAILER", mruby__VEHICLE__IS_VEHICLE_ATTACHED_TO_TRAILER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x2A8F319B392E7B3F", mruby__VEHICLE___0x2A8F319B392E7B3F, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x95CF53B3D687F9FA", mruby__VEHICLE___0x95CF53B3D687F9FA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_TYRE_FIXED", mruby__VEHICLE__SET_VEHICLE_TYRE_FIXED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_NUMBER_PLATE_TEXT", mruby__VEHICLE__SET_VEHICLE_NUMBER_PLATE_TEXT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_NUMBER_PLATE_TEXT", mruby__VEHICLE__GET_VEHICLE_NUMBER_PLATE_TEXT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_NUMBER_OF_VEHICLE_NUMBER_PLATES", mruby__VEHICLE__GET_NUMBER_OF_VEHICLE_NUMBER_PLATES, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX", mruby__VEHICLE__SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX", mruby__VEHICLE__GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_RANDOM_TRAINS", mruby__VEHICLE__SET_RANDOM_TRAINS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "CREATE_MISSION_TRAIN", mruby__VEHICLE__CREATE_MISSION_TRAIN, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_vehicle, "SWITCH_TRAIN_TRACK", mruby__VEHICLE__SWITCH_TRAIN_TRACK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x21973BBF8D17EDFA", mruby__VEHICLE___0x21973BBF8D17EDFA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "DELETE_ALL_TRAINS", mruby__VEHICLE__DELETE_ALL_TRAINS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_vehicle, "SET_TRAIN_SPEED", mruby__VEHICLE__SET_TRAIN_SPEED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_TRAIN_CRUISE_SPEED", mruby__VEHICLE__SET_TRAIN_CRUISE_SPEED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_RANDOM_BOATS", mruby__VEHICLE__SET_RANDOM_BOATS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_GARBAGE_TRUCKS", mruby__VEHICLE__SET_GARBAGE_TRUCKS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK", mruby__VEHICLE__DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x92523B76657A517D", mruby__VEHICLE___0x92523B76657A517D, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xF0F2103EFAF8CBA7", mruby__VEHICLE___0xF0F2103EFAF8CBA7, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID", mruby__VEHICLE__GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_TOTAL_DURATION_OF_VEHICLE_RECORDING", mruby__VEHICLE__GET_TOTAL_DURATION_OF_VEHICLE_RECORDING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_POSITION_IN_RECORDING", mruby__VEHICLE__GET_POSITION_IN_RECORDING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_TIME_POSITION_IN_RECORDING", mruby__VEHICLE__GET_TIME_POSITION_IN_RECORDING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x1F2E4E06DEA8992B", mruby__VEHICLE___0x1F2E4E06DEA8992B, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "STOP_PLAYBACK_RECORDED_VEHICLE", mruby__VEHICLE__STOP_PLAYBACK_RECORDED_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "PAUSE_PLAYBACK_RECORDED_VEHICLE", mruby__VEHICLE__PAUSE_PLAYBACK_RECORDED_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "UNPAUSE_PLAYBACK_RECORDED_VEHICLE", mruby__VEHICLE__UNPAUSE_PLAYBACK_RECORDED_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_PLAYBACK_GOING_ON_FOR_VEHICLE", mruby__VEHICLE__IS_PLAYBACK_GOING_ON_FOR_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE", mruby__VEHICLE__IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_CURRENT_PLAYBACK_FOR_VEHICLE", mruby__VEHICLE__GET_CURRENT_PLAYBACK_FOR_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE", mruby__VEHICLE__SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_PLAYBACK_SPEED", mruby__VEHICLE__SET_PLAYBACK_SPEED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE", mruby__VEHICLE__SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_PLAYBACK_TO_USE_AI", mruby__VEHICLE__SET_PLAYBACK_TO_USE_AI, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER", mruby__VEHICLE__SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "_0x5845066D8A1EA7F7", mruby__VEHICLE___0x5845066D8A1EA7F7, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_vehicle, "_0x796A877E459B99EA", mruby__VEHICLE___0x796A877E459B99EA, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "_0xFAF2A78061FD9EF4", mruby__VEHICLE___0xFAF2A78061FD9EF4, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "_0x063AE2B2CC273588", mruby__VEHICLE___0x063AE2B2CC273588, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "EXPLODE_VEHICLE_IN_CUTSCENE", mruby__VEHICLE__EXPLODE_VEHICLE_IN_CUTSCENE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "ADD_VEHICLE_STUCK_CHECK_WITH_WARP", mruby__VEHICLE__ADD_VEHICLE_STUCK_CHECK_WITH_WARP, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_MODEL_IS_SUPPRESSED", mruby__VEHICLE__SET_VEHICLE_MODEL_IS_SUPPRESSED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_RANDOM_VEHICLE_IN_SPHERE", mruby__VEHICLE__GET_RANDOM_VEHICLE_IN_SPHERE, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_vehicle, "GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE", mruby__VEHICLE__GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_vehicle, "GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE", mruby__VEHICLE__GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_vehicle, "GET_CLOSEST_VEHICLE", mruby__VEHICLE__GET_CLOSEST_VEHICLE, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_vehicle, "GET_TRAIN_CARRIAGE", mruby__VEHICLE__GET_TRAIN_CARRIAGE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "DELETE_MISSION_TRAIN", mruby__VEHICLE__DELETE_MISSION_TRAIN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED", mruby__VEHICLE__SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_MISSION_TRAIN_COORDS", mruby__VEHICLE__SET_MISSION_TRAIN_COORDS, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "IS_THIS_MODEL_A_BOAT", mruby__VEHICLE__IS_THIS_MODEL_A_BOAT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_IS_THIS_MODEL_A_SUBMERSIBLE", mruby__VEHICLE___IS_THIS_MODEL_A_SUBMERSIBLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_THIS_MODEL_A_PLANE", mruby__VEHICLE__IS_THIS_MODEL_A_PLANE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_THIS_MODEL_A_HELI", mruby__VEHICLE__IS_THIS_MODEL_A_HELI, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_THIS_MODEL_A_CAR", mruby__VEHICLE__IS_THIS_MODEL_A_CAR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_THIS_MODEL_A_TRAIN", mruby__VEHICLE__IS_THIS_MODEL_A_TRAIN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_THIS_MODEL_A_BIKE", mruby__VEHICLE__IS_THIS_MODEL_A_BIKE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_THIS_MODEL_A_BICYCLE", mruby__VEHICLE__IS_THIS_MODEL_A_BICYCLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_THIS_MODEL_A_QUADBIKE", mruby__VEHICLE__IS_THIS_MODEL_A_QUADBIKE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_HELI_BLADES_FULL_SPEED", mruby__VEHICLE__SET_HELI_BLADES_FULL_SPEED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_HELI_BLADES_SPEED", mruby__VEHICLE__SET_HELI_BLADES_SPEED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x99CAD8E7AFDB60FA", mruby__VEHICLE___0x99CAD8E7AFDB60FA, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_CAN_BE_TARGETTED", mruby__VEHICLE__SET_VEHICLE_CAN_BE_TARGETTED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xDBC631F109350B8C", mruby__VEHICLE___0xDBC631F109350B8C, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED", mruby__VEHICLE__SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x1AA8A837D2169D94", mruby__VEHICLE___0x1AA8A837D2169D94, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x2311DD7159F00582", mruby__VEHICLE___0x2311DD7159F00582, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_DIRT_LEVEL", mruby__VEHICLE__GET_VEHICLE_DIRT_LEVEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_DIRT_LEVEL", mruby__VEHICLE__SET_VEHICLE_DIRT_LEVEL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_IS_VEHICLE_DAMAGED", mruby__VEHICLE___IS_VEHICLE_DAMAGED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_DOOR_FULLY_OPEN", mruby__VEHICLE__IS_VEHICLE_DOOR_FULLY_OPEN, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_ENGINE_ON", mruby__VEHICLE__SET_VEHICLE_ENGINE_ON, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_UNDRIVEABLE", mruby__VEHICLE__SET_VEHICLE_UNDRIVEABLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_PROVIDES_COVER", mruby__VEHICLE__SET_VEHICLE_PROVIDES_COVER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_DOOR_CONTROL", mruby__VEHICLE__SET_VEHICLE_DOOR_CONTROL, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_DOOR_LATCHED", mruby__VEHICLE__SET_VEHICLE_DOOR_LATCHED, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_DOOR_ANGLE_RATIO", mruby__VEHICLE__GET_VEHICLE_DOOR_ANGLE_RATIO, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_GET_PED_USING_VEHICLE_DOOR", mruby__VEHICLE___GET_PED_USING_VEHICLE_DOOR, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_DOOR_SHUT", mruby__VEHICLE__SET_VEHICLE_DOOR_SHUT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_DOOR_BROKEN", mruby__VEHICLE__SET_VEHICLE_DOOR_BROKEN, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_CAN_BREAK", mruby__VEHICLE__SET_VEHICLE_CAN_BREAK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "DOES_VEHICLE_HAVE_ROOF", mruby__VEHICLE__DOES_VEHICLE_HAVE_ROOF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_BIG_VEHICLE", mruby__VEHICLE__IS_BIG_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_NUMBER_OF_VEHICLE_COLOURS", mruby__VEHICLE__GET_NUMBER_OF_VEHICLE_COLOURS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_COLOUR_COMBINATION", mruby__VEHICLE__SET_VEHICLE_COLOUR_COMBINATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_COLOUR_COMBINATION", mruby__VEHICLE__GET_VEHICLE_COLOUR_COMBINATION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_IS_CONSIDERED_BY_PLAYER", mruby__VEHICLE__SET_VEHICLE_IS_CONSIDERED_BY_PLAYER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xBE5C1255A1830FF5", mruby__VEHICLE___0xBE5C1255A1830FF5, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x9BECD4B9FEF3F8A6", mruby__VEHICLE___0x9BECD4B9FEF3F8A6, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x88BC673CA9E0AE99", mruby__VEHICLE___0x88BC673CA9E0AE99, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xE851E480B814D4BA", mruby__VEHICLE___0xE851E480B814D4BA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_DOOR_LOCK_STATUS", mruby__VEHICLE__GET_VEHICLE_DOOR_LOCK_STATUS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_DOOR_DAMAGED", mruby__VEHICLE__IS_VEHICLE_DOOR_DAMAGED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_SET_VEHICLE_DOOR_BREAKABLE", mruby__VEHICLE___SET_VEHICLE_DOOR_BREAKABLE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "_0x27B926779DEB502D", mruby__VEHICLE___0x27B926779DEB502D, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_BUMPER_BROKEN_OFF", mruby__VEHICLE__IS_VEHICLE_BUMPER_BROKEN_OFF, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "IS_COP_VEHICLE_IN_AREA_3D", mruby__VEHICLE__IS_COP_VEHICLE_IN_AREA_3D, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_ON_ALL_WHEELS", mruby__VEHICLE__IS_VEHICLE_ON_ALL_WHEELS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_LAYOUT_HASH", mruby__VEHICLE__GET_VEHICLE_LAYOUT_HASH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0xA01BC64DD4BFBBAC", mruby__VEHICLE___0xA01BC64DD4BFBBAC, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_RENDER_TRAIN_AS_DERAILED", mruby__VEHICLE__SET_RENDER_TRAIN_AS_DERAILED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_EXTRA_COLOURS", mruby__VEHICLE__SET_VEHICLE_EXTRA_COLOURS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "STOP_ALL_GARAGE_ACTIVITY", mruby__VEHICLE__STOP_ALL_GARAGE_ACTIVITY, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_FIXED", mruby__VEHICLE__SET_VEHICLE_FIXED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_DEFORMATION_FIXED", mruby__VEHICLE__SET_VEHICLE_DEFORMATION_FIXED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x206BC5DC9D1AC70A", mruby__VEHICLE___0x206BC5DC9D1AC70A, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x51BB2D88D31A914B", mruby__VEHICLE___0x51BB2D88D31A914B, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x192547247864DFDD", mruby__VEHICLE___0x192547247864DFDD, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_DISABLE_VEHICLE_PETROL_TANK_FIRES", mruby__VEHICLE__SET_DISABLE_VEHICLE_PETROL_TANK_FIRES, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE", mruby__VEHICLE__SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x91A0BD635321F145", mruby__VEHICLE___0x91A0BD635321F145, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xC50CE861B55EAB8B", mruby__VEHICLE___0xC50CE861B55EAB8B, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x6EBFB22D646FFC18", mruby__VEHICLE___0x6EBFB22D646FFC18, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x25367DE49D64CF16", mruby__VEHICLE___0x25367DE49D64CF16, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA", mruby__VEHICLE__REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_STEER_BIAS", mruby__VEHICLE__SET_VEHICLE_STEER_BIAS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_EXTRA_TURNED_ON", mruby__VEHICLE__IS_VEHICLE_EXTRA_TURNED_ON, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_EXTRA", mruby__VEHICLE__SET_VEHICLE_EXTRA, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "DOES_EXTRA_EXIST", mruby__VEHICLE__DOES_EXTRA_EXIST, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_CONVERTIBLE_ROOF", mruby__VEHICLE__SET_CONVERTIBLE_ROOF, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "LOWER_CONVERTIBLE_ROOF", mruby__VEHICLE__LOWER_CONVERTIBLE_ROOF, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "RAISE_CONVERTIBLE_ROOF", mruby__VEHICLE__RAISE_CONVERTIBLE_ROOF, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_CONVERTIBLE_ROOF_STATE", mruby__VEHICLE__GET_CONVERTIBLE_ROOF_STATE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_A_CONVERTIBLE", mruby__VEHICLE__IS_VEHICLE_A_CONVERTIBLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS", mruby__VEHICLE__IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_DAMAGE", mruby__VEHICLE__SET_VEHICLE_DAMAGE, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_ENGINE_HEALTH", mruby__VEHICLE__GET_VEHICLE_ENGINE_HEALTH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_ENGINE_HEALTH", mruby__VEHICLE__SET_VEHICLE_ENGINE_HEALTH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_PETROL_TANK_HEALTH", mruby__VEHICLE__GET_VEHICLE_PETROL_TANK_HEALTH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_PETROL_TANK_HEALTH", mruby__VEHICLE__SET_VEHICLE_PETROL_TANK_HEALTH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_STUCK_TIMER_UP", mruby__VEHICLE__IS_VEHICLE_STUCK_TIMER_UP, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "RESET_VEHICLE_STUCK_TIMER", mruby__VEHICLE__RESET_VEHICLE_STUCK_TIMER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_DRIVEABLE", mruby__VEHICLE__IS_VEHICLE_DRIVEABLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER", mruby__VEHICLE__SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_NEEDS_TO_BE_HOTWIRED", mruby__VEHICLE__SET_VEHICLE_NEEDS_TO_BE_HOTWIRED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x9F3F689B814F2599", mruby__VEHICLE___0x9F3F689B814F2599, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x4E74E62E0A97E901", mruby__VEHICLE___0x4E74E62E0A97E901, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "START_VEHICLE_HORN", mruby__VEHICLE__START_VEHICLE_HORN, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "_0x9D44FCCE98450843", mruby__VEHICLE___0x9D44FCCE98450843, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_HAS_STRONG_AXLES", mruby__VEHICLE__SET_VEHICLE_HAS_STRONG_AXLES, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_DISPLAY_NAME_FROM_VEHICLE_MODEL", mruby__VEHICLE__GET_DISPLAY_NAME_FROM_VEHICLE_MODEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_DEFORMATION_AT_POS", mruby__VEHICLE__GET_VEHICLE_DEFORMATION_AT_POS, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_LIVERY", mruby__VEHICLE__SET_VEHICLE_LIVERY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_LIVERY", mruby__VEHICLE__GET_VEHICLE_LIVERY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_LIVERY_COUNT", mruby__VEHICLE__GET_VEHICLE_LIVERY_COUNT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_WINDOW_INTACT", mruby__VEHICLE__IS_VEHICLE_WINDOW_INTACT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_ARE_ALL_VEHICLE_WINDOWS_INTACT", mruby__VEHICLE___ARE_ALL_VEHICLE_WINDOWS_INTACT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_IS_ANY_VEHICLE_SEAT_EMPTY", mruby__VEHICLE___IS_ANY_VEHICLE_SEAT_EMPTY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "RESET_VEHICLE_WHEELS", mruby__VEHICLE__RESET_VEHICLE_WHEELS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "IS_HELI_PART_BROKEN", mruby__VEHICLE__IS_HELI_PART_BROKEN, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "_GET_HELI_MAIN_ROTOR_HEALTH", mruby__VEHICLE___GET_HELI_MAIN_ROTOR_HEALTH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_GET_HELI_TAIL_ROTOR_HEALTH", mruby__VEHICLE___GET_HELI_TAIL_ROTOR_HEALTH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_GET_HELI_ENGINE_HEALTH", mruby__VEHICLE___GET_HELI_ENGINE_HEALTH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "WAS_COUNTER_ACTIVATED", mruby__VEHICLE__WAS_COUNTER_ACTIVATED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_NAME_DEBUG", mruby__VEHICLE__SET_VEHICLE_NAME_DEBUG, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE", mruby__VEHICLE__SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x3441CAD2F2231923", mruby__VEHICLE___0x3441CAD2F2231923, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x2B6747FAA9DB9D6B", mruby__VEHICLE___0x2B6747FAA9DB9D6B, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_SET_VEHICLE_LANDING_GEAR", mruby__VEHICLE___SET_VEHICLE_LANDING_GEAR, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_GET_VEHICLE_LANDING_GEAR", mruby__VEHICLE___GET_VEHICLE_LANDING_GEAR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_ANY_VEHICLE_NEAR_POINT", mruby__VEHICLE__IS_ANY_VEHICLE_NEAR_POINT, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "REQUEST_VEHICLE_HIGH_DETAIL_MODEL", mruby__VEHICLE__REQUEST_VEHICLE_HIGH_DETAIL_MODEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "REMOVE_VEHICLE_HIGH_DETAIL_MODEL", mruby__VEHICLE__REMOVE_VEHICLE_HIGH_DETAIL_MODEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_HIGH_DETAIL", mruby__VEHICLE__IS_VEHICLE_HIGH_DETAIL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "REQUEST_VEHICLE_ASSET", mruby__VEHICLE__REQUEST_VEHICLE_ASSET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "HAS_VEHICLE_ASSET_LOADED", mruby__VEHICLE__HAS_VEHICLE_ASSET_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "REMOVE_VEHICLE_ASSET", mruby__VEHICLE__REMOVE_VEHICLE_ASSET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_SET_TOW_TRUCK_CRANE_RAISED", mruby__VEHICLE___SET_TOW_TRUCK_CRANE_RAISED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "ATTACH_VEHICLE_TO_TOW_TRUCK", mruby__VEHICLE__ATTACH_VEHICLE_TO_TOW_TRUCK, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_vehicle, "DETACH_VEHICLE_FROM_TOW_TRUCK", mruby__VEHICLE__DETACH_VEHICLE_FROM_TOW_TRUCK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "DETACH_VEHICLE_FROM_ANY_TOW_TRUCK", mruby__VEHICLE__DETACH_VEHICLE_FROM_ANY_TOW_TRUCK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_ATTACHED_TO_TOW_TRUCK", mruby__VEHICLE__IS_VEHICLE_ATTACHED_TO_TOW_TRUCK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_ENTITY_ATTACHED_TO_TOW_TRUCK", mruby__VEHICLE__GET_ENTITY_ATTACHED_TO_TOW_TRUCK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_AUTOMATICALLY_ATTACHES", mruby__VEHICLE__SET_VEHICLE_AUTOMATICALLY_ATTACHES, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "_0xF8EBCCC96ADB9FB7", mruby__VEHICLE___0xF8EBCCC96ADB9FB7, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "_0x56B94C6D7127DFBA", mruby__VEHICLE___0x56B94C6D7127DFBA, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "_0x1093408B4B9D1146", mruby__VEHICLE___0x1093408B4B9D1146, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x30D779DE7C4F6DD3", mruby__VEHICLE___0x30D779DE7C4F6DD3, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x9AA47FFF660CB932", mruby__VEHICLE___0x9AA47FFF660CB932, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_BURNOUT", mruby__VEHICLE__SET_VEHICLE_BURNOUT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_IN_BURNOUT", mruby__VEHICLE__IS_VEHICLE_IN_BURNOUT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_REDUCE_GRIP", mruby__VEHICLE__SET_VEHICLE_REDUCE_GRIP, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_INDICATOR_LIGHTS", mruby__VEHICLE__SET_VEHICLE_INDICATOR_LIGHTS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_BRAKE_LIGHTS", mruby__VEHICLE__SET_VEHICLE_BRAKE_LIGHTS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_HANDBRAKE", mruby__VEHICLE__SET_VEHICLE_HANDBRAKE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x48ADC8A773564670", mruby__VEHICLE___0x48ADC8A773564670, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_vehicle, "_0x91D6DD290888CBAB", mruby__VEHICLE___0x91D6DD290888CBAB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_vehicle, "_0x51DB102F4A3BA5E0", mruby__VEHICLE___0x51DB102F4A3BA5E0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0xCAC66558B944DA67", mruby__VEHICLE___0xCAC66558B944DA67, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_RUDDER_BROKEN", mruby__VEHICLE__SET_VEHICLE_RUDDER_BROKEN, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x1A78AD3D8240536F", mruby__VEHICLE___0x1A78AD3D8240536F, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_GET_VEHICLE_SPEED", mruby__VEHICLE___GET_VEHICLE_SPEED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_MAX_BRAKING", mruby__VEHICLE__GET_VEHICLE_MAX_BRAKING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_MAX_TRACTION", mruby__VEHICLE__GET_VEHICLE_MAX_TRACTION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_ACCELERATION", mruby__VEHICLE__GET_VEHICLE_ACCELERATION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_GET_VEHICLE_MAX_SPEED", mruby__VEHICLE___GET_VEHICLE_MAX_SPEED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_MODEL_MAX_BRAKING", mruby__VEHICLE__GET_VEHICLE_MODEL_MAX_BRAKING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0xBFBA3BA79CFF7EBF", mruby__VEHICLE___0xBFBA3BA79CFF7EBF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_MODEL_MAX_TRACTION", mruby__VEHICLE__GET_VEHICLE_MODEL_MAX_TRACTION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_MODEL_ACCELERATION", mruby__VEHICLE__GET_VEHICLE_MODEL_ACCELERATION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x53409B5163D5B846", mruby__VEHICLE___0x53409B5163D5B846, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0xC6AD107DDC9054CC", mruby__VEHICLE___0xC6AD107DDC9054CC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x5AA3F878A178C4FC", mruby__VEHICLE___0x5AA3F878A178C4FC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x00C09F246ABEDD82", mruby__VEHICLE___0x00C09F246ABEDD82, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_CLASS_MAX_TRACTION", mruby__VEHICLE__GET_VEHICLE_CLASS_MAX_TRACTION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_CLASS_MAX_AGILITY", mruby__VEHICLE__GET_VEHICLE_CLASS_MAX_AGILITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_CLASS_MAX_ACCELERATION", mruby__VEHICLE__GET_VEHICLE_CLASS_MAX_ACCELERATION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_CLASS_MAX_BRAKING", mruby__VEHICLE__GET_VEHICLE_CLASS_MAX_BRAKING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x2CE544C68FB812A0", mruby__VEHICLE___0x2CE544C68FB812A0, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_vehicle, "_0x1033371FC8E842A7", mruby__VEHICLE___0x1033371FC8E842A7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_OPEN_VEHICLE_BOMB_BAY", mruby__VEHICLE___OPEN_VEHICLE_BOMB_BAY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x3556041742A0DC74", mruby__VEHICLE___0x3556041742A0DC74, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_SEARCHLIGHT_ON", mruby__VEHICLE__IS_VEHICLE_SEARCHLIGHT_ON, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_SEARCHLIGHT", mruby__VEHICLE__SET_VEHICLE_SEARCHLIGHT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "_0x639431E895B9AA57", mruby__VEHICLE___0x639431E895B9AA57, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_vehicle, "CAN_SHUFFLE_SEAT", mruby__VEHICLE__CAN_SHUFFLE_SEAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_NUM_MOD_KITS", mruby__VEHICLE__GET_NUM_MOD_KITS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_MOD_KIT", mruby__VEHICLE__SET_VEHICLE_MOD_KIT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_MOD_KIT", mruby__VEHICLE__GET_VEHICLE_MOD_KIT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_MOD_KIT_TYPE", mruby__VEHICLE__GET_VEHICLE_MOD_KIT_TYPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_WHEEL_TYPE", mruby__VEHICLE__GET_VEHICLE_WHEEL_TYPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_WHEEL_TYPE", mruby__VEHICLE__SET_VEHICLE_WHEEL_TYPE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_NUM_MOD_COLORS", mruby__VEHICLE__GET_NUM_MOD_COLORS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_MOD_COLOR_1", mruby__VEHICLE__SET_VEHICLE_MOD_COLOR_1, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_MOD_COLOR_2", mruby__VEHICLE__SET_VEHICLE_MOD_COLOR_2, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "_0xB45085B721EFD38C", mruby__VEHICLE___0xB45085B721EFD38C, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x4967A516ED23A5A1", mruby__VEHICLE___0x4967A516ED23A5A1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x9A83F5F9963775EF", mruby__VEHICLE___0x9A83F5F9963775EF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_MOD", mruby__VEHICLE__SET_VEHICLE_MOD, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_MOD", mruby__VEHICLE__GET_VEHICLE_MOD, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_MOD_VARIATION", mruby__VEHICLE__GET_VEHICLE_MOD_VARIATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_NUM_VEHICLE_MODS", mruby__VEHICLE__GET_NUM_VEHICLE_MODS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "REMOVE_VEHICLE_MOD", mruby__VEHICLE__REMOVE_VEHICLE_MOD, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "TOGGLE_VEHICLE_MOD", mruby__VEHICLE__TOGGLE_VEHICLE_MOD, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "IS_TOGGLE_MOD_ON", mruby__VEHICLE__IS_TOGGLE_MOD_ON, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_MOD_TEXT_LABEL", mruby__VEHICLE__GET_MOD_TEXT_LABEL, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "GET_MOD_SLOT_NAME", mruby__VEHICLE__GET_MOD_SLOT_NAME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_LIVERY_NAME", mruby__VEHICLE__GET_LIVERY_NAME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_MOD_MODIFIER_VALUE", mruby__VEHICLE__GET_VEHICLE_MOD_MODIFIER_VALUE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "_0x4593CF82AA179706", mruby__VEHICLE___0x4593CF82AA179706, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "PRELOAD_VEHICLE_MOD", mruby__VEHICLE__PRELOAD_VEHICLE_MOD, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "HAS_PRELOAD_MODS_FINISHED", mruby__VEHICLE__HAS_PRELOAD_MODS_FINISHED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "RELEASE_PRELOAD_MODS", mruby__VEHICLE__RELEASE_PRELOAD_MODS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_TYRE_SMOKE_COLOR", mruby__VEHICLE__SET_VEHICLE_TYRE_SMOKE_COLOR, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_WINDOW_TINT", mruby__VEHICLE__SET_VEHICLE_WINDOW_TINT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_WINDOW_TINT", mruby__VEHICLE__GET_VEHICLE_WINDOW_TINT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_NUM_VEHICLE_WINDOW_TINTS", mruby__VEHICLE__GET_NUM_VEHICLE_WINDOW_TINTS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_vehicle, "_0xEEBFC7A7EFDC35B4", mruby__VEHICLE___0xEEBFC7A7EFDC35B4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_CAUSE_OF_DESTRUCTION", mruby__VEHICLE__GET_VEHICLE_CAUSE_OF_DESTRUCTION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_IS_HEADLIGHT_L_BROKEN", mruby__VEHICLE___IS_HEADLIGHT_L_BROKEN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_IS_HEADLIGHT_R_BROKEN", mruby__VEHICLE___IS_HEADLIGHT_R_BROKEN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_SET_VEHICLE_ENGINE_POWER_MULTIPLIER", mruby__VEHICLE___SET_VEHICLE_ENGINE_POWER_MULTIPLIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x1CF38D529D7441D9", mruby__VEHICLE___0x1CF38D529D7441D9, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x1F9FB66F3A3842D2", mruby__VEHICLE___0x1F9FB66F3A3842D2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x54B0F614960F4A5F", mruby__VEHICLE___0x54B0F614960F4A5F, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_vehicle, "_0xE30524E1871F481D", mruby__VEHICLE___0xE30524E1871F481D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x291E373D483E7EE7", mruby__VEHICLE___0x291E373D483E7EE7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_SET_VEHICLE_ENGINE_TORQUE_MULTIPLIER", mruby__VEHICLE___SET_VEHICLE_ENGINE_TORQUE_MULTIPLIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x0AD9E8F87FF7C16F", mruby__VEHICLE___0x0AD9E8F87FF7C16F, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_IS_WANTED", mruby__VEHICLE__SET_VEHICLE_IS_WANTED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xF488C566413B4232", mruby__VEHICLE___0xF488C566413B4232, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xC1F981A6F74F0C23", mruby__VEHICLE___0xC1F981A6F74F0C23, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x0F3B4D4E43177236", mruby__VEHICLE___0x0F3B4D4E43177236, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x6636C535F6CC2725", mruby__VEHICLE___0x6636C535F6CC2725, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "DISABLE_PLANE_AILERON", mruby__VEHICLE__DISABLE_PLANE_AILERON, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "_IS_VEHICLE_ENGINE_ON", mruby__VEHICLE___IS_VEHICLE_ENGINE_ON, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x1D97D1E3A70A649F", mruby__VEHICLE___0x1D97D1E3A70A649F, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_SET_BIKE_LEAN_ANGLE", mruby__VEHICLE___SET_BIKE_LEAN_ANGLE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "_0xAB04325045427AAE", mruby__VEHICLE___0xAB04325045427AAE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xCFD778E7904C255E", mruby__VEHICLE___0xCFD778E7904C255E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0xACFB2463CC22BED2", mruby__VEHICLE___0xACFB2463CC22BED2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0xB2D06FAEDE65B577", mruby__VEHICLE___0xB2D06FAEDE65B577, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_vehicle, "_0xE01903C47C7AC89E", mruby__VEHICLE___0xE01903C47C7AC89E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_vehicle, "_0x02398B627547189C", mruby__VEHICLE___0x02398B627547189C, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_SET_PLANE_MIN_HEIGHT_ABOVE_TERRAIN", mruby__VEHICLE___SET_PLANE_MIN_HEIGHT_ABOVE_TERRAIN, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_LOD_MULTIPLIER", mruby__VEHICLE__SET_VEHICLE_LOD_MULTIPLIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x428BACCDF5E26EAD", mruby__VEHICLE___0x428BACCDF5E26EAD, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x42A4BEB35D372407", mruby__VEHICLE___0x42A4BEB35D372407, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x2C8CBFE1EA5FC631", mruby__VEHICLE___0x2C8CBFE1EA5FC631, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x4D9D109F63FEE1D4", mruby__VEHICLE___0x4D9D109F63FEE1D4, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x279D50DE5652D935", mruby__VEHICLE___0x279D50DE5652D935, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xE44A982368A4AF23", mruby__VEHICLE___0xE44A982368A4AF23, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xF25E02CB9C5818F8", mruby__VEHICLE___0xF25E02CB9C5818F8, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_vehicle, "_0xBC3CCA5844452B06", mruby__VEHICLE___0xBC3CCA5844452B06, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_SHOOT_AT_TARGET", mruby__VEHICLE__SET_VEHICLE_SHOOT_AT_TARGET, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_vehicle, "_0x97CE68CB032583F0", mruby__VEHICLE___0x97CE68CB032583F0, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x182F266C2D9E2BEB", mruby__VEHICLE___0x182F266C2D9E2BEB, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_PLATE_TYPE", mruby__VEHICLE__GET_VEHICLE_PLATE_TYPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "TRACK_VEHICLE_VISIBILITY", mruby__VEHICLE__TRACK_VEHICLE_VISIBILITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_VISIBLE", mruby__VEHICLE__IS_VEHICLE_VISIBLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_GRAVITY", mruby__VEHICLE__SET_VEHICLE_GRAVITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xE6C0C80B8C867537", mruby__VEHICLE___0xE6C0C80B8C867537, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x36492C2F0D134C56", mruby__VEHICLE___0x36492C2F0D134C56, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x06582AFF74894C75", mruby__VEHICLE___0x06582AFF74894C75, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xDFFCEF48E511DB48", mruby__VEHICLE___0xDFFCEF48E511DB48, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x8D474C8FAEFF6CDE", mruby__VEHICLE___0x8D474C8FAEFF6CDE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_ENGINE_CAN_DEGRADE", mruby__VEHICLE__SET_VEHICLE_ENGINE_CAN_DEGRADE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xF0E4BA16D1DB546C", mruby__VEHICLE___0xF0E4BA16D1DB546C, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "_0xF87D9F2301F7D206", mruby__VEHICLE___0xF87D9F2301F7D206, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x4198AB0022B15F87", mruby__VEHICLE___0x4198AB0022B15F87, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x755D6D5267CBBD7E", mruby__VEHICLE___0x755D6D5267CBBD7E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x0CDDA42F9E360CA6", mruby__VEHICLE___0x0CDDA42F9E360CA6, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_STOLEN", mruby__VEHICLE__IS_VEHICLE_STOLEN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_IS_STOLEN", mruby__VEHICLE__SET_VEHICLE_IS_STOLEN, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xAD2D28A1AFDFF131", mruby__VEHICLE___0xAD2D28A1AFDFF131, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x5991A01434CE9677", mruby__VEHICLE___0x5991A01434CE9677, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0xB264C4D2F2B0A78B", mruby__VEHICLE___0xB264C4D2F2B0A78B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "DETACH_VEHICLE_FROM_CARGOBOB", mruby__VEHICLE__DETACH_VEHICLE_FROM_CARGOBOB, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "DETACH_VEHICLE_FROM_ANY_CARGOBOB", mruby__VEHICLE__DETACH_VEHICLE_FROM_ANY_CARGOBOB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "IS_VEHICLE_ATTACHED_TO_CARGOBOB", mruby__VEHICLE__IS_VEHICLE_ATTACHED_TO_CARGOBOB, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_ATTACHED_TO_CARGOBOB", mruby__VEHICLE__GET_VEHICLE_ATTACHED_TO_CARGOBOB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "ATTACH_VEHICLE_TO_CARGOBOB", mruby__VEHICLE__ATTACH_VEHICLE_TO_CARGOBOB, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_vehicle, "_0x571FEB383F629926", mruby__VEHICLE___0x571FEB383F629926, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xCBDB9B923CACC92D", mruby__VEHICLE___0xCBDB9B923CACC92D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_IS_CARGOBOB_HOOK_ACTIVE", mruby__VEHICLE___IS_CARGOBOB_HOOK_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_ENABLE_CARGOBOB_HOOK", mruby__VEHICLE___ENABLE_CARGOBOB_HOOK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_RETRACT_CARGOBOB_HOOK", mruby__VEHICLE___RETRACT_CARGOBOB_HOOK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x877C1EAEAC531023", mruby__VEHICLE___0x877C1EAEAC531023, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "_0xCF1182F682F65307", mruby__VEHICLE___0xCF1182F682F65307, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_IS_CARGOBOB_MAGNET_ACTIVE", mruby__VEHICLE___IS_CARGOBOB_MAGNET_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_CARGOBOB_MAGNET_GRAB_VEHICLE", mruby__VEHICLE___CARGOBOB_MAGNET_GRAB_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xBCBFCD9D1DAC19E2", mruby__VEHICLE___0xBCBFCD9D1DAC19E2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xA17BAD153B51547E", mruby__VEHICLE___0xA17BAD153B51547E, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x66979ACF5102FD2F", mruby__VEHICLE___0x66979ACF5102FD2F, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x6D8EAC07506291FB", mruby__VEHICLE___0x6D8EAC07506291FB, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xED8286F71A819BAA", mruby__VEHICLE___0xED8286F71A819BAA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x685D5561680D088B", mruby__VEHICLE___0x685D5561680D088B, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xE301BD63E9E13CF0", mruby__VEHICLE___0xE301BD63E9E13CF0, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x9BDDC73CC6A115D4", mruby__VEHICLE___0x9BDDC73CC6A115D4, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "_0x56EB5E94318D3FB6", mruby__VEHICLE___0x56EB5E94318D3FB6, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "DOES_VEHICLE_HAVE_WEAPONS", mruby__VEHICLE__DOES_VEHICLE_HAVE_WEAPONS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x2C4A1590ABF43E8B", mruby__VEHICLE___0x2C4A1590ABF43E8B, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "DISABLE_VEHICLE_WEAPON", mruby__VEHICLE__DISABLE_VEHICLE_WEAPON, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "_0xE05DD0E9707003A3", mruby__VEHICLE___0xE05DD0E9707003A3, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x21115BCD6E44656A", mruby__VEHICLE___0x21115BCD6E44656A, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_CLASS", mruby__VEHICLE__GET_VEHICLE_CLASS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_CLASS_FROM_NAME", mruby__VEHICLE__GET_VEHICLE_CLASS_FROM_NAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_PLAYERS_LAST_VEHICLE", mruby__VEHICLE__SET_PLAYERS_LAST_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x300504B23BD3B711", mruby__VEHICLE___0x300504B23BD3B711, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xE5810AC70602F2F5", mruby__VEHICLE___0xE5810AC70602F2F5, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x068F64F2470F9656", mruby__VEHICLE___0x068F64F2470F9656, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xB8FBC8B1330CA9B4", mruby__VEHICLE___0xB8FBC8B1330CA9B4, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x10655FAB9915623D", mruby__VEHICLE___0x10655FAB9915623D, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x79DF7E806202CE01", mruby__VEHICLE___0x79DF7E806202CE01, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x9007A2F21DC108D4", mruby__VEHICLE___0x9007A2F21DC108D4, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_SET_HELICOPTER_ROLL_PITCH_YAW_MULT", mruby__VEHICLE___SET_HELICOPTER_ROLL_PITCH_YAW_MULT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_FRICTION_OVERRIDE", mruby__VEHICLE__SET_VEHICLE_FRICTION_OVERRIDE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP", mruby__VEHICLE__SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xF78F94D60248C737", mruby__VEHICLE___0xF78F94D60248C737, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_CEILING_HEIGHT", mruby__VEHICLE__SET_VEHICLE_CEILING_HEIGHT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x5E569EC46EC21CAE", mruby__VEHICLE___0x5E569EC46EC21CAE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x6D6AF961B72728AE", mruby__VEHICLE___0x6D6AF961B72728AE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "DOES_VEHICLE_EXIST_WITH_DECORATOR", mruby__VEHICLE__DOES_VEHICLE_EXIST_WITH_DECORATOR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x41062318F23ED854", mruby__VEHICLE___0x41062318F23ED854, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_SET_EXCLUSIVE_DRIVER", mruby__VEHICLE___SET_EXCLUSIVE_DRIVER, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "_0x500873A45724C863", mruby__VEHICLE___0x500873A45724C863, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xB055A34527CB8FD7", mruby__VEHICLE___0xB055A34527CB8FD7, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xF796359A959DF65D", mruby__VEHICLE___0xF796359A959DF65D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_SET_VEHICLE_NEON_LIGHTS_COLOUR", mruby__VEHICLE___SET_VEHICLE_NEON_LIGHTS_COLOUR, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_vehicle, "_SET_VEHICLE_NEON_LIGHT_ENABLED", mruby__VEHICLE___SET_VEHICLE_NEON_LIGHT_ENABLED, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "_IS_VEHICLE_NEON_LIGHT_ENABLED", mruby__VEHICLE___IS_VEHICLE_NEON_LIGHT_ENABLED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x35E0654F4BAD7971", mruby__VEHICLE___0x35E0654F4BAD7971, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0xB088E9A47AE6EDD5", mruby__VEHICLE___0xB088E9A47AE6EDD5, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xDBA3C090E3D74690", mruby__VEHICLE___0xDBA3C090E3D74690, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "GET_VEHICLE_BODY_HEALTH", mruby__VEHICLE__GET_VEHICLE_BODY_HEALTH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "SET_VEHICLE_BODY_HEALTH", mruby__VEHICLE__SET_VEHICLE_BODY_HEALTH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xDF7E3EEB29642C38", mruby__VEHICLE___0xDF7E3EEB29642C38, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_vehicle, "_GET_VEHICLE_SUSPENSION_HEIGHT", mruby__VEHICLE___GET_VEHICLE_SUSPENSION_HEIGHT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0x84FD40F56075E816", mruby__VEHICLE___0x84FD40F56075E816, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0xA7DCDF4DED40A8F4", mruby__VEHICLE___0xA7DCDF4DED40A8F4, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_GET_VEHICLE_BODY_HEALTH_2", mruby__VEHICLE___GET_VEHICLE_BODY_HEALTH_2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0xD4C4642CB7F50B5D", mruby__VEHICLE___0xD4C4642CB7F50B5D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_vehicle, "_0xC361AA040D6637A8", mruby__VEHICLE___0xC361AA040D6637A8, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0x99C82F8A139F3E4E", mruby__VEHICLE___0x99C82F8A139F3E4E, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_vehicle, "_0xE16142B94664DEFD", mruby__VEHICLE___0xE16142B94664DEFD, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "CREATE_OBJECT", mruby__OBJECT__CREATE_OBJECT, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_object, "CREATE_OBJECT_NO_OFFSET", mruby__OBJECT__CREATE_OBJECT_NO_OFFSET, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_object, "PLACE_OBJECT_ON_GROUND_PROPERLY", mruby__OBJECT__PLACE_OBJECT_ON_GROUND_PROPERLY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "SLIDE_OBJECT", mruby__OBJECT__SLIDE_OBJECT, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_object, "SET_OBJECT_TARGETTABLE", mruby__OBJECT__SET_OBJECT_TARGETTABLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "_0x77F33F2CCF64B3AA", mruby__OBJECT___0x77F33F2CCF64B3AA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "GET_CLOSEST_OBJECT_OF_TYPE", mruby__OBJECT__GET_CLOSEST_OBJECT_OF_TYPE, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_object, "HAS_OBJECT_BEEN_BROKEN", mruby__OBJECT__HAS_OBJECT_BEEN_BROKEN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN", mruby__OBJECT__HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_object, "_0x46494A2475701343", mruby__OBJECT___0x46494A2475701343, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_object, "_GET_OBJECT_OFFSET_FROM_COORDS", mruby__OBJECT___GET_OBJECT_OFFSET_FROM_COORDS, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_object, "SET_STATE_OF_CLOSEST_DOOR_OF_TYPE", mruby__OBJECT__SET_STATE_OF_CLOSEST_DOOR_OF_TYPE, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_object, "_DOOR_CONTROL", mruby__OBJECT___DOOR_CONTROL, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_object, "ADD_DOOR_TO_SYSTEM", mruby__OBJECT__ADD_DOOR_TO_SYSTEM, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_object, "REMOVE_DOOR_FROM_SYSTEM", mruby__OBJECT__REMOVE_DOOR_FROM_SYSTEM, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0x6BAB9442830C7F53", mruby__OBJECT___0x6BAB9442830C7F53, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_object, "_0x160AA1B32F6139B8", mruby__OBJECT___0x160AA1B32F6139B8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0x4BC2854478F3A749", mruby__OBJECT___0x4BC2854478F3A749, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0x03C27E13B42A0E82", mruby__OBJECT___0x03C27E13B42A0E82, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_object, "_0x9BA001CB45CBF627", mruby__OBJECT___0x9BA001CB45CBF627, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_object, "_0xB6E6FBA95C7324AC", mruby__OBJECT___0xB6E6FBA95C7324AC, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_object, "_0x65499865FCA6E5EC", mruby__OBJECT___0x65499865FCA6E5EC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0xC485E07E4F0B7958", mruby__OBJECT___0xC485E07E4F0B7958, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_object, "_0xD9B71952F78A2640", mruby__OBJECT___0xD9B71952F78A2640, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "_0xA85A21582451E951", mruby__OBJECT___0xA85A21582451E951, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "_DOES_DOOR_EXIST", mruby__OBJECT___DOES_DOOR_EXIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "IS_DOOR_CLOSED", mruby__OBJECT__IS_DOOR_CLOSED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0xC7F29CA00F46350E", mruby__OBJECT___0xC7F29CA00F46350E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0x701FDA1E82076BA4", mruby__OBJECT___0x701FDA1E82076BA4, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_object, "_0xDF97CDD4FC08FD34", mruby__OBJECT___0xDF97CDD4FC08FD34, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "IS_GARAGE_EMPTY", mruby__OBJECT__IS_GARAGE_EMPTY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_object, "_0x024A60DEB0EA69F0", mruby__OBJECT___0x024A60DEB0EA69F0, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_object, "_0x1761DC5D8471CBAA", mruby__OBJECT___0x1761DC5D8471CBAA, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_object, "_0x85B6C850546FDDE2", mruby__OBJECT___0x85B6C850546FDDE2, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_object, "_0x673ED815D6E323B7", mruby__OBJECT___0x673ED815D6E323B7, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_object, "_0x372EF6699146A1E4", mruby__OBJECT___0x372EF6699146A1E4, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_object, "_0xF0EED5A6BC7B237A", mruby__OBJECT___0xF0EED5A6BC7B237A, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_object, "_0x190428512B240692", mruby__OBJECT___0x190428512B240692, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_object, "_0xF2E1A7133DD356A6", mruby__OBJECT___0xF2E1A7133DD356A6, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "_0x66A49D021870FE88", mruby__OBJECT___0x66A49D021870FE88, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_object, "DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS", mruby__OBJECT__DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_object, "IS_POINT_IN_ANGLED_AREA", mruby__OBJECT__IS_POINT_IN_ANGLED_AREA, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_object, "_0x4D89D607CB3DD1D2", mruby__OBJECT___0x4D89D607CB3DD1D2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "SET_OBJECT_PHYSICS_PARAMS", mruby__OBJECT__SET_OBJECT_PHYSICS_PARAMS, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_object, "GET_OBJECT_FRAGMENT_DAMAGE_HEALTH", mruby__OBJECT__GET_OBJECT_FRAGMENT_DAMAGE_HEALTH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN", mruby__OBJECT__SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "IS_ANY_OBJECT_NEAR_POINT", mruby__OBJECT__IS_ANY_OBJECT_NEAR_POINT, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_object, "IS_OBJECT_NEAR_POINT", mruby__OBJECT__IS_OBJECT_NEAR_POINT, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_object, "_0x4A39DB43E47CF3AA", mruby__OBJECT___0x4A39DB43E47CF3AA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0xE7E4C198B0185900", mruby__OBJECT___0xE7E4C198B0185900, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_object, "_0xF9C1681347C8BD15", mruby__OBJECT___0xF9C1681347C8BD15, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "TRACK_OBJECT_VISIBILITY", mruby__OBJECT__TRACK_OBJECT_VISIBILITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "IS_OBJECT_VISIBLE", mruby__OBJECT__IS_OBJECT_VISIBLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0xC6033D32241F6FB5", mruby__OBJECT___0xC6033D32241F6FB5, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "_0xEB6F1A9B5510A5D2", mruby__OBJECT___0xEB6F1A9B5510A5D2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "_0xBCE595371A5FBAAF", mruby__OBJECT___0xBCE595371A5FBAAF, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "_0xB48FCED898292E52", mruby__OBJECT___0xB48FCED898292E52, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_object, "_0x5C29F698D404C5E1", mruby__OBJECT___0x5C29F698D404C5E1, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "_0x899BA936634A322E", mruby__OBJECT___0x899BA936634A322E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0x52AF537A0C5B8AAD", mruby__OBJECT___0x52AF537A0C5B8AAD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0x260EE4FDBDF4DB01", mruby__OBJECT___0x260EE4FDBDF4DB01, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "CREATE_PICKUP", mruby__OBJECT__CREATE_PICKUP, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_object, "CREATE_PICKUP_ROTATE", mruby__OBJECT__CREATE_PICKUP_ROTATE, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_object, "CREATE_AMBIENT_PICKUP", mruby__OBJECT__CREATE_AMBIENT_PICKUP, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_object, "CREATE_PORTABLE_PICKUP", mruby__OBJECT__CREATE_PORTABLE_PICKUP, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_object, "_CREATE_PICKUP_2", mruby__OBJECT___CREATE_PICKUP_2, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_object, "ATTACH_PORTABLE_PICKUP_TO_PED", mruby__OBJECT__ATTACH_PORTABLE_PICKUP_TO_PED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "DETACH_PORTABLE_PICKUP_FROM_PED", mruby__OBJECT__DETACH_PORTABLE_PICKUP_FROM_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0x0BF3B3BD47D79C08", mruby__OBJECT___0x0BF3B3BD47D79C08, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "_0x78857FC65CADB909", mruby__OBJECT___0x78857FC65CADB909, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "GET_SAFE_PICKUP_COORDS", mruby__OBJECT__GET_SAFE_PICKUP_COORDS, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_object, "GET_PICKUP_COORDS", mruby__OBJECT__GET_PICKUP_COORDS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "REMOVE_ALL_PICKUPS_OF_TYPE", mruby__OBJECT__REMOVE_ALL_PICKUPS_OF_TYPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "HAS_PICKUP_BEEN_COLLECTED", mruby__OBJECT__HAS_PICKUP_BEEN_COLLECTED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "REMOVE_PICKUP", mruby__OBJECT__REMOVE_PICKUP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "CREATE_MONEY_PICKUPS", mruby__OBJECT__CREATE_MONEY_PICKUPS, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_object, "DOES_PICKUP_EXIST", mruby__OBJECT__DOES_PICKUP_EXIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "DOES_PICKUP_OBJECT_EXIST", mruby__OBJECT__DOES_PICKUP_OBJECT_EXIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "GET_PICKUP_OBJECT", mruby__OBJECT__GET_PICKUP_OBJECT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0x0378C08504160D0D", mruby__OBJECT___0x0378C08504160D0D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_IS_PICKUP_WITHIN_RADIUS", mruby__OBJECT___IS_PICKUP_WITHIN_RADIUS, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_object, "SET_PICKUP_REGENERATION_TIME", mruby__OBJECT__SET_PICKUP_REGENERATION_TIME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "_0x616093EC6B139DD9", mruby__OBJECT___0x616093EC6B139DD9, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_object, "_0x88EAEC617CD26926", mruby__OBJECT___0x88EAEC617CD26926, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "SET_TEAM_PICKUP_OBJECT", mruby__OBJECT__SET_TEAM_PICKUP_OBJECT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_object, "_0x92AEFB5F6E294023", mruby__OBJECT___0x92AEFB5F6E294023, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_object, "_0xA08FE5E49BDC39DD", mruby__OBJECT___0xA08FE5E49BDC39DD, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_object, "_0xDB41D07A45A6D4B7", mruby__OBJECT___0xDB41D07A45A6D4B7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0x318516E02DE3ECE2", mruby__OBJECT___0x318516E02DE3ECE2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0x31F924B53EADDF65", mruby__OBJECT___0x31F924B53EADDF65, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0xF92099527DB8E2A7", mruby__OBJECT___0xF92099527DB8E2A7, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "_0xA2C1F5E92AFE49ED", mruby__OBJECT___0xA2C1F5E92AFE49ED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_object, "_0x762DB2D380B48D04", mruby__OBJECT___0x762DB2D380B48D04, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0x3430676B11CDF21D", mruby__OBJECT___0x3430676B11CDF21D, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_object, "_0xB2D0BDE54F0E8E5A", mruby__OBJECT___0xB2D0BDE54F0E8E5A, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "_0x08F96CA6C551AD51", mruby__OBJECT___0x08F96CA6C551AD51, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0x11D1E53A726891FE", mruby__OBJECT___0x11D1E53A726891FE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "_0x971DA0055324D033", mruby__OBJECT___0x971DA0055324D033, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_object, "_0x5EAAD83F8CFB4575", mruby__OBJECT___0x5EAAD83F8CFB4575, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_object, "SET_FORCE_OBJECT_THIS_FRAME", mruby__OBJECT__SET_FORCE_OBJECT_THIS_FRAME, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_object, "_MARK_OBJECT_FOR_DELETION", mruby__OBJECT___MARK_OBJECT_FOR_DELETION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_PAUSE", mruby__AI__TASK_PAUSE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_STAND_STILL", mruby__AI__TASK_STAND_STILL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_JUMP", mruby__AI__TASK_JUMP, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_COWER", mruby__AI__TASK_COWER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_HANDS_UP", mruby__AI__TASK_HANDS_UP, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ai, "UPDATE_TASK_HANDS_UP_DURATION", mruby__AI__UPDATE_TASK_HANDS_UP_DURATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_OPEN_VEHICLE_DOOR", mruby__AI__TASK_OPEN_VEHICLE_DOOR, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ai, "TASK_ENTER_VEHICLE", mruby__AI__TASK_ENTER_VEHICLE, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ai, "TASK_LEAVE_VEHICLE", mruby__AI__TASK_LEAVE_VEHICLE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "_TASK_GET_OFF_BOAT", mruby__AI___TASK_GET_OFF_BOAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_SKY_DIVE", mruby__AI__TASK_SKY_DIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_PARACHUTE", mruby__AI__TASK_PARACHUTE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_PARACHUTE_TO_TARGET", mruby__AI__TASK_PARACHUTE_TO_TARGET, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "SET_PARACHUTE_TASK_TARGET", mruby__AI__SET_PARACHUTE_TASK_TARGET, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "SET_PARACHUTE_TASK_THRUST", mruby__AI__SET_PARACHUTE_TASK_THRUST, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_RAPPEL_FROM_HELI", mruby__AI__TASK_RAPPEL_FROM_HELI, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_DRIVE_TO_COORD", mruby__AI__TASK_VEHICLE_DRIVE_TO_COORD, MRB_ARGS_REQ(11));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE", mruby__AI__TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_DRIVE_WANDER", mruby__AI__TASK_VEHICLE_DRIVE_WANDER, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "TASK_FOLLOW_TO_OFFSET_OF_ENTITY", mruby__AI__TASK_FOLLOW_TO_OFFSET_OF_ENTITY, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_ai, "TASK_GO_STRAIGHT_TO_COORD", mruby__AI__TASK_GO_STRAIGHT_TO_COORD, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_ai, "TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY", mruby__AI__TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ai, "TASK_ACHIEVE_HEADING", mruby__AI__TASK_ACHIEVE_HEADING, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "TASK_FLUSH_ROUTE", mruby__AI__TASK_FLUSH_ROUTE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ai, "TASK_EXTEND_ROUTE", mruby__AI__TASK_EXTEND_ROUTE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "TASK_FOLLOW_POINT_ROUTE", mruby__AI__TASK_FOLLOW_POINT_ROUTE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "TASK_GO_TO_ENTITY", mruby__AI__TASK_GO_TO_ENTITY, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ai, "TASK_SMART_FLEE_COORD", mruby__AI__TASK_SMART_FLEE_COORD, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_ai, "TASK_SMART_FLEE_PED", mruby__AI__TASK_SMART_FLEE_PED, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "TASK_REACT_AND_FLEE_PED", mruby__AI__TASK_REACT_AND_FLEE_PED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_SHOCKING_EVENT_REACT", mruby__AI__TASK_SHOCKING_EVENT_REACT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_WANDER_IN_AREA", mruby__AI__TASK_WANDER_IN_AREA, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ai, "TASK_WANDER_STANDARD", mruby__AI__TASK_WANDER_STANDARD, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_PARK", mruby__AI__TASK_VEHICLE_PARK, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_ai, "TASK_STEALTH_KILL", mruby__AI__TASK_STEALTH_KILL, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ai, "TASK_PLANT_BOMB", mruby__AI__TASK_PLANT_BOMB, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ai, "TASK_FOLLOW_NAV_MESH_TO_COORD", mruby__AI__TASK_FOLLOW_NAV_MESH_TO_COORD, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_ai, "TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED", mruby__AI__TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_ai, "SET_PED_PATH_CAN_USE_CLIMBOVERS", mruby__AI__SET_PED_PATH_CAN_USE_CLIMBOVERS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "SET_PED_PATH_CAN_USE_LADDERS", mruby__AI__SET_PED_PATH_CAN_USE_LADDERS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "SET_PED_PATH_CAN_DROP_FROM_HEIGHT", mruby__AI__SET_PED_PATH_CAN_DROP_FROM_HEIGHT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "_0x88E32DB8C1A4AA4B", mruby__AI___0x88E32DB8C1A4AA4B, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "SET_PED_PATHS_WIDTH_PLANT", mruby__AI__SET_PED_PATHS_WIDTH_PLANT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "SET_PED_PATH_PREFER_TO_AVOID_WATER", mruby__AI__SET_PED_PATH_PREFER_TO_AVOID_WATER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "SET_PED_PATH_AVOID_FIRE", mruby__AI__SET_PED_PATH_AVOID_FIRE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT", mruby__AI__SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "GET_NAVMESH_ROUTE_RESULT", mruby__AI__GET_NAVMESH_ROUTE_RESULT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "_0x3E38E28A1D80DDF6", mruby__AI___0x3E38E28A1D80DDF6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_GO_TO_COORD_ANY_MEANS", mruby__AI__TASK_GO_TO_COORD_ANY_MEANS, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_ai, "TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS", mruby__AI__TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_ai, "TASK_PLAY_ANIM", mruby__AI__TASK_PLAY_ANIM, MRB_ARGS_REQ(11));
  mrb_define_method(mrb, module_ai, "TASK_PLAY_ANIM_ADVANCED", mruby__AI__TASK_PLAY_ANIM_ADVANCED, MRB_ARGS_REQ(16));
  mrb_define_method(mrb, module_ai, "STOP_ANIM_TASK", mruby__AI__STOP_ANIM_TASK, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "STOP_ANIM_PLAYBACK", mruby__AI__STOP_ANIM_PLAYBACK, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "SET_ANIM_WEIGHT", mruby__AI__SET_ANIM_WEIGHT, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ai, "SET_ANIM_RATE", mruby__AI__SET_ANIM_RATE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "SET_ANIM_LOOPED", mruby__AI__SET_ANIM_LOOPED, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "_TASK_STOP_PHONE_GESTURE_ANIMATION", mruby__AI___TASK_STOP_PHONE_GESTURE_ANIMATION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "IS_PLAYING_PHONE_GESTURE_ANIM", mruby__AI__IS_PLAYING_PHONE_GESTURE_ANIM, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "GET_PHONE_GESTURE_ANIM_CURRENT_TIME", mruby__AI__GET_PHONE_GESTURE_ANIM_CURRENT_TIME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "GET_PHONE_GESTURE_ANIM_TOTAL_TIME", mruby__AI__GET_PHONE_GESTURE_ANIM_TOTAL_TIME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_PLAY_ANIM", mruby__AI__TASK_VEHICLE_PLAY_ANIM, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "TASK_LOOK_AT_COORD", mruby__AI__TASK_LOOK_AT_COORD, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ai, "TASK_LOOK_AT_ENTITY", mruby__AI__TASK_LOOK_AT_ENTITY, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ai, "TASK_CLEAR_LOOK_AT", mruby__AI__TASK_CLEAR_LOOK_AT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "CLOSE_SEQUENCE_TASK", mruby__AI__CLOSE_SEQUENCE_TASK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_PERFORM_SEQUENCE", mruby__AI__TASK_PERFORM_SEQUENCE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "SET_SEQUENCE_TO_REPEAT", mruby__AI__SET_SEQUENCE_TO_REPEAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "GET_SEQUENCE_PROGRESS", mruby__AI__GET_SEQUENCE_PROGRESS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "GET_IS_TASK_ACTIVE", mruby__AI__GET_IS_TASK_ACTIVE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "GET_SCRIPT_TASK_STATUS", mruby__AI__GET_SCRIPT_TASK_STATUS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "GET_ACTIVE_VEHICLE_MISSION_TYPE", mruby__AI__GET_ACTIVE_VEHICLE_MISSION_TYPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_LEAVE_ANY_VEHICLE", mruby__AI__TASK_LEAVE_ANY_VEHICLE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "TASK_AIM_GUN_SCRIPTED", mruby__AI__TASK_AIM_GUN_SCRIPTED, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "TASK_AIM_GUN_SCRIPTED_WITH_TARGET", mruby__AI__TASK_AIM_GUN_SCRIPTED_WITH_TARGET, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_ai, "UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET", mruby__AI__UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK", mruby__AI__GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_AIM_GUN_AT_ENTITY", mruby__AI__TASK_AIM_GUN_AT_ENTITY, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "TASK_TURN_PED_TO_FACE_ENTITY", mruby__AI__TASK_TURN_PED_TO_FACE_ENTITY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "TASK_AIM_GUN_AT_COORD", mruby__AI__TASK_AIM_GUN_AT_COORD, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ai, "TASK_SHOOT_AT_COORD", mruby__AI__TASK_SHOOT_AT_COORD, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT", mruby__AI__TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "CLEAR_PED_TASKS", mruby__AI__CLEAR_PED_TASKS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "CLEAR_PED_SECONDARY_TASK", mruby__AI__CLEAR_PED_SECONDARY_TASK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_EVERYONE_LEAVE_VEHICLE", mruby__AI__TASK_EVERYONE_LEAVE_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_GOTO_ENTITY_OFFSET", mruby__AI__TASK_GOTO_ENTITY_OFFSET, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ai, "TASK_GOTO_ENTITY_OFFSET_XY", mruby__AI__TASK_GOTO_ENTITY_OFFSET_XY, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_ai, "TASK_TURN_PED_TO_FACE_COORD", mruby__AI__TASK_TURN_PED_TO_FACE_COORD, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_TEMP_ACTION", mruby__AI__TASK_VEHICLE_TEMP_ACTION, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_MISSION", mruby__AI__TASK_VEHICLE_MISSION, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_MISSION_PED_TARGET", mruby__AI__TASK_VEHICLE_MISSION_PED_TARGET, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_MISSION_COORS_TARGET", mruby__AI__TASK_VEHICLE_MISSION_COORS_TARGET, MRB_ARGS_REQ(11));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_ESCORT", mruby__AI__TASK_VEHICLE_ESCORT, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_ai, "_TASK_VEHICLE_FOLLOW", mruby__AI___TASK_VEHICLE_FOLLOW, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_CHASE", mruby__AI__TASK_VEHICLE_CHASE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_HELI_PROTECT", mruby__AI__TASK_VEHICLE_HELI_PROTECT, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_ai, "SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG", mruby__AI__SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE", mruby__AI__SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_HELI_CHASE", mruby__AI__TASK_HELI_CHASE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ai, "TASK_PLANE_CHASE", mruby__AI__TASK_PLANE_CHASE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ai, "TASK_PLANE_LAND", mruby__AI__TASK_PLANE_LAND, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_ai, "TASK_HELI_MISSION", mruby__AI__TASK_HELI_MISSION, MRB_ARGS_REQ(15));
  mrb_define_method(mrb, module_ai, "TASK_PLANE_MISSION", mruby__AI__TASK_PLANE_MISSION, MRB_ARGS_REQ(13));
  mrb_define_method(mrb, module_ai, "TASK_BOAT_MISSION", mruby__AI__TASK_BOAT_MISSION, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_ai, "TASK_DRIVE_BY", mruby__AI__TASK_DRIVE_BY, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_ai, "SET_DRIVEBY_TASK_TARGET", mruby__AI__SET_DRIVEBY_TASK_TARGET, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK", mruby__AI__CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK", mruby__AI__IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "CONTROL_MOUNTED_WEAPON", mruby__AI__CONTROL_MOUNTED_WEAPON, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "SET_MOUNTED_WEAPON_TARGET", mruby__AI__SET_MOUNTED_WEAPON_TARGET, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK", mruby__AI__IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_USE_MOBILE_PHONE", mruby__AI__TASK_USE_MOBILE_PHONE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_USE_MOBILE_PHONE_TIMED", mruby__AI__TASK_USE_MOBILE_PHONE_TIMED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_CHAT_TO_PED", mruby__AI__TASK_CHAT_TO_PED, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_ai, "TASK_WARP_PED_INTO_VEHICLE", mruby__AI__TASK_WARP_PED_INTO_VEHICLE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "TASK_SHOOT_AT_ENTITY", mruby__AI__TASK_SHOOT_AT_ENTITY, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "TASK_CLIMB", mruby__AI__TASK_CLIMB, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_CLIMB_LADDER", mruby__AI__TASK_CLIMB_LADDER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "CLEAR_PED_TASKS_IMMEDIATELY", mruby__AI__CLEAR_PED_TASKS_IMMEDIATELY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_PERFORM_SEQUENCE_FROM_PROGRESS", mruby__AI__TASK_PERFORM_SEQUENCE_FROM_PROGRESS, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "SET_NEXT_DESIRED_MOVE_STATE", mruby__AI__SET_NEXT_DESIRED_MOVE_STATE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "SET_PED_DESIRED_MOVE_BLEND_RATIO", mruby__AI__SET_PED_DESIRED_MOVE_BLEND_RATIO, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "GET_PED_DESIRED_MOVE_BLEND_RATIO", mruby__AI__GET_PED_DESIRED_MOVE_BLEND_RATIO, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_GOTO_ENTITY_AIMING", mruby__AI__TASK_GOTO_ENTITY_AIMING, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "TASK_SET_DECISION_MAKER", mruby__AI__TASK_SET_DECISION_MAKER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_SET_SPHERE_DEFENSIVE_AREA", mruby__AI__TASK_SET_SPHERE_DEFENSIVE_AREA, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ai, "TASK_CLEAR_DEFENSIVE_AREA", mruby__AI__TASK_CLEAR_DEFENSIVE_AREA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_PED_SLIDE_TO_COORD", mruby__AI__TASK_PED_SLIDE_TO_COORD, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "TASK_PED_SLIDE_TO_COORD_HDG_RATE", mruby__AI__TASK_PED_SLIDE_TO_COORD_HDG_RATE, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ai, "ADD_COVER_POINT", mruby__AI__ADD_COVER_POINT, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_ai, "REMOVE_COVER_POINT", mruby__AI__REMOVE_COVER_POINT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS", mruby__AI__DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "GET_SCRIPTED_COVER_POINT_COORDS", mruby__AI__GET_SCRIPTED_COVER_POINT_COORDS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_COMBAT_PED", mruby__AI__TASK_COMBAT_PED, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "TASK_COMBAT_PED_TIMED", mruby__AI__TASK_COMBAT_PED_TIMED, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "TASK_SEEK_COVER_FROM_POS", mruby__AI__TASK_SEEK_COVER_FROM_POS, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "TASK_SEEK_COVER_FROM_PED", mruby__AI__TASK_SEEK_COVER_FROM_PED, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "TASK_SEEK_COVER_TO_COVER_POINT", mruby__AI__TASK_SEEK_COVER_TO_COVER_POINT, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ai, "TASK_SEEK_COVER_TO_COORDS", mruby__AI__TASK_SEEK_COVER_TO_COORDS, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_ai, "TASK_PUT_PED_DIRECTLY_INTO_COVER", mruby__AI__TASK_PUT_PED_DIRECTLY_INTO_COVER, MRB_ARGS_REQ(11));
  mrb_define_method(mrb, module_ai, "TASK_EXIT_COVER", mruby__AI__TASK_EXIT_COVER, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ai, "TASK_PUT_PED_DIRECTLY_INTO_MELEE", mruby__AI__TASK_PUT_PED_DIRECTLY_INTO_MELEE, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "TASK_TOGGLE_DUCK", mruby__AI__TASK_TOGGLE_DUCK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_GUARD_CURRENT_POSITION", mruby__AI__TASK_GUARD_CURRENT_POSITION, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "TASK_GUARD_ASSIGNED_DEFENSIVE_AREA", mruby__AI__TASK_GUARD_ASSIGNED_DEFENSIVE_AREA, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ai, "TASK_GUARD_SPHERE_DEFENSIVE_AREA", mruby__AI__TASK_GUARD_SPHERE_DEFENSIVE_AREA, MRB_ARGS_REQ(11));
  mrb_define_method(mrb, module_ai, "TASK_STAND_GUARD", mruby__AI__TASK_STAND_GUARD, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "SET_DRIVE_TASK_CRUISE_SPEED", mruby__AI__SET_DRIVE_TASK_CRUISE_SPEED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "SET_DRIVE_TASK_MAX_CRUISE_SPEED", mruby__AI__SET_DRIVE_TASK_MAX_CRUISE_SPEED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "SET_DRIVE_TASK_DRIVING_STYLE", mruby__AI__SET_DRIVE_TASK_DRIVING_STYLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "ADD_COVER_BLOCKING_AREA", mruby__AI__ADD_COVER_BLOCKING_AREA, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_ai, "REMOVE_ALL_COVER_BLOCKING_AREAS", mruby__AI__REMOVE_ALL_COVER_BLOCKING_AREAS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ai, "TASK_START_SCENARIO_IN_PLACE", mruby__AI__TASK_START_SCENARIO_IN_PLACE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "TASK_START_SCENARIO_AT_POSITION", mruby__AI__TASK_START_SCENARIO_AT_POSITION, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_ai, "TASK_USE_NEAREST_SCENARIO_TO_COORD", mruby__AI__TASK_USE_NEAREST_SCENARIO_TO_COORD, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP", mruby__AI__TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD", mruby__AI__TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP", mruby__AI__TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "DOES_SCENARIO_EXIST_IN_AREA", mruby__AI__DOES_SCENARIO_EXIST_IN_AREA, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ai, "IS_SCENARIO_OCCUPIED", mruby__AI__IS_SCENARIO_OCCUPIED, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ai, "PED_HAS_USE_SCENARIO_TASK", mruby__AI__PED_HAS_USE_SCENARIO_TASK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "PLAY_ANIM_ON_RUNNING_SCENARIO", mruby__AI__PLAY_ANIM_ON_RUNNING_SCENARIO, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "DOES_SCENARIO_GROUP_EXIST", mruby__AI__DOES_SCENARIO_GROUP_EXIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "IS_SCENARIO_GROUP_ENABLED", mruby__AI__IS_SCENARIO_GROUP_ENABLED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "SET_SCENARIO_GROUP_ENABLED", mruby__AI__SET_SCENARIO_GROUP_ENABLED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "RESET_SCENARIO_GROUPS_ENABLED", mruby__AI__RESET_SCENARIO_GROUPS_ENABLED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ai, "SET_EXCLUSIVE_SCENARIO_GROUP", mruby__AI__SET_EXCLUSIVE_SCENARIO_GROUP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "RESET_EXCLUSIVE_SCENARIO_GROUP", mruby__AI__RESET_EXCLUSIVE_SCENARIO_GROUP, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ai, "IS_SCENARIO_TYPE_ENABLED", mruby__AI__IS_SCENARIO_TYPE_ENABLED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "SET_SCENARIO_TYPE_ENABLED", mruby__AI__SET_SCENARIO_TYPE_ENABLED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "RESET_SCENARIO_TYPES_ENABLED", mruby__AI__RESET_SCENARIO_TYPES_ENABLED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ai, "IS_PED_ACTIVE_IN_SCENARIO", mruby__AI__IS_PED_ACTIVE_IN_SCENARIO, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "_0x621C6E4729388E41", mruby__AI___0x621C6E4729388E41, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "_0x8FD89A6240813FD0", mruby__AI___0x8FD89A6240813FD0, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "TASK_COMBAT_HATED_TARGETS_IN_AREA", mruby__AI__TASK_COMBAT_HATED_TARGETS_IN_AREA, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "TASK_COMBAT_HATED_TARGETS_AROUND_PED", mruby__AI__TASK_COMBAT_HATED_TARGETS_AROUND_PED, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED", mruby__AI__TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "TASK_THROW_PROJECTILE", mruby__AI__TASK_THROW_PROJECTILE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "TASK_SWAP_WEAPON", mruby__AI__TASK_SWAP_WEAPON, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_RELOAD_WEAPON", mruby__AI__TASK_RELOAD_WEAPON, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "IS_PED_GETTING_UP", mruby__AI__IS_PED_GETTING_UP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_WRITHE", mruby__AI__TASK_WRITHE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "IS_PED_IN_WRITHE", mruby__AI__IS_PED_IN_WRITHE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "OPEN_PATROL_ROUTE", mruby__AI__OPEN_PATROL_ROUTE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "CLOSE_PATROL_ROUTE", mruby__AI__CLOSE_PATROL_ROUTE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ai, "ADD_PATROL_ROUTE_NODE", mruby__AI__ADD_PATROL_ROUTE_NODE, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_ai, "ADD_PATROL_ROUTE_LINK", mruby__AI__ADD_PATROL_ROUTE_LINK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "CREATE_PATROL_ROUTE", mruby__AI__CREATE_PATROL_ROUTE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ai, "DELETE_PATROL_ROUTE", mruby__AI__DELETE_PATROL_ROUTE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_PATROL", mruby__AI__TASK_PATROL, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ai, "TASK_STAY_IN_COVER", mruby__AI__TASK_STAY_IN_COVER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "ADD_VEHICLE_SUBTASK_ATTACK_COORD", mruby__AI__ADD_VEHICLE_SUBTASK_ATTACK_COORD, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "ADD_VEHICLE_SUBTASK_ATTACK_PED", mruby__AI__ADD_VEHICLE_SUBTASK_ATTACK_PED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_SHOOT_AT_PED", mruby__AI__TASK_VEHICLE_SHOOT_AT_PED, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_AIM_AT_PED", mruby__AI__TASK_VEHICLE_AIM_AT_PED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_SHOOT_AT_COORD", mruby__AI__TASK_VEHICLE_SHOOT_AT_COORD, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_AIM_AT_COORD", mruby__AI__TASK_VEHICLE_AIM_AT_COORD, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "TASK_VEHICLE_GOTO_NAVMESH", mruby__AI__TASK_VEHICLE_GOTO_NAVMESH, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_ai, "TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD", mruby__AI__TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD, MRB_ARGS_REQ(15));
  mrb_define_method(mrb, module_ai, "TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY", mruby__AI__TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY, MRB_ARGS_REQ(14));
  mrb_define_method(mrb, module_ai, "TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD", mruby__AI__TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD, MRB_ARGS_REQ(15));
  mrb_define_method(mrb, module_ai, "TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD", mruby__AI__TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_ai, "TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY", mruby__AI__TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_ai, "SET_HIGH_FALL_TASK", mruby__AI__SET_HIGH_FALL_TASK, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "REQUEST_WAYPOINT_RECORDING", mruby__AI__REQUEST_WAYPOINT_RECORDING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "GET_IS_WAYPOINT_RECORDING_LOADED", mruby__AI__GET_IS_WAYPOINT_RECORDING_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "REMOVE_WAYPOINT_RECORDING", mruby__AI__REMOVE_WAYPOINT_RECORDING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "WAYPOINT_RECORDING_GET_COORD", mruby__AI__WAYPOINT_RECORDING_GET_COORD, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "WAYPOINT_RECORDING_GET_SPEED_AT_POINT", mruby__AI__WAYPOINT_RECORDING_GET_SPEED_AT_POINT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED", mruby__AI__IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "GET_PED_WAYPOINT_PROGRESS", mruby__AI__GET_PED_WAYPOINT_PROGRESS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "GET_PED_WAYPOINT_DISTANCE", mruby__AI__GET_PED_WAYPOINT_DISTANCE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "SET_PED_WAYPOINT_ROUTE_OFFSET", mruby__AI__SET_PED_WAYPOINT_ROUTE_OFFSET, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "GET_WAYPOINT_DISTANCE_ALONG_ROUTE", mruby__AI__GET_WAYPOINT_DISTANCE_ALONG_ROUTE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "WAYPOINT_PLAYBACK_GET_IS_PAUSED", mruby__AI__WAYPOINT_PLAYBACK_GET_IS_PAUSED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "WAYPOINT_PLAYBACK_PAUSE", mruby__AI__WAYPOINT_PLAYBACK_PAUSE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "WAYPOINT_PLAYBACK_RESUME", mruby__AI__WAYPOINT_PLAYBACK_RESUME, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "WAYPOINT_PLAYBACK_OVERRIDE_SPEED", mruby__AI__WAYPOINT_PLAYBACK_OVERRIDE_SPEED, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED", mruby__AI__WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE", mruby__AI__USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "WAYPOINT_PLAYBACK_START_AIMING_AT_PED", mruby__AI__WAYPOINT_PLAYBACK_START_AIMING_AT_PED, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "WAYPOINT_PLAYBACK_START_AIMING_AT_COORD", mruby__AI__WAYPOINT_PLAYBACK_START_AIMING_AT_COORD, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ai, "_0xE70BA7B90F8390DC", mruby__AI___0xE70BA7B90F8390DC, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD", mruby__AI__WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING", mruby__AI__WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "ASSISTED_MOVEMENT_REQUEST_ROUTE", mruby__AI__ASSISTED_MOVEMENT_REQUEST_ROUTE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "ASSISTED_MOVEMENT_REMOVE_ROUTE", mruby__AI__ASSISTED_MOVEMENT_REMOVE_ROUTE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "ASSISTED_MOVEMENT_IS_ROUTE_LOADED", mruby__AI__ASSISTED_MOVEMENT_IS_ROUTE_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES", mruby__AI__ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME", mruby__AI__ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE", mruby__AI__IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "GET_VEHICLE_WAYPOINT_PROGRESS", mruby__AI__GET_VEHICLE_WAYPOINT_PROGRESS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "GET_VEHICLE_WAYPOINT_TARGET_POINT", mruby__AI__GET_VEHICLE_WAYPOINT_TARGET_POINT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "VEHICLE_WAYPOINT_PLAYBACK_PAUSE", mruby__AI__VEHICLE_WAYPOINT_PLAYBACK_PAUSE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "VEHICLE_WAYPOINT_PLAYBACK_RESUME", mruby__AI__VEHICLE_WAYPOINT_PLAYBACK_RESUME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED", mruby__AI__VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED", mruby__AI__VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS", mruby__AI__TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "TASK_FORCE_MOTION_STATE", mruby__AI__TASK_FORCE_MOTION_STATE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "_0x2D537BA194896636", mruby__AI___0x2D537BA194896636, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ai, "_0xD5B35BEA41919ACB", mruby__AI___0xD5B35BEA41919ACB, MRB_ARGS_REQ(13));
  mrb_define_method(mrb, module_ai, "_0x921CE12C489C4C41", mruby__AI___0x921CE12C489C4C41, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "_0x30ED88D5E0C56A37", mruby__AI___0x30ED88D5E0C56A37, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "_0xD01015C7316AE176", mruby__AI___0xD01015C7316AE176, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "_0xAB13A5565480B6D9", mruby__AI___0xAB13A5565480B6D9, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "_0x717E4D1F2048376D", mruby__AI___0x717E4D1F2048376D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "_0xD5BB4025AE449A4E", mruby__AI___0xD5BB4025AE449A4E, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ai, "_0xA7FFBA498E4AAF67", mruby__AI___0xA7FFBA498E4AAF67, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "IS_MOVE_BLEND_RATIO_STILL", mruby__AI__IS_MOVE_BLEND_RATIO_STILL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "IS_MOVE_BLEND_RATIO_WALKING", mruby__AI__IS_MOVE_BLEND_RATIO_WALKING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "IS_MOVE_BLEND_RATIO_RUNNING", mruby__AI__IS_MOVE_BLEND_RATIO_RUNNING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "IS_MOVE_BLEND_RATIO_SPRINTING", mruby__AI__IS_MOVE_BLEND_RATIO_SPRINTING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "IS_PED_STILL", mruby__AI__IS_PED_STILL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "IS_PED_WALKING", mruby__AI__IS_PED_WALKING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "IS_PED_RUNNING", mruby__AI__IS_PED_RUNNING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "IS_PED_SPRINTING", mruby__AI__IS_PED_SPRINTING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "IS_PED_STRAFING", mruby__AI__IS_PED_STRAFING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "TASK_SYNCHRONIZED_SCENE", mruby__AI__TASK_SYNCHRONIZED_SCENE, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_ai, "TASK_SWEEP_AIM_ENTITY", mruby__AI__TASK_SWEEP_AIM_ENTITY, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_ai, "UPDATE_TASK_SWEEP_AIM_ENTITY", mruby__AI__UPDATE_TASK_SWEEP_AIM_ENTITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "UPDATE_TASK_SWEEP_AIM_POSITION", mruby__AI__UPDATE_TASK_SWEEP_AIM_POSITION, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ai, "TASK_ARREST_PED", mruby__AI__TASK_ARREST_PED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ai, "IS_PED_RUNNING_ARREST_TASK", mruby__AI__IS_PED_RUNNING_ARREST_TASK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "IS_PED_BEING_ARRESTED", mruby__AI__IS_PED_BEING_ARRESTED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "UNCUFF_PED", mruby__AI__UNCUFF_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ai, "IS_PED_CUFFED", mruby__AI__IS_PED_CUFFED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "GET_ALLOCATED_STACK_SIZE", mruby__GAMEPLAY__GET_ALLOCATED_STACK_SIZE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_GET_FREE_STACK_SLOTS_COUNT", mruby__GAMEPLAY___GET_FREE_STACK_SLOTS_COUNT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_RANDOM_SEED", mruby__GAMEPLAY__SET_RANDOM_SEED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_TIME_SCALE", mruby__GAMEPLAY__SET_TIME_SCALE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_MISSION_FLAG", mruby__GAMEPLAY__SET_MISSION_FLAG, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "GET_MISSION_FLAG", mruby__GAMEPLAY__GET_MISSION_FLAG, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "SET_RANDOM_EVENT_FLAG", mruby__GAMEPLAY__SET_RANDOM_EVENT_FLAG, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "GET_RANDOM_EVENT_FLAG", mruby__GAMEPLAY__GET_RANDOM_EVENT_FLAG, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x24DA7D7667FD7B09", mruby__GAMEPLAY___0x24DA7D7667FD7B09, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x4DCDF92BF64236CD", mruby__GAMEPLAY___0x4DCDF92BF64236CD, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0x31125FD509D9043F", mruby__GAMEPLAY___0x31125FD509D9043F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xEBD3205A207939ED", mruby__GAMEPLAY___0xEBD3205A207939ED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x97E7E2C04245115B", mruby__GAMEPLAY___0x97E7E2C04245115B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xEB078CA2B5E82ADD", mruby__GAMEPLAY___0xEB078CA2B5E82ADD, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0x703CC7F60CBB2B57", mruby__GAMEPLAY___0x703CC7F60CBB2B57, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x8951EB9C6906D3C8", mruby__GAMEPLAY___0x8951EB9C6906D3C8, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xBA4B8D83BDC75551", mruby__GAMEPLAY___0xBA4B8D83BDC75551, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xE8B9C0EC9E183F35", mruby__GAMEPLAY___0xE8B9C0EC9E183F35, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x65D2EBB47E1CEC21", mruby__GAMEPLAY___0x65D2EBB47E1CEC21, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x6F2135B6129620C1", mruby__GAMEPLAY___0x6F2135B6129620C1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x8D74E26F54B4E5C3", mruby__GAMEPLAY___0x8D74E26F54B4E5C3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_GET_CURRENT_WEATHER_TYPE", mruby__GAMEPLAY___GET_CURRENT_WEATHER_TYPE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_GET_NEXT_WEATHER_TYPE", mruby__GAMEPLAY___GET_NEXT_WEATHER_TYPE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "IS_PREV_WEATHER_TYPE", mruby__GAMEPLAY__IS_PREV_WEATHER_TYPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "IS_NEXT_WEATHER_TYPE", mruby__GAMEPLAY__IS_NEXT_WEATHER_TYPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_WEATHER_TYPE_PERSIST", mruby__GAMEPLAY__SET_WEATHER_TYPE_PERSIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_WEATHER_TYPE_NOW_PERSIST", mruby__GAMEPLAY__SET_WEATHER_TYPE_NOW_PERSIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_WEATHER_TYPE_NOW", mruby__GAMEPLAY__SET_WEATHER_TYPE_NOW, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_SET_WEATHER_TYPE_OVER_TIME", mruby__GAMEPLAY___SET_WEATHER_TYPE_OVER_TIME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "SET_RANDOM_WEATHER_TYPE", mruby__GAMEPLAY__SET_RANDOM_WEATHER_TYPE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "CLEAR_WEATHER_TYPE_PERSIST", mruby__GAMEPLAY__CLEAR_WEATHER_TYPE_PERSIST, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_SET_WEATHER_TYPE_TRANSITION", mruby__GAMEPLAY___SET_WEATHER_TYPE_TRANSITION, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_gameplay, "SET_OVERRIDE_WEATHER", mruby__GAMEPLAY__SET_OVERRIDE_WEATHER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "CLEAR_OVERRIDE_WEATHER", mruby__GAMEPLAY__CLEAR_OVERRIDE_WEATHER, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xB8F87EAD7533B176", mruby__GAMEPLAY___0xB8F87EAD7533B176, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xC3EAD29AB273ECE8", mruby__GAMEPLAY___0xC3EAD29AB273ECE8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xA7A1127490312C36", mruby__GAMEPLAY___0xA7A1127490312C36, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x31727907B2C43C55", mruby__GAMEPLAY___0x31727907B2C43C55, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x405591EC8FD9096D", mruby__GAMEPLAY___0x405591EC8FD9096D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xF751B16FB32ABC1D", mruby__GAMEPLAY___0xF751B16FB32ABC1D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xB3E6360DDE733E82", mruby__GAMEPLAY___0xB3E6360DDE733E82, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x7C9C0B1EEB1F9072", mruby__GAMEPLAY___0x7C9C0B1EEB1F9072, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x6216B116083A7CB4", mruby__GAMEPLAY___0x6216B116083A7CB4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x9F5E6BB6B34540DA", mruby__GAMEPLAY___0x9F5E6BB6B34540DA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xB9854DFDE0D833D6", mruby__GAMEPLAY___0xB9854DFDE0D833D6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xC54A08C85AE4D410", mruby__GAMEPLAY___0xC54A08C85AE4D410, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xA8434F1DFF41D6E7", mruby__GAMEPLAY___0xA8434F1DFF41D6E7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xC3C221ADDDE31A11", mruby__GAMEPLAY___0xC3C221ADDDE31A11, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_WIND", mruby__GAMEPLAY__SET_WIND, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_WIND_SPEED", mruby__GAMEPLAY__SET_WIND_SPEED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "GET_WIND_SPEED", mruby__GAMEPLAY__GET_WIND_SPEED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "SET_WIND_DIRECTION", mruby__GAMEPLAY__SET_WIND_DIRECTION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "GET_WIND_DIRECTION", mruby__GAMEPLAY__GET_WIND_DIRECTION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_SET_RAIN_FX_INTENSITY", mruby__GAMEPLAY___SET_RAIN_FX_INTENSITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "GET_RAIN_LEVEL", mruby__GAMEPLAY__GET_RAIN_LEVEL, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "GET_SNOW_LEVEL", mruby__GAMEPLAY__GET_SNOW_LEVEL, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_CREATE_LIGHTNING_THUNDER", mruby__GAMEPLAY___CREATE_LIGHTNING_THUNDER, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x02DEAAC8F8EA7FE7", mruby__GAMEPLAY___0x02DEAAC8F8EA7FE7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x11B56FBBF7224868", mruby__GAMEPLAY___0x11B56FBBF7224868, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_SET_CLOUD_HAT_TRANSITION", mruby__GAMEPLAY___SET_CLOUD_HAT_TRANSITION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0xA74802FB8D0B7814", mruby__GAMEPLAY___0xA74802FB8D0B7814, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_CLEAR_CLOUD_HAT", mruby__GAMEPLAY___CLEAR_CLOUD_HAT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xF36199225D6D8C86", mruby__GAMEPLAY___0xF36199225D6D8C86, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x20AC25E781AE4A84", mruby__GAMEPLAY___0x20AC25E781AE4A84, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "GET_GAME_TIMER", mruby__GAMEPLAY__GET_GAME_TIMER, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "GET_FRAME_TIME", mruby__GAMEPLAY__GET_FRAME_TIME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xE599A503B3837E1B", mruby__GAMEPLAY___0xE599A503B3837E1B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "GET_FRAME_COUNT", mruby__GAMEPLAY__GET_FRAME_COUNT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "GET_RANDOM_FLOAT_IN_RANGE", mruby__GAMEPLAY__GET_RANDOM_FLOAT_IN_RANGE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "GET_RANDOM_INT_IN_RANGE", mruby__GAMEPLAY__GET_RANDOM_INT_IN_RANGE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "ASIN", mruby__GAMEPLAY__ASIN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "ACOS", mruby__GAMEPLAY__ACOS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "TAN", mruby__GAMEPLAY__TAN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "ATAN", mruby__GAMEPLAY__ATAN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "ATAN2", mruby__GAMEPLAY__ATAN2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "GET_DISTANCE_BETWEEN_COORDS", mruby__GAMEPLAY__GET_DISTANCE_BETWEEN_COORDS, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_gameplay, "GET_ANGLE_BETWEEN_2D_VECTORS", mruby__GAMEPLAY__GET_ANGLE_BETWEEN_2D_VECTORS, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_gameplay, "GET_HEADING_FROM_VECTOR_2D", mruby__GAMEPLAY__GET_HEADING_FROM_VECTOR_2D, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0x7F8F6405F4777AF6", mruby__GAMEPLAY___0x7F8F6405F4777AF6, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_gameplay, "_0x21C235BC64831E5A", mruby__GAMEPLAY___0x21C235BC64831E5A, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_gameplay, "GET_HASH_KEY", mruby__GAMEPLAY__GET_HASH_KEY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "IS_AREA_OCCUPIED", mruby__GAMEPLAY__IS_AREA_OCCUPIED, MRB_ARGS_REQ(13));
  mrb_define_method(mrb, module_gameplay, "IS_POSITION_OCCUPIED", mruby__GAMEPLAY__IS_POSITION_OCCUPIED, MRB_ARGS_REQ(11));
  mrb_define_method(mrb, module_gameplay, "IS_POINT_OBSCURED_BY_A_MISSION_ENTITY", mruby__GAMEPLAY__IS_POINT_OBSCURED_BY_A_MISSION_ENTITY, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_gameplay, "CLEAR_AREA", mruby__GAMEPLAY__CLEAR_AREA, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_gameplay, "_0x957838AAF91BD12D", mruby__GAMEPLAY___0x957838AAF91BD12D, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_gameplay, "CLEAR_AREA_OF_VEHICLES", mruby__GAMEPLAY__CLEAR_AREA_OF_VEHICLES, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_gameplay, "CLEAR_ANGLED_AREA_OF_VEHICLES", mruby__GAMEPLAY__CLEAR_ANGLED_AREA_OF_VEHICLES, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_gameplay, "CLEAR_AREA_OF_OBJECTS", mruby__GAMEPLAY__CLEAR_AREA_OF_OBJECTS, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_gameplay, "CLEAR_AREA_OF_PEDS", mruby__GAMEPLAY__CLEAR_AREA_OF_PEDS, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_gameplay, "CLEAR_AREA_OF_COPS", mruby__GAMEPLAY__CLEAR_AREA_OF_COPS, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_gameplay, "CLEAR_AREA_OF_PROJECTILES", mruby__GAMEPLAY__CLEAR_AREA_OF_PROJECTILES, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_gameplay, "_0x7EC6F9A478A6A512", mruby__GAMEPLAY___0x7EC6F9A478A6A512, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "SET_SAVE_MENU_ACTIVE", mruby__GAMEPLAY__SET_SAVE_MENU_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x397BAA01068BAA96", mruby__GAMEPLAY___0x397BAA01068BAA96, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "SET_CREDITS_ACTIVE", mruby__GAMEPLAY__SET_CREDITS_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xB51B9AB9EF81868C", mruby__GAMEPLAY___0xB51B9AB9EF81868C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x075F1D57402C93BA", mruby__GAMEPLAY___0x075F1D57402C93BA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME", mruby__GAMEPLAY__TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME", mruby__GAMEPLAY__NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "ADD_HOSPITAL_RESTART", mruby__GAMEPLAY__ADD_HOSPITAL_RESTART, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_gameplay, "DISABLE_HOSPITAL_RESTART", mruby__GAMEPLAY__DISABLE_HOSPITAL_RESTART, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "ADD_POLICE_RESTART", mruby__GAMEPLAY__ADD_POLICE_RESTART, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_gameplay, "DISABLE_POLICE_RESTART", mruby__GAMEPLAY__DISABLE_POLICE_RESTART, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0x706B5EDCAA7FA663", mruby__GAMEPLAY___0x706B5EDCAA7FA663, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_gameplay, "_0xA2716D40842EAF79", mruby__GAMEPLAY___0xA2716D40842EAF79, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_DISABLE_AUTOMATIC_RESPAWN", mruby__GAMEPLAY___DISABLE_AUTOMATIC_RESPAWN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "IGNORE_NEXT_RESTART", mruby__GAMEPLAY__IGNORE_NEXT_RESTART, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_FADE_OUT_AFTER_DEATH", mruby__GAMEPLAY__SET_FADE_OUT_AFTER_DEATH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_FADE_OUT_AFTER_ARREST", mruby__GAMEPLAY__SET_FADE_OUT_AFTER_ARREST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_FADE_IN_AFTER_DEATH_ARREST", mruby__GAMEPLAY__SET_FADE_IN_AFTER_DEATH_ARREST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_FADE_IN_AFTER_LOAD", mruby__GAMEPLAY__SET_FADE_IN_AFTER_LOAD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_SAVE_HOUSE", mruby__GAMEPLAY__SET_SAVE_HOUSE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_gameplay, "OVERRIDE_SAVE_HOUSE", mruby__GAMEPLAY__OVERRIDE_SAVE_HOUSE, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_gameplay, "_0xA4A0065E39C9F25C", mruby__GAMEPLAY___0xA4A0065E39C9F25C, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_gameplay, "DO_AUTO_SAVE", mruby__GAMEPLAY__DO_AUTO_SAVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x6E04F06094C87047", mruby__GAMEPLAY___0x6E04F06094C87047, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "IS_AUTO_SAVE_IN_PROGRESS", mruby__GAMEPLAY__IS_AUTO_SAVE_IN_PROGRESS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x2107A3773771186D", mruby__GAMEPLAY___0x2107A3773771186D, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x06462A961E94B67C", mruby__GAMEPLAY___0x06462A961E94B67C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "BEGIN_REPLAY_STATS", mruby__GAMEPLAY__BEGIN_REPLAY_STATS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0x69FE6DC87BD2A5E9", mruby__GAMEPLAY___0x69FE6DC87BD2A5E9, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "END_REPLAY_STATS", mruby__GAMEPLAY__END_REPLAY_STATS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xD642319C54AADEB6", mruby__GAMEPLAY___0xD642319C54AADEB6, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x5B1F2E327B6B6FE1", mruby__GAMEPLAY___0x5B1F2E327B6B6FE1, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x2B626A0150E4D449", mruby__GAMEPLAY___0x2B626A0150E4D449, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xDC9274A7EF6B2867", mruby__GAMEPLAY___0xDC9274A7EF6B2867, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x8098C8D6597AAE18", mruby__GAMEPLAY___0x8098C8D6597AAE18, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "CLEAR_REPLAY_STATS", mruby__GAMEPLAY__CLEAR_REPLAY_STATS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x72DE52178C291CB5", mruby__GAMEPLAY___0x72DE52178C291CB5, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x44A0BDC559B35F6E", mruby__GAMEPLAY___0x44A0BDC559B35F6E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xEB2104E905C6F2E9", mruby__GAMEPLAY___0xEB2104E905C6F2E9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x2B5E102E4A42F2BF", mruby__GAMEPLAY___0x2B5E102E4A42F2BF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "IS_MEMORY_CARD_IN_USE", mruby__GAMEPLAY__IS_MEMORY_CARD_IN_USE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "SHOOT_SINGLE_BULLET_BETWEEN_COORDS", mruby__GAMEPLAY__SHOOT_SINGLE_BULLET_BETWEEN_COORDS, MRB_ARGS_REQ(13));
  mrb_define_method(mrb, module_gameplay, "_0xE3A7742E0B7A2F8B", mruby__GAMEPLAY___0xE3A7742E0B7A2F8B, MRB_ARGS_REQ(14));
  mrb_define_method(mrb, module_gameplay, "_0xBFE5756E7407064A", mruby__GAMEPLAY___0xBFE5756E7407064A, MRB_ARGS_REQ(18));
  mrb_define_method(mrb, module_gameplay, "SET_FAKE_WANTED_LEVEL", mruby__GAMEPLAY__SET_FAKE_WANTED_LEVEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x4C9296CBCD1B971E", mruby__GAMEPLAY___0x4C9296CBCD1B971E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "IS_BIT_SET", mruby__GAMEPLAY__IS_BIT_SET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "USING_MISSION_CREATOR", mruby__GAMEPLAY__USING_MISSION_CREATOR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xDEA36202FC3382DF", mruby__GAMEPLAY___0xDEA36202FC3382DF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_MINIGAME_IN_PROGRESS", mruby__GAMEPLAY__SET_MINIGAME_IN_PROGRESS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "IS_MINIGAME_IN_PROGRESS", mruby__GAMEPLAY__IS_MINIGAME_IN_PROGRESS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "IS_THIS_A_MINIGAME_SCRIPT", mruby__GAMEPLAY__IS_THIS_A_MINIGAME_SCRIPT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "IS_SNIPER_INVERTED", mruby__GAMEPLAY__IS_SNIPER_INVERTED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xD3D15555431AB793", mruby__GAMEPLAY___0xD3D15555431AB793, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "GET_PROFILE_SETTING", mruby__GAMEPLAY__GET_PROFILE_SETTING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "ARE_STRINGS_EQUAL", mruby__GAMEPLAY__ARE_STRINGS_EQUAL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "COMPARE_STRINGS", mruby__GAMEPLAY__COMPARE_STRINGS, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_gameplay, "ABSI", mruby__GAMEPLAY__ABSI, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "ABSF", mruby__GAMEPLAY__ABSF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "IS_SNIPER_BULLET_IN_AREA", mruby__GAMEPLAY__IS_SNIPER_BULLET_IN_AREA, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_gameplay, "IS_PROJECTILE_IN_AREA", mruby__GAMEPLAY__IS_PROJECTILE_IN_AREA, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_gameplay, "IS_PROJECTILE_TYPE_IN_AREA", mruby__GAMEPLAY__IS_PROJECTILE_TYPE_IN_AREA, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_gameplay, "IS_PROJECTILE_TYPE_IN_ANGLED_AREA", mruby__GAMEPLAY__IS_PROJECTILE_TYPE_IN_ANGLED_AREA, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_gameplay, "_0x34318593248C8FB2", mruby__GAMEPLAY___0x34318593248C8FB2, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_gameplay, "_0x8D7A43EC6A5FEA45", mruby__GAMEPLAY___0x8D7A43EC6A5FEA45, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_gameplay, "_0xDFB4138EEFED7B81", mruby__GAMEPLAY___0xDFB4138EEFED7B81, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_gameplay, "_0x82FDE6A57EE4EE44", mruby__GAMEPLAY___0x82FDE6A57EE4EE44, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_gameplay, "IS_BULLET_IN_ANGLED_AREA", mruby__GAMEPLAY__IS_BULLET_IN_ANGLED_AREA, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_gameplay, "IS_BULLET_IN_AREA", mruby__GAMEPLAY__IS_BULLET_IN_AREA, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_gameplay, "IS_BULLET_IN_BOX", mruby__GAMEPLAY__IS_BULLET_IN_BOX, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_gameplay, "HAS_BULLET_IMPACTED_IN_AREA", mruby__GAMEPLAY__HAS_BULLET_IMPACTED_IN_AREA, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_gameplay, "HAS_BULLET_IMPACTED_IN_BOX", mruby__GAMEPLAY__HAS_BULLET_IMPACTED_IN_BOX, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_gameplay, "IS_ORBIS_VERSION", mruby__GAMEPLAY__IS_ORBIS_VERSION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "IS_DURANGO_VERSION", mruby__GAMEPLAY__IS_DURANGO_VERSION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "IS_XBOX360_VERSION", mruby__GAMEPLAY__IS_XBOX360_VERSION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "IS_PS3_VERSION", mruby__GAMEPLAY__IS_PS3_VERSION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "IS_PC_VERSION", mruby__GAMEPLAY__IS_PC_VERSION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "IS_AUSSIE_VERSION", mruby__GAMEPLAY__IS_AUSSIE_VERSION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "IS_STRING_NULL", mruby__GAMEPLAY__IS_STRING_NULL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "IS_STRING_NULL_OR_EMPTY", mruby__GAMEPLAY__IS_STRING_NULL_OR_EMPTY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "GET_BITS_IN_RANGE", mruby__GAMEPLAY__GET_BITS_IN_RANGE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_gameplay, "ADD_STUNT_JUMP", mruby__GAMEPLAY__ADD_STUNT_JUMP, MRB_ARGS_REQ(17));
  mrb_define_method(mrb, module_gameplay, "ADD_STUNT_JUMP_ANGLED", mruby__GAMEPLAY__ADD_STUNT_JUMP_ANGLED, MRB_ARGS_REQ(19));
  mrb_define_method(mrb, module_gameplay, "DELETE_STUNT_JUMP", mruby__GAMEPLAY__DELETE_STUNT_JUMP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "ENABLE_STUNT_JUMP_SET", mruby__GAMEPLAY__ENABLE_STUNT_JUMP_SET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "DISABLE_STUNT_JUMP_SET", mruby__GAMEPLAY__DISABLE_STUNT_JUMP_SET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xD79185689F8FD5DF", mruby__GAMEPLAY___0xD79185689F8FD5DF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "IS_STUNT_JUMP_IN_PROGRESS", mruby__GAMEPLAY__IS_STUNT_JUMP_IN_PROGRESS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x2272B0A1343129F4", mruby__GAMEPLAY___0x2272B0A1343129F4, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x996DD1E1E02F1008", mruby__GAMEPLAY___0x996DD1E1E02F1008, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x6856EC3D35C81EA4", mruby__GAMEPLAY___0x6856EC3D35C81EA4, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "CANCEL_STUNT_JUMP", mruby__GAMEPLAY__CANCEL_STUNT_JUMP, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "SET_GAME_PAUSED", mruby__GAMEPLAY__SET_GAME_PAUSED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_THIS_SCRIPT_CAN_BE_PAUSED", mruby__GAMEPLAY__SET_THIS_SCRIPT_CAN_BE_PAUSED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT", mruby__GAMEPLAY__SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x071E2A839DE82D90", mruby__GAMEPLAY___0x071E2A839DE82D90, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0x557E43C447E700A8", mruby__GAMEPLAY___0x557E43C447E700A8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_ENABLE_MP_DLC_MAPS", mruby__GAMEPLAY___ENABLE_MP_DLC_MAPS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_SET_UNK_MAP_FLAG", mruby__GAMEPLAY___SET_UNK_MAP_FLAG, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "IS_FRONTEND_FADING", mruby__GAMEPLAY__IS_FRONTEND_FADING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "POPULATE_NOW", mruby__GAMEPLAY__POPULATE_NOW, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "GET_INDEX_OF_CURRENT_LEVEL", mruby__GAMEPLAY__GET_INDEX_OF_CURRENT_LEVEL, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "SET_GRAVITY_LEVEL", mruby__GAMEPLAY__SET_GRAVITY_LEVEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "START_SAVE_DATA", mruby__GAMEPLAY__START_SAVE_DATA, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_gameplay, "STOP_SAVE_DATA", mruby__GAMEPLAY__STOP_SAVE_DATA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xA09F896CE912481F", mruby__GAMEPLAY___0xA09F896CE912481F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "REGISTER_INT_TO_SAVE", mruby__GAMEPLAY__REGISTER_INT_TO_SAVE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "REGISTER_ENUM_TO_SAVE", mruby__GAMEPLAY__REGISTER_ENUM_TO_SAVE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "REGISTER_FLOAT_TO_SAVE", mruby__GAMEPLAY__REGISTER_FLOAT_TO_SAVE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "REGISTER_BOOL_TO_SAVE", mruby__GAMEPLAY__REGISTER_BOOL_TO_SAVE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "REGISTER_TEXT_LABEL_TO_SAVE", mruby__GAMEPLAY__REGISTER_TEXT_LABEL_TO_SAVE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0x6F7794F28C6B2535", mruby__GAMEPLAY___0x6F7794F28C6B2535, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0x48F069265A0E4BEC", mruby__GAMEPLAY___0x48F069265A0E4BEC, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0x8269816F6CFD40F8", mruby__GAMEPLAY___0x8269816F6CFD40F8, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0xFAA457EF263E8763", mruby__GAMEPLAY___0xFAA457EF263E8763, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_START_SAVE_STRUCT", mruby__GAMEPLAY___START_SAVE_STRUCT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_gameplay, "STOP_SAVE_STRUCT", mruby__GAMEPLAY__STOP_SAVE_STRUCT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_START_SAVE_ARRAY", mruby__GAMEPLAY___START_SAVE_ARRAY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_gameplay, "STOP_SAVE_ARRAY", mruby__GAMEPLAY__STOP_SAVE_ARRAY, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xDC0F817884CDD856", mruby__GAMEPLAY___0xDC0F817884CDD856, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0x9B2BD3773123EA2F", mruby__GAMEPLAY___0x9B2BD3773123EA2F, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0xEB4A0C2D56441717", mruby__GAMEPLAY___0xEB4A0C2D56441717, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "CREATE_INCIDENT", mruby__GAMEPLAY__CREATE_INCIDENT, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_gameplay, "IS_INCIDENT_VALID", mruby__GAMEPLAY__IS_INCIDENT_VALID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xB08B85D860E7BA3C", mruby__GAMEPLAY___0xB08B85D860E7BA3C, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_gameplay, "_0xD261BA3E7E998072", mruby__GAMEPLAY___0xD261BA3E7E998072, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0x67F6413D3220E18D", mruby__GAMEPLAY___0x67F6413D3220E18D, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_gameplay, "_0x1327E2FE9746BAEE", mruby__GAMEPLAY___0x1327E2FE9746BAEE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xB129E447A2EDA4BF", mruby__GAMEPLAY___0xB129E447A2EDA4BF, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0x32C7A7E8C43A1F80", mruby__GAMEPLAY___0x32C7A7E8C43A1F80, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_gameplay, "_0xE6869BECDD8F2403", mruby__GAMEPLAY___0xE6869BECDD8F2403, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "ENABLE_TENNIS_MODE", mruby__GAMEPLAY__ENABLE_TENNIS_MODE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_gameplay, "IS_TENNIS_MODE", mruby__GAMEPLAY__IS_TENNIS_MODE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x17DF68D720AA77F8", mruby__GAMEPLAY___0x17DF68D720AA77F8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x19BFED045C647C49", mruby__GAMEPLAY___0x19BFED045C647C49, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xE95B0C7D5BA3B96B", mruby__GAMEPLAY___0xE95B0C7D5BA3B96B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x8FA9C42FC5D7C64B", mruby__GAMEPLAY___0x8FA9C42FC5D7C64B, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_gameplay, "_0x54F157E0336A3822", mruby__GAMEPLAY___0x54F157E0336A3822, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_gameplay, "_0xD10F442036302D50", mruby__GAMEPLAY___0xD10F442036302D50, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_gameplay, "RESET_DISPATCH_IDEAL_SPAWN_DISTANCE", mruby__GAMEPLAY__RESET_DISPATCH_IDEAL_SPAWN_DISTANCE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "SET_DISPATCH_IDEAL_SPAWN_DISTANCE", mruby__GAMEPLAY__SET_DISPATCH_IDEAL_SPAWN_DISTANCE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS", mruby__GAMEPLAY__SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER", mruby__GAMEPLAY__SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0x918C7B2D2FF3928B", mruby__GAMEPLAY___0x918C7B2D2FF3928B, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_gameplay, "_0x2D4259F1FEB81DA9", mruby__GAMEPLAY___0x2D4259F1FEB81DA9, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_gameplay, "REMOVE_DISPATCH_SPAWN_BLOCKING_AREA", mruby__GAMEPLAY__REMOVE_DISPATCH_SPAWN_BLOCKING_AREA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "RESET_DISPATCH_SPAWN_BLOCKING_AREAS", mruby__GAMEPLAY__RESET_DISPATCH_SPAWN_BLOCKING_AREAS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xD9F692D349249528", mruby__GAMEPLAY___0xD9F692D349249528, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xE532EC1A63231B4F", mruby__GAMEPLAY___0xE532EC1A63231B4F, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0xB8721407EE9C3FF6", mruby__GAMEPLAY___0xB8721407EE9C3FF6, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_gameplay, "_0xB3CD58CCA6CDA852", mruby__GAMEPLAY___0xB3CD58CCA6CDA852, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x2587A48BC88DFADF", mruby__GAMEPLAY___0x2587A48BC88DFADF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "DISPLAY_ONSCREEN_KEYBOARD", mruby__GAMEPLAY__DISPLAY_ONSCREEN_KEYBOARD, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_gameplay, "UPDATE_ONSCREEN_KEYBOARD", mruby__GAMEPLAY__UPDATE_ONSCREEN_KEYBOARD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "GET_ONSCREEN_KEYBOARD_RESULT", mruby__GAMEPLAY__GET_ONSCREEN_KEYBOARD_RESULT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x3ED1438C1F5C6612", mruby__GAMEPLAY___0x3ED1438C1F5C6612, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0xA6A12939F16D85BE", mruby__GAMEPLAY___0xA6A12939F16D85BE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "_0x1EAE0A6E978894A2", mruby__GAMEPLAY___0x1EAE0A6E978894A2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_gameplay, "SET_EXPLOSIVE_AMMO_THIS_FRAME", mruby__GAMEPLAY__SET_EXPLOSIVE_AMMO_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_FIRE_AMMO_THIS_FRAME", mruby__GAMEPLAY__SET_FIRE_AMMO_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_EXPLOSIVE_MELEE_THIS_FRAME", mruby__GAMEPLAY__SET_EXPLOSIVE_MELEE_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "SET_SUPER_JUMP_THIS_FRAME", mruby__GAMEPLAY__SET_SUPER_JUMP_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x6FDDF453C0C756EC", mruby__GAMEPLAY___0x6FDDF453C0C756EC, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xFB00CA71DA386228", mruby__GAMEPLAY___0xFB00CA71DA386228, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x5AA3BEFA29F03AD4", mruby__GAMEPLAY___0x5AA3BEFA29F03AD4, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xE3D969D2785FFB5E", mruby__GAMEPLAY___0xE3D969D2785FFB5E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_RESET_LOCALPLAYER_STATE", mruby__GAMEPLAY___RESET_LOCALPLAYER_STATE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x0A60017F841A54F2", mruby__GAMEPLAY___0x0A60017F841A54F2, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_gameplay, "_0x1FF6BF9A63E5757F", mruby__GAMEPLAY___0x1FF6BF9A63E5757F, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x1BB299305C3E8C13", mruby__GAMEPLAY___0x1BB299305C3E8C13, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_gameplay, "_0x92790862E36C2ADA", mruby__GAMEPLAY___0x92790862E36C2ADA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xC7DB36C24634F52B", mruby__GAMEPLAY___0xC7DB36C24634F52B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x437138B6A830166A", mruby__GAMEPLAY___0x437138B6A830166A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x37DEB0AA183FB6D8", mruby__GAMEPLAY___0x37DEB0AA183FB6D8, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xEA2F2061875EED90", mruby__GAMEPLAY___0xEA2F2061875EED90, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x3BBBD13E5041A79E", mruby__GAMEPLAY___0x3BBBD13E5041A79E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xA049A5BE0F04F2F8", mruby__GAMEPLAY___0xA049A5BE0F04F2F8, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x4750FC27570311EC", mruby__GAMEPLAY___0x4750FC27570311EC, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x1B2366C3F2A5C8DF", mruby__GAMEPLAY___0x1B2366C3F2A5C8DF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_FORCE_SOCIAL_CLUB_UPDATE", mruby__GAMEPLAY___FORCE_SOCIAL_CLUB_UPDATE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x14832BF2ABA53FC5", mruby__GAMEPLAY___0x14832BF2ABA53FC5, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xC79AE21974B01FB2", mruby__GAMEPLAY___0xC79AE21974B01FB2, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x684A41975F077262", mruby__GAMEPLAY___0x684A41975F077262, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xABB2FA71C83A1B72", mruby__GAMEPLAY___0xABB2FA71C83A1B72, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x4EBB7E87AA0DBED4", mruby__GAMEPLAY___0x4EBB7E87AA0DBED4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x9689123E3F213AA5", mruby__GAMEPLAY___0x9689123E3F213AA5, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0x9D8D44ADBBA61EF2", mruby__GAMEPLAY___0x9D8D44ADBBA61EF2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_gameplay, "_0x23227DF0B2115469", mruby__GAMEPLAY___0x23227DF0B2115469, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_gameplay, "_0xD10282B6E3751BA0", mruby__GAMEPLAY___0xD10282B6E3751BA0, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "PLAY_PED_RINGTONE", mruby__AUDIO__PLAY_PED_RINGTONE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_audio, "IS_PED_RINGTONE_PLAYING", mruby__AUDIO__IS_PED_RINGTONE_PLAYING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "STOP_PED_RINGTONE", mruby__AUDIO__STOP_PED_RINGTONE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "IS_MOBILE_PHONE_CALL_ONGOING", mruby__AUDIO__IS_MOBILE_PHONE_CALL_ONGOING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0xC8B1B2425604CDD0", mruby__AUDIO___0xC8B1B2425604CDD0, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "CREATE_NEW_SCRIPTED_CONVERSATION", mruby__AUDIO__CREATE_NEW_SCRIPTED_CONVERSATION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "ADD_PED_TO_CONVERSATION", mruby__AUDIO__ADD_PED_TO_CONVERSATION, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_audio, "_0x33E3C6C6F2F0B506", mruby__AUDIO___0x33E3C6C6F2F0B506, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_audio, "_0x892B6AB8F33606F5", mruby__AUDIO___0x892B6AB8F33606F5, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "SET_MICROPHONE_POSITION", mruby__AUDIO__SET_MICROPHONE_POSITION, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_audio, "_0x0B568201DD99F0EB", mruby__AUDIO___0x0B568201DD99F0EB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0x61631F5DF50D1C34", mruby__AUDIO___0x61631F5DF50D1C34, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "START_SCRIPT_PHONE_CONVERSATION", mruby__AUDIO__START_SCRIPT_PHONE_CONVERSATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "PRELOAD_SCRIPT_PHONE_CONVERSATION", mruby__AUDIO__PRELOAD_SCRIPT_PHONE_CONVERSATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "START_SCRIPT_CONVERSATION", mruby__AUDIO__START_SCRIPT_CONVERSATION, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_audio, "PRELOAD_SCRIPT_CONVERSATION", mruby__AUDIO__PRELOAD_SCRIPT_CONVERSATION, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_audio, "START_PRELOADED_CONVERSATION", mruby__AUDIO__START_PRELOADED_CONVERSATION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0xE73364DB90778FFA", mruby__AUDIO___0xE73364DB90778FFA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "IS_SCRIPTED_CONVERSATION_ONGOING", mruby__AUDIO__IS_SCRIPTED_CONVERSATION_ONGOING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "IS_SCRIPTED_CONVERSATION_LOADED", mruby__AUDIO__IS_SCRIPTED_CONVERSATION_LOADED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "GET_CURRENT_SCRIPTED_CONVERSATION_LINE", mruby__AUDIO__GET_CURRENT_SCRIPTED_CONVERSATION_LINE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "PAUSE_SCRIPTED_CONVERSATION", mruby__AUDIO__PAUSE_SCRIPTED_CONVERSATION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "RESTART_SCRIPTED_CONVERSATION", mruby__AUDIO__RESTART_SCRIPTED_CONVERSATION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "STOP_SCRIPTED_CONVERSATION", mruby__AUDIO__STOP_SCRIPTED_CONVERSATION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE", mruby__AUDIO__SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0x8A694D7A68F8DC38", mruby__AUDIO___0x8A694D7A68F8DC38, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_audio, "_0xAA19F5572C38B564", mruby__AUDIO___0xAA19F5572C38B564, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0xB542DE8C3D1CB210", mruby__AUDIO___0xB542DE8C3D1CB210, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "REGISTER_SCRIPT_WITH_AUDIO", mruby__AUDIO__REGISTER_SCRIPT_WITH_AUDIO, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "UNREGISTER_SCRIPT_WITH_AUDIO", mruby__AUDIO__UNREGISTER_SCRIPT_WITH_AUDIO, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "REQUEST_MISSION_AUDIO_BANK", mruby__AUDIO__REQUEST_MISSION_AUDIO_BANK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "REQUEST_AMBIENT_AUDIO_BANK", mruby__AUDIO__REQUEST_AMBIENT_AUDIO_BANK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "REQUEST_SCRIPT_AUDIO_BANK", mruby__AUDIO__REQUEST_SCRIPT_AUDIO_BANK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "HINT_AMBIENT_AUDIO_BANK", mruby__AUDIO__HINT_AMBIENT_AUDIO_BANK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "HINT_SCRIPT_AUDIO_BANK", mruby__AUDIO__HINT_SCRIPT_AUDIO_BANK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "RELEASE_MISSION_AUDIO_BANK", mruby__AUDIO__RELEASE_MISSION_AUDIO_BANK, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "RELEASE_AMBIENT_AUDIO_BANK", mruby__AUDIO__RELEASE_AMBIENT_AUDIO_BANK, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "RELEASE_NAMED_SCRIPT_AUDIO_BANK", mruby__AUDIO__RELEASE_NAMED_SCRIPT_AUDIO_BANK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "RELEASE_SCRIPT_AUDIO_BANK", mruby__AUDIO__RELEASE_SCRIPT_AUDIO_BANK, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0x19AF7ED9B9D23058", mruby__AUDIO___0x19AF7ED9B9D23058, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0x9AC92EED5E4793AB", mruby__AUDIO___0x9AC92EED5E4793AB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "GET_SOUND_ID", mruby__AUDIO__GET_SOUND_ID, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "RELEASE_SOUND_ID", mruby__AUDIO__RELEASE_SOUND_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "PLAY_SOUND", mruby__AUDIO__PLAY_SOUND, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_audio, "PLAY_SOUND_FRONTEND", mruby__AUDIO__PLAY_SOUND_FRONTEND, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_audio, "_0xCADA5A0D0702381E", mruby__AUDIO___0xCADA5A0D0702381E, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "PLAY_SOUND_FROM_ENTITY", mruby__AUDIO__PLAY_SOUND_FROM_ENTITY, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_audio, "PLAY_SOUND_FROM_COORD", mruby__AUDIO__PLAY_SOUND_FROM_COORD, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_audio, "STOP_SOUND", mruby__AUDIO__STOP_SOUND, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "GET_NETWORK_ID_FROM_SOUND_ID", mruby__AUDIO__GET_NETWORK_ID_FROM_SOUND_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0x75262FD12D0A1C84", mruby__AUDIO___0x75262FD12D0A1C84, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SET_VARIABLE_ON_STREAM", mruby__AUDIO__SET_VARIABLE_ON_STREAM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "OVERRIDE_UNDERWATER_STREAM", mruby__AUDIO__OVERRIDE_UNDERWATER_STREAM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x733ADF241531E5C2", mruby__AUDIO___0x733ADF241531E5C2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "HAS_SOUND_FINISHED", mruby__AUDIO__HAS_SOUND_FINISHED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_PLAY_AMBIENT_SPEECH1", mruby__AUDIO___PLAY_AMBIENT_SPEECH1, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_audio, "_PLAY_AMBIENT_SPEECH2", mruby__AUDIO___PLAY_AMBIENT_SPEECH2, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_audio, "_PLAY_AMBIENT_SPEECH_WITH_VOICE", mruby__AUDIO___PLAY_AMBIENT_SPEECH_WITH_VOICE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_audio, "OVERRIDE_TREVOR_RAGE", mruby__AUDIO__OVERRIDE_TREVOR_RAGE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "RESET_TREVOR_RAGE", mruby__AUDIO__RESET_TREVOR_RAGE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "SET_PLAYER_ANGRY", mruby__AUDIO__SET_PLAYER_ANGRY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "PLAY_PAIN", mruby__AUDIO__PLAY_PAIN, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_audio, "_0xD01005D2BA2EB778", mruby__AUDIO___0xD01005D2BA2EB778, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0xDDC635D5B3262C56", mruby__AUDIO___0xDDC635D5B3262C56, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SET_AMBIENT_VOICE_NAME", mruby__AUDIO__SET_AMBIENT_VOICE_NAME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x40CF0D12D142A9E8", mruby__AUDIO___0x40CF0D12D142A9E8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0x7CDC8C3B89F661B3", mruby__AUDIO___0x7CDC8C3B89F661B3, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0xA5342D390CDA41D6", mruby__AUDIO___0xA5342D390CDA41D6, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x7A73D05A607734C7", mruby__AUDIO___0x7A73D05A607734C7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "STOP_CURRENT_PLAYING_AMBIENT_SPEECH", mruby__AUDIO__STOP_CURRENT_PLAYING_AMBIENT_SPEECH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "IS_AMBIENT_SPEECH_PLAYING", mruby__AUDIO__IS_AMBIENT_SPEECH_PLAYING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "IS_SCRIPTED_SPEECH_PLAYING", mruby__AUDIO__IS_SCRIPTED_SPEECH_PLAYING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "IS_ANY_SPEECH_PLAYING", mruby__AUDIO__IS_ANY_SPEECH_PLAYING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "IS_PED_IN_CURRENT_CONVERSATION", mruby__AUDIO__IS_PED_IN_CURRENT_CONVERSATION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SET_PED_IS_DRUNK", mruby__AUDIO__SET_PED_IS_DRUNK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0xC265DF9FB44A9FBD", mruby__AUDIO___0xC265DF9FB44A9FBD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SET_ANIMAL_MOOD", mruby__AUDIO__SET_ANIMAL_MOOD, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "IS_MOBILE_PHONE_RADIO_ACTIVE", mruby__AUDIO__IS_MOBILE_PHONE_RADIO_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "SET_MOBILE_PHONE_RADIO_STATE", mruby__AUDIO__SET_MOBILE_PHONE_RADIO_STATE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "GET_PLAYER_RADIO_STATION_INDEX", mruby__AUDIO__GET_PLAYER_RADIO_STATION_INDEX, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "GET_PLAYER_RADIO_STATION_NAME", mruby__AUDIO__GET_PLAYER_RADIO_STATION_NAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "GET_RADIO_STATION_NAME", mruby__AUDIO__GET_RADIO_STATION_NAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "GET_PLAYER_RADIO_STATION_GENRE", mruby__AUDIO__GET_PLAYER_RADIO_STATION_GENRE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "IS_RADIO_RETUNING", mruby__AUDIO__IS_RADIO_RETUNING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0x0626A247D2405330", mruby__AUDIO___0x0626A247D2405330, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0xFF266D1D0EB1195D", mruby__AUDIO___0xFF266D1D0EB1195D, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0xDD6BCF9E94425DF9", mruby__AUDIO___0xDD6BCF9E94425DF9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "SET_RADIO_TO_STATION_NAME", mruby__AUDIO__SET_RADIO_TO_STATION_NAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SET_VEH_RADIO_STATION", mruby__AUDIO__SET_VEH_RADIO_STATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0xC1805D05E6D4FE10", mruby__AUDIO___0xC1805D05E6D4FE10, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SET_EMITTER_RADIO_STATION", mruby__AUDIO__SET_EMITTER_RADIO_STATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "SET_STATIC_EMITTER_ENABLED", mruby__AUDIO__SET_STATIC_EMITTER_ENABLED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "SET_RADIO_TO_STATION_INDEX", mruby__AUDIO__SET_RADIO_TO_STATION_INDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SET_FRONTEND_RADIO_ACTIVE", mruby__AUDIO__SET_FRONTEND_RADIO_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "UNLOCK_MISSION_NEWS_STORY", mruby__AUDIO__UNLOCK_MISSION_NEWS_STORY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "GET_NUMBER_OF_PASSENGER_VOICE_VARIATIONS", mruby__AUDIO__GET_NUMBER_OF_PASSENGER_VOICE_VARIATIONS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "GET_AUDIBLE_MUSIC_TRACK_TEXT_ID", mruby__AUDIO__GET_AUDIBLE_MUSIC_TRACK_TEXT_ID, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "PLAY_END_CREDITS_MUSIC", mruby__AUDIO__PLAY_END_CREDITS_MUSIC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SKIP_RADIO_FORWARD", mruby__AUDIO__SKIP_RADIO_FORWARD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "FREEZE_RADIO_STATION", mruby__AUDIO__FREEZE_RADIO_STATION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "UNFREEZE_RADIO_STATION", mruby__AUDIO__UNFREEZE_RADIO_STATION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SET_RADIO_AUTO_UNFREEZE", mruby__AUDIO__SET_RADIO_AUTO_UNFREEZE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SET_INITIAL_PLAYER_STATION", mruby__AUDIO__SET_INITIAL_PLAYER_STATION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SET_USER_RADIO_CONTROL_ENABLED", mruby__AUDIO__SET_USER_RADIO_CONTROL_ENABLED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SET_RADIO_TRACK", mruby__AUDIO__SET_RADIO_TRACK, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "SET_VEHICLE_RADIO_LOUD", mruby__AUDIO__SET_VEHICLE_RADIO_LOUD, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_IS_VEHICLE_RADIO_LOUD", mruby__AUDIO___IS_VEHICLE_RADIO_LOUD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY", mruby__AUDIO__SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0x109697E2FFBAC8A1", mruby__AUDIO___0x109697E2FFBAC8A1, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0x5F43D83FD6738741", mruby__AUDIO___0x5F43D83FD6738741, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "SET_VEHICLE_RADIO_ENABLED", mruby__AUDIO__SET_VEHICLE_RADIO_ENABLED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x1654F24A88A8E3FE", mruby__AUDIO___0x1654F24A88A8E3FE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_MAX_RADIO_STATION_INDEX", mruby__AUDIO___MAX_RADIO_STATION_INDEX, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "FIND_RADIO_STATION_INDEX", mruby__AUDIO__FIND_RADIO_STATION_INDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0x774BD811F656A122", mruby__AUDIO___0x774BD811F656A122, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x2C96CDB04FCA358E", mruby__AUDIO___0x2C96CDB04FCA358E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0x031ACB6ABA18C729", mruby__AUDIO___0x031ACB6ABA18C729, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0xF3365489E0DD50F9", mruby__AUDIO___0xF3365489E0DD50F9, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "SET_AMBIENT_ZONE_STATE", mruby__AUDIO__SET_AMBIENT_ZONE_STATE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_audio, "CLEAR_AMBIENT_ZONE_STATE", mruby__AUDIO__CLEAR_AMBIENT_ZONE_STATE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "SET_AMBIENT_ZONE_LIST_STATE", mruby__AUDIO__SET_AMBIENT_ZONE_LIST_STATE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_audio, "CLEAR_AMBIENT_ZONE_LIST_STATE", mruby__AUDIO__CLEAR_AMBIENT_ZONE_LIST_STATE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "SET_AMBIENT_ZONE_STATE_PERSISTENT", mruby__AUDIO__SET_AMBIENT_ZONE_STATE_PERSISTENT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_audio, "SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT", mruby__AUDIO__SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_audio, "IS_AMBIENT_ZONE_ENABLED", mruby__AUDIO__IS_AMBIENT_ZONE_ENABLED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SET_CUTSCENE_AUDIO_OVERRIDE", mruby__AUDIO__SET_CUTSCENE_AUDIO_OVERRIDE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "GET_PLAYER_HEADSET_SOUND_ALTERNATE", mruby__AUDIO__GET_PLAYER_HEADSET_SOUND_ALTERNATE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "PLAY_POLICE_REPORT", mruby__AUDIO__PLAY_POLICE_REPORT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0xB4F90FAF7670B16F", mruby__AUDIO___0xB4F90FAF7670B16F, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "BLIP_SIREN", mruby__AUDIO__BLIP_SIREN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "OVERRIDE_VEH_HORN", mruby__AUDIO__OVERRIDE_VEH_HORN, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_audio, "IS_HORN_ACTIVE", mruby__AUDIO__IS_HORN_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SET_AGGRESSIVE_HORNS", mruby__AUDIO__SET_AGGRESSIVE_HORNS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0x02E93C796ABD3A97", mruby__AUDIO___0x02E93C796ABD3A97, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0x58BB377BEC7CD5F4", mruby__AUDIO___0x58BB377BEC7CD5F4, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "IS_STREAM_PLAYING", mruby__AUDIO__IS_STREAM_PLAYING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "GET_STREAM_PLAY_TIME", mruby__AUDIO__GET_STREAM_PLAY_TIME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "LOAD_STREAM", mruby__AUDIO__LOAD_STREAM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "LOAD_STREAM_WITH_START_OFFSET", mruby__AUDIO__LOAD_STREAM_WITH_START_OFFSET, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_audio, "_0x89049DD63C08B5D1", mruby__AUDIO___0x89049DD63C08B5D1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "PLAY_STREAM_FROM_VEHICLE", mruby__AUDIO__PLAY_STREAM_FROM_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "PLAY_STREAM_FROM_OBJECT", mruby__AUDIO__PLAY_STREAM_FROM_OBJECT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "PLAY_STREAM_FRONTEND", mruby__AUDIO__PLAY_STREAM_FRONTEND, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "SPECIAL_FRONTEND_EQUAL", mruby__AUDIO__SPECIAL_FRONTEND_EQUAL, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_audio, "STOP_STREAM", mruby__AUDIO__STOP_STREAM, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "STOP_PED_SPEAKING", mruby__AUDIO__STOP_PED_SPEAKING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "DISABLE_PED_PAIN_AUDIO", mruby__AUDIO__DISABLE_PED_PAIN_AUDIO, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "IS_AMBIENT_SPEECH_DISABLED", mruby__AUDIO__IS_AMBIENT_SPEECH_DISABLED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SET_SIREN_WITH_NO_DRIVER", mruby__AUDIO__SET_SIREN_WITH_NO_DRIVER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x9C11908013EA4715", mruby__AUDIO___0x9C11908013EA4715, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "SET_HORN_ENABLED", mruby__AUDIO__SET_HORN_ENABLED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "SET_AUDIO_VEHICLE_PRIORITY", mruby__AUDIO__SET_AUDIO_VEHICLE_PRIORITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x9D3AF56E94C9AE98", mruby__AUDIO___0x9D3AF56E94C9AE98, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "USE_SIREN_AS_HORN", mruby__AUDIO__USE_SIREN_AS_HORN, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x4F0C413926060B38", mruby__AUDIO___0x4F0C413926060B38, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0xF1F8157B8C3F171C", mruby__AUDIO___0xF1F8157B8C3F171C, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_audio, "_0xD2DCCD8E16E20997", mruby__AUDIO___0xD2DCCD8E16E20997, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0x5DB8010EE71FDEF2", mruby__AUDIO___0x5DB8010EE71FDEF2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0x59E7B488451F4D3A", mruby__AUDIO___0x59E7B488451F4D3A, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x01BB4D577D38BD9E", mruby__AUDIO___0x01BB4D577D38BD9E, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x1C073274E065C6D2", mruby__AUDIO___0x1C073274E065C6D2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x2BE4BC731D039D5A", mruby__AUDIO___0x2BE4BC731D039D5A, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "SET_VEHICLE_BOOST_ACTIVE", mruby__AUDIO__SET_VEHICLE_BOOST_ACTIVE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x6FDDAD856E36988A", mruby__AUDIO___0x6FDDAD856E36988A, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x06C0023BED16DD6B", mruby__AUDIO___0x06C0023BED16DD6B, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "PLAY_VEHICLE_DOOR_OPEN_SOUND", mruby__AUDIO__PLAY_VEHICLE_DOOR_OPEN_SOUND, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "PLAY_VEHICLE_DOOR_CLOSE_SOUND", mruby__AUDIO__PLAY_VEHICLE_DOOR_CLOSE_SOUND, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0xC15907D667F7CFB2", mruby__AUDIO___0xC15907D667F7CFB2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "IS_GAME_IN_CONTROL_OF_MUSIC", mruby__AUDIO__IS_GAME_IN_CONTROL_OF_MUSIC, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "SET_GPS_ACTIVE", mruby__AUDIO__SET_GPS_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "PLAY_MISSION_COMPLETE_AUDIO", mruby__AUDIO__PLAY_MISSION_COMPLETE_AUDIO, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "IS_MISSION_COMPLETE_PLAYING", mruby__AUDIO__IS_MISSION_COMPLETE_PLAYING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0x6F259F82D873B8B8", mruby__AUDIO___0x6F259F82D873B8B8, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0xF154B8D1775B2DEC", mruby__AUDIO___0xF154B8D1775B2DEC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "START_AUDIO_SCENE", mruby__AUDIO__START_AUDIO_SCENE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "STOP_AUDIO_SCENE", mruby__AUDIO__STOP_AUDIO_SCENE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "STOP_AUDIO_SCENES", mruby__AUDIO__STOP_AUDIO_SCENES, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "IS_AUDIO_SCENE_ACTIVE", mruby__AUDIO__IS_AUDIO_SCENE_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0xA5F377B175A699C5", mruby__AUDIO___0xA5F377B175A699C5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0x153973AB99FE8980", mruby__AUDIO___0x153973AB99FE8980, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_audio, "_0x18EB48CFC41F2EA0", mruby__AUDIO___0x18EB48CFC41F2EA0, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "AUDIO_IS_SCRIPTED_MUSIC_PLAYING", mruby__AUDIO__AUDIO_IS_SCRIPTED_MUSIC_PLAYING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "PREPARE_MUSIC_EVENT", mruby__AUDIO__PREPARE_MUSIC_EVENT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "CANCEL_MUSIC_EVENT", mruby__AUDIO__CANCEL_MUSIC_EVENT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "TRIGGER_MUSIC_EVENT", mruby__AUDIO__TRIGGER_MUSIC_EVENT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0xA097AB275061FB21", mruby__AUDIO___0xA097AB275061FB21, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "GET_MUSIC_PLAYTIME", mruby__AUDIO__GET_MUSIC_PLAYTIME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0xFBE20329593DEC9D", mruby__AUDIO___0xFBE20329593DEC9D, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_audio, "CLEAR_ALL_BROKEN_GLASS", mruby__AUDIO__CLEAR_ALL_BROKEN_GLASS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0x70B8EC8FC108A634", mruby__AUDIO___0x70B8EC8FC108A634, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x149AEE66F0CB3A99", mruby__AUDIO___0x149AEE66F0CB3A99, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x8BF907833BE275DE", mruby__AUDIO___0x8BF907833BE275DE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x062D5EAD4DA2FA6A", mruby__AUDIO___0x062D5EAD4DA2FA6A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "PREPARE_ALARM", mruby__AUDIO__PREPARE_ALARM, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "START_ALARM", mruby__AUDIO__START_ALARM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "STOP_ALARM", mruby__AUDIO__STOP_ALARM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "STOP_ALL_ALARMS", mruby__AUDIO__STOP_ALL_ALARMS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "IS_ALARM_PLAYING", mruby__AUDIO__IS_ALARM_PLAYING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "GET_VEHICLE_DEFAULT_HORN", mruby__AUDIO__GET_VEHICLE_DEFAULT_HORN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0xACB5DCCA1EC76840", mruby__AUDIO___0xACB5DCCA1EC76840, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "RESET_PED_AUDIO_FLAGS", mruby__AUDIO__RESET_PED_AUDIO_FLAGS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0xD2CC78CD3D0B50F9", mruby__AUDIO___0xD2CC78CD3D0B50F9, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0xBF4DC1784BE94DFA", mruby__AUDIO___0xBF4DC1784BE94DFA, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_audio, "_0x75773E11BA459E90", mruby__AUDIO___0x75773E11BA459E90, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0xD57AAAE0E2214D11", mruby__AUDIO___0xD57AAAE0E2214D11, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0x552369F549563AD5", mruby__AUDIO___0x552369F549563AD5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0x43FA0DFC5DF87815", mruby__AUDIO___0x43FA0DFC5DF87815, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "SET_AUDIO_FLAG", mruby__AUDIO__SET_AUDIO_FLAG, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "PREPARE_SYNCHRONIZED_AUDIO_EVENT", mruby__AUDIO__PREPARE_SYNCHRONIZED_AUDIO_EVENT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "PLAY_SYNCHRONIZED_AUDIO_EVENT", mruby__AUDIO__PLAY_SYNCHRONIZED_AUDIO_EVENT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "STOP_SYNCHRONIZED_AUDIO_EVENT", mruby__AUDIO__STOP_SYNCHRONIZED_AUDIO_EVENT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0xC8EDE9BDBCCBA6D4", mruby__AUDIO___0xC8EDE9BDBCCBA6D4, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_audio, "_0x950A154B8DAB6185", mruby__AUDIO___0x950A154B8DAB6185, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0x12561FCBB62D5B9C", mruby__AUDIO___0x12561FCBB62D5B9C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0x044DBAD7A7FA2BE5", mruby__AUDIO___0x044DBAD7A7FA2BE5, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_audio, "_0xB4BBFD9CD8B3922B", mruby__AUDIO___0xB4BBFD9CD8B3922B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0xE4E6DD5566D28C82", mruby__AUDIO___0xE4E6DD5566D28C82, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0x3A48AB4445D499BE", mruby__AUDIO___0x3A48AB4445D499BE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0x4ADA3F19BE4A6047", mruby__AUDIO___0x4ADA3F19BE4A6047, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0x0150B6FF25A9E2E5", mruby__AUDIO___0x0150B6FF25A9E2E5, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0xBEF34B1D9624D5DD", mruby__AUDIO___0xBEF34B1D9624D5DD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_audio, "_0x806058BBDC136E06", mruby__AUDIO___0x806058BBDC136E06, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0x544810ED9DB6BBE6", mruby__AUDIO___0x544810ED9DB6BBE6, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_audio, "_0x5B50ABB1FE3746F4", mruby__AUDIO___0x5B50ABB1FE3746F4, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cutscene, "REQUEST_CUTSCENE", mruby__CUTSCENE__REQUEST_CUTSCENE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cutscene, "_REQUEST_CUTSCENE_2", mruby__CUTSCENE___REQUEST_CUTSCENE_2, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_cutscene, "REMOVE_CUTSCENE", mruby__CUTSCENE__REMOVE_CUTSCENE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cutscene, "HAS_CUTSCENE_LOADED", mruby__CUTSCENE__HAS_CUTSCENE_LOADED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cutscene, "HAS_THIS_CUTSCENE_LOADED", mruby__CUTSCENE__HAS_THIS_CUTSCENE_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "_0x8D9DF6ECA8768583", mruby__CUTSCENE___0x8D9DF6ECA8768583, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "_0xB56BBBCC2955D9CB", mruby__CUTSCENE___0xB56BBBCC2955D9CB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cutscene, "_0x71B74D2AE19338D0", mruby__CUTSCENE___0x71B74D2AE19338D0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "_0x4C61C75BEE8184C2", mruby__CUTSCENE___0x4C61C75BEE8184C2, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_cutscene, "_0x06A3524161C502BA", mruby__CUTSCENE___0x06A3524161C502BA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "_0xA1C996C2A744262E", mruby__CUTSCENE___0xA1C996C2A744262E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "_0xD00D76A7DFC9D852", mruby__CUTSCENE___0xD00D76A7DFC9D852, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "_0x0ABC54DE641DC0FC", mruby__CUTSCENE___0x0ABC54DE641DC0FC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "START_CUTSCENE", mruby__CUTSCENE__START_CUTSCENE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "START_CUTSCENE_AT_COORDS", mruby__CUTSCENE__START_CUTSCENE_AT_COORDS, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_cutscene, "STOP_CUTSCENE", mruby__CUTSCENE__STOP_CUTSCENE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "STOP_CUTSCENE_IMMEDIATELY", mruby__CUTSCENE__STOP_CUTSCENE_IMMEDIATELY, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cutscene, "SET_CUTSCENE_ORIGIN", mruby__CUTSCENE__SET_CUTSCENE_ORIGIN, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_cutscene, "_0x011883F41211432A", mruby__CUTSCENE___0x011883F41211432A, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_cutscene, "GET_CUTSCENE_TIME", mruby__CUTSCENE__GET_CUTSCENE_TIME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cutscene, "GET_CUTSCENE_TOTAL_DURATION", mruby__CUTSCENE__GET_CUTSCENE_TOTAL_DURATION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cutscene, "WAS_CUTSCENE_SKIPPED", mruby__CUTSCENE__WAS_CUTSCENE_SKIPPED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cutscene, "HAS_CUTSCENE_FINISHED", mruby__CUTSCENE__HAS_CUTSCENE_FINISHED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cutscene, "IS_CUTSCENE_ACTIVE", mruby__CUTSCENE__IS_CUTSCENE_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cutscene, "IS_CUTSCENE_PLAYING", mruby__CUTSCENE__IS_CUTSCENE_PLAYING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cutscene, "GET_CUTSCENE_SECTION_PLAYING", mruby__CUTSCENE__GET_CUTSCENE_SECTION_PLAYING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cutscene, "GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY", mruby__CUTSCENE__GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cutscene, "_0x583DF8E3D4AFBD98", mruby__CUTSCENE___0x583DF8E3D4AFBD98, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cutscene, "_0x4CEBC1ED31E8925E", mruby__CUTSCENE___0x4CEBC1ED31E8925E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "GET_ENTITY_INDEX_OF_REGISTERED_ENTITY", mruby__CUTSCENE__GET_ENTITY_INDEX_OF_REGISTERED_ENTITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cutscene, "_0x7F96F23FA9B73327", mruby__CUTSCENE___0x7F96F23FA9B73327, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "SET_CUTSCENE_TRIGGER_AREA", mruby__CUTSCENE__SET_CUTSCENE_TRIGGER_AREA, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_cutscene, "CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY", mruby__CUTSCENE__CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cutscene, "CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY", mruby__CUTSCENE__CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cutscene, "CAN_SET_EXIT_STATE_FOR_CAMERA", mruby__CUTSCENE__CAN_SET_EXIT_STATE_FOR_CAMERA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "_0xC61B86C9F61EB404", mruby__CUTSCENE___0xC61B86C9F61EB404, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "SET_CUTSCENE_FADE_VALUES", mruby__CUTSCENE__SET_CUTSCENE_FADE_VALUES, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_cutscene, "_0x20746F7B1032A3C7", mruby__CUTSCENE___0x20746F7B1032A3C7, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_cutscene, "_0x06EE9048FD080382", mruby__CUTSCENE___0x06EE9048FD080382, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "_0xA0FE76168A189DDB", mruby__CUTSCENE___0xA0FE76168A189DDB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cutscene, "_0x2F137B508DE238F2", mruby__CUTSCENE___0x2F137B508DE238F2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "_0xE36A98D8AB3D3C66", mruby__CUTSCENE___0xE36A98D8AB3D3C66, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "_0x5EDEF0CF8C1DAB3C", mruby__CUTSCENE___0x5EDEF0CF8C1DAB3C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cutscene, "_0x41FAA8FB2ECE8720", mruby__CUTSCENE___0x41FAA8FB2ECE8720, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cutscene, "REGISTER_SYNCHRONISED_SCRIPT_SPEECH", mruby__CUTSCENE__REGISTER_SYNCHRONISED_SCRIPT_SPEECH, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cutscene, "SET_CUTSCENE_PED_COMPONENT_VARIATION", mruby__CUTSCENE__SET_CUTSCENE_PED_COMPONENT_VARIATION, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_cutscene, "_0x2A56C06EBEF2B0D9", mruby__CUTSCENE___0x2A56C06EBEF2B0D9, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_cutscene, "DOES_CUTSCENE_ENTITY_EXIST", mruby__CUTSCENE__DOES_CUTSCENE_ENTITY_EXIST, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cutscene, "_0x0546524ADE2E9723", mruby__CUTSCENE___0x0546524ADE2E9723, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_cutscene, "_0x708BDD8CD795B043", mruby__CUTSCENE___0x708BDD8CD795B043, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_interior, "GET_INTERIOR_GROUP_ID", mruby__INTERIOR__GET_INTERIOR_GROUP_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_interior, "GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS", mruby__INTERIOR__GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_interior, "IS_INTERIOR_SCENE", mruby__INTERIOR__IS_INTERIOR_SCENE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_interior, "IS_VALID_INTERIOR", mruby__INTERIOR__IS_VALID_INTERIOR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_interior, "CLEAR_ROOM_FOR_ENTITY", mruby__INTERIOR__CLEAR_ROOM_FOR_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_interior, "FORCE_ROOM_FOR_ENTITY", mruby__INTERIOR__FORCE_ROOM_FOR_ENTITY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_interior, "GET_ROOM_KEY_FROM_ENTITY", mruby__INTERIOR__GET_ROOM_KEY_FROM_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_interior, "GET_KEY_FOR_ENTITY_IN_ROOM", mruby__INTERIOR__GET_KEY_FOR_ENTITY_IN_ROOM, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_interior, "GET_INTERIOR_FROM_ENTITY", mruby__INTERIOR__GET_INTERIOR_FROM_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_interior, "_0x82EBB79E258FA2B7", mruby__INTERIOR___0x82EBB79E258FA2B7, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_interior, "_0x920D853F3E17F1DA", mruby__INTERIOR___0x920D853F3E17F1DA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_interior, "_0xAF348AFCB575A441", mruby__INTERIOR___0xAF348AFCB575A441, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_interior, "_0x405DC2AEF6AF95B9", mruby__INTERIOR___0x405DC2AEF6AF95B9, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_interior, "_GET_ROOM_KEY_FROM_GAMEPLAY_CAM", mruby__INTERIOR___GET_ROOM_KEY_FROM_GAMEPLAY_CAM, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_interior, "_0x23B59D8912F94246", mruby__INTERIOR___0x23B59D8912F94246, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_interior, "GET_INTERIOR_AT_COORDS", mruby__INTERIOR__GET_INTERIOR_AT_COORDS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_interior, "ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME", mruby__INTERIOR__ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_interior, "_0x2CA429C029CCF247", mruby__INTERIOR___0x2CA429C029CCF247, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_interior, "UNPIN_INTERIOR", mruby__INTERIOR__UNPIN_INTERIOR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_interior, "IS_INTERIOR_READY", mruby__INTERIOR__IS_INTERIOR_READY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_interior, "_0x4C2330E61D3DEB56", mruby__INTERIOR___0x4C2330E61D3DEB56, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_interior, "GET_INTERIOR_AT_COORDS_WITH_TYPE", mruby__INTERIOR__GET_INTERIOR_AT_COORDS_WITH_TYPE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_interior, "_0xF0F77ADB9F67E79D", mruby__INTERIOR___0xF0F77ADB9F67E79D, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_interior, "_ARE_COORDS_COLLIDING_WITH_EXTERIOR", mruby__INTERIOR___ARE_COORDS_COLLIDING_WITH_EXTERIOR, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_interior, "GET_INTERIOR_FROM_COLLISION", mruby__INTERIOR__GET_INTERIOR_FROM_COLLISION, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_interior, "_ENABLE_INTERIOR_PROP", mruby__INTERIOR___ENABLE_INTERIOR_PROP, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_interior, "_DISABLE_INTERIOR_PROP", mruby__INTERIOR___DISABLE_INTERIOR_PROP, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_interior, "_IS_INTERIOR_PROP_ENABLED", mruby__INTERIOR___IS_INTERIOR_PROP_ENABLED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_interior, "REFRESH_INTERIOR", mruby__INTERIOR__REFRESH_INTERIOR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_interior, "_HIDE_MAP_OBJECT_THIS_FRAME", mruby__INTERIOR___HIDE_MAP_OBJECT_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_interior, "DISABLE_INTERIOR", mruby__INTERIOR__DISABLE_INTERIOR, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_interior, "IS_INTERIOR_DISABLED", mruby__INTERIOR__IS_INTERIOR_DISABLED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_interior, "CAP_INTERIOR", mruby__INTERIOR__CAP_INTERIOR, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_interior, "IS_INTERIOR_CAPPED", mruby__INTERIOR__IS_INTERIOR_CAPPED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_interior, "_0x9E6542F0CE8E70A3", mruby__INTERIOR___0x9E6542F0CE8E70A3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "RENDER_SCRIPT_CAMS", mruby__CAM__RENDER_SCRIPT_CAMS, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_cam, "_0xC819F3CBB62BF692", mruby__CAM___0xC819F3CBB62BF692, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_cam, "CREATE_CAM", mruby__CAM__CREATE_CAM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "CREATE_CAM_WITH_PARAMS", mruby__CAM__CREATE_CAM_WITH_PARAMS, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_cam, "CREATE_CAMERA", mruby__CAM__CREATE_CAMERA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "CREATE_CAMERA_WITH_PARAMS", mruby__CAM__CREATE_CAMERA_WITH_PARAMS, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_cam, "DESTROY_CAM", mruby__CAM__DESTROY_CAM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "DESTROY_ALL_CAMS", mruby__CAM__DESTROY_ALL_CAMS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "DOES_CAM_EXIST", mruby__CAM__DOES_CAM_EXIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "SET_CAM_ACTIVE", mruby__CAM__SET_CAM_ACTIVE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "IS_CAM_ACTIVE", mruby__CAM__IS_CAM_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "IS_CAM_RENDERING", mruby__CAM__IS_CAM_RENDERING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "GET_RENDERING_CAM", mruby__CAM__GET_RENDERING_CAM, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "GET_CAM_COORD", mruby__CAM__GET_CAM_COORD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "GET_CAM_ROT", mruby__CAM__GET_CAM_ROT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "GET_CAM_FOV", mruby__CAM__GET_CAM_FOV, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "GET_CAM_NEAR_CLIP", mruby__CAM__GET_CAM_NEAR_CLIP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "GET_CAM_FAR_CLIP", mruby__CAM__GET_CAM_FAR_CLIP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "GET_CAM_FAR_DOF", mruby__CAM__GET_CAM_FAR_DOF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "SET_CAM_PARAMS", mruby__CAM__SET_CAM_PARAMS, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_cam, "SET_CAM_COORD", mruby__CAM__SET_CAM_COORD, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_cam, "SET_CAM_ROT", mruby__CAM__SET_CAM_ROT, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_cam, "SET_CAM_FOV", mruby__CAM__SET_CAM_FOV, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "SET_CAM_NEAR_CLIP", mruby__CAM__SET_CAM_NEAR_CLIP, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "SET_CAM_FAR_CLIP", mruby__CAM__SET_CAM_FAR_CLIP, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "SET_CAM_MOTION_BLUR_STRENGTH", mruby__CAM__SET_CAM_MOTION_BLUR_STRENGTH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "SET_CAM_NEAR_DOF", mruby__CAM__SET_CAM_NEAR_DOF, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "SET_CAM_FAR_DOF", mruby__CAM__SET_CAM_FAR_DOF, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "SET_CAM_DOF_STRENGTH", mruby__CAM__SET_CAM_DOF_STRENGTH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "SET_CAM_DOF_PLANES", mruby__CAM__SET_CAM_DOF_PLANES, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_cam, "SET_CAM_USE_SHALLOW_DOF_MODE", mruby__CAM__SET_CAM_USE_SHALLOW_DOF_MODE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "SET_USE_HI_DOF", mruby__CAM__SET_USE_HI_DOF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0xF55E4046F6F831DC", mruby__CAM___0xF55E4046F6F831DC, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0xE111A7C0D200CBC5", mruby__CAM___0xE111A7C0D200CBC5, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0x7DD234D6F3914C5B", mruby__CAM___0x7DD234D6F3914C5B, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0xC669EEA5D031B7DE", mruby__CAM___0xC669EEA5D031B7DE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0xC3654A441402562D", mruby__CAM___0xC3654A441402562D, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0x2C654B4943BDDF7C", mruby__CAM___0x2C654B4943BDDF7C, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "ATTACH_CAM_TO_ENTITY", mruby__CAM__ATTACH_CAM_TO_ENTITY, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_cam, "ATTACH_CAM_TO_PED_BONE", mruby__CAM__ATTACH_CAM_TO_PED_BONE, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_cam, "DETACH_CAM", mruby__CAM__DETACH_CAM, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "SET_CAM_INHERIT_ROLL_VEHICLE", mruby__CAM__SET_CAM_INHERIT_ROLL_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "POINT_CAM_AT_COORD", mruby__CAM__POINT_CAM_AT_COORD, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_cam, "POINT_CAM_AT_ENTITY", mruby__CAM__POINT_CAM_AT_ENTITY, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_cam, "POINT_CAM_AT_PED_BONE", mruby__CAM__POINT_CAM_AT_PED_BONE, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_cam, "STOP_CAM_POINTING", mruby__CAM__STOP_CAM_POINTING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "SET_CAM_AFFECTS_AIMING", mruby__CAM__SET_CAM_AFFECTS_AIMING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0x661B5C8654ADD825", mruby__CAM___0x661B5C8654ADD825, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0xA2767257A320FC82", mruby__CAM___0xA2767257A320FC82, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0x271017B9BA825366", mruby__CAM___0x271017B9BA825366, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "SET_CAM_DEBUG_NAME", mruby__CAM__SET_CAM_DEBUG_NAME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "ADD_CAM_SPLINE_NODE", mruby__CAM__ADD_CAM_SPLINE_NODE, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_cam, "_0x0A9F2A468B328E74", mruby__CAM___0x0A9F2A468B328E74, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_cam, "_0x0FB82563989CF4FB", mruby__CAM___0x0FB82563989CF4FB, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_cam, "_0x609278246A29CA34", mruby__CAM___0x609278246A29CA34, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_cam, "SET_CAM_SPLINE_PHASE", mruby__CAM__SET_CAM_SPLINE_PHASE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "GET_CAM_SPLINE_PHASE", mruby__CAM__GET_CAM_SPLINE_PHASE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "GET_CAM_SPLINE_NODE_PHASE", mruby__CAM__GET_CAM_SPLINE_NODE_PHASE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "SET_CAM_SPLINE_DURATION", mruby__CAM__SET_CAM_SPLINE_DURATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0xD1B0F412F109EA5D", mruby__CAM___0xD1B0F412F109EA5D, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "GET_CAM_SPLINE_NODE_INDEX", mruby__CAM__GET_CAM_SPLINE_NODE_INDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x83B8201ED82A9A2D", mruby__CAM___0x83B8201ED82A9A2D, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_cam, "_0xA6385DEB180F319F", mruby__CAM___0xA6385DEB180F319F, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_cam, "OVERRIDE_CAM_SPLINE_VELOCITY", mruby__CAM__OVERRIDE_CAM_SPLINE_VELOCITY, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_cam, "OVERRIDE_CAM_SPLINE_MOTION_BLUR", mruby__CAM__OVERRIDE_CAM_SPLINE_MOTION_BLUR, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_cam, "_0x7BF1A54AE67AC070", mruby__CAM___0x7BF1A54AE67AC070, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_cam, "IS_CAM_SPLINE_PAUSED", mruby__CAM__IS_CAM_SPLINE_PAUSED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "SET_CAM_ACTIVE_WITH_INTERP", mruby__CAM__SET_CAM_ACTIVE_WITH_INTERP, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_cam, "IS_CAM_INTERPOLATING", mruby__CAM__IS_CAM_INTERPOLATING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "SHAKE_CAM", mruby__CAM__SHAKE_CAM, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_cam, "ANIMATED_SHAKE_CAM", mruby__CAM__ANIMATED_SHAKE_CAM, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_cam, "IS_CAM_SHAKING", mruby__CAM__IS_CAM_SHAKING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "SET_CAM_SHAKE_AMPLITUDE", mruby__CAM__SET_CAM_SHAKE_AMPLITUDE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "STOP_CAM_SHAKING", mruby__CAM__STOP_CAM_SHAKING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0xF4C8CF9E353AFECA", mruby__CAM___0xF4C8CF9E353AFECA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0xC2EAE3FB8CDBED31", mruby__CAM___0xC2EAE3FB8CDBED31, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_cam, "_0xC912AF078AF19212", mruby__CAM___0xC912AF078AF19212, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x1C9D7949FA533490", mruby__CAM___0x1C9D7949FA533490, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "PLAY_CAM_ANIM", mruby__CAM__PLAY_CAM_ANIM, MRB_ARGS_REQ(11));
  mrb_define_method(mrb, module_cam, "SET_CAM_ANIM_CURRENT_PHASE", mruby__CAM__SET_CAM_ANIM_CURRENT_PHASE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "GET_CAM_ANIM_CURRENT_PHASE", mruby__CAM__GET_CAM_ANIM_CURRENT_PHASE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "PLAY_SYNCHRONIZED_CAM_ANIM", mruby__CAM__PLAY_SYNCHRONIZED_CAM_ANIM, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_cam, "_0x503F5920162365B2", mruby__CAM___0x503F5920162365B2, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_cam, "_0xF9D02130ECDD1D77", mruby__CAM___0xF9D02130ECDD1D77, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0xC91C6C55199308CA", mruby__CAM___0xC91C6C55199308CA, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_cam, "_0xC8B5C4A79CC18B94", mruby__CAM___0xC8B5C4A79CC18B94, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x5C48A1D6E3B33179", mruby__CAM___0x5C48A1D6E3B33179, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "IS_SCREEN_FADED_OUT", mruby__CAM__IS_SCREEN_FADED_OUT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "IS_SCREEN_FADED_IN", mruby__CAM__IS_SCREEN_FADED_IN, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "IS_SCREEN_FADING_OUT", mruby__CAM__IS_SCREEN_FADING_OUT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "IS_SCREEN_FADING_IN", mruby__CAM__IS_SCREEN_FADING_IN, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "DO_SCREEN_FADE_IN", mruby__CAM__DO_SCREEN_FADE_IN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "DO_SCREEN_FADE_OUT", mruby__CAM__DO_SCREEN_FADE_OUT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "SET_WIDESCREEN_BORDERS", mruby__CAM__SET_WIDESCREEN_BORDERS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "GET_GAMEPLAY_CAM_COORD", mruby__CAM__GET_GAMEPLAY_CAM_COORD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "GET_GAMEPLAY_CAM_ROT", mruby__CAM__GET_GAMEPLAY_CAM_ROT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "GET_GAMEPLAY_CAM_FOV", mruby__CAM__GET_GAMEPLAY_CAM_FOV, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x487A82C650EB7799", mruby__CAM___0x487A82C650EB7799, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x0225778816FDC28C", mruby__CAM___0x0225778816FDC28C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "GET_GAMEPLAY_CAM_RELATIVE_HEADING", mruby__CAM__GET_GAMEPLAY_CAM_RELATIVE_HEADING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "SET_GAMEPLAY_CAM_RELATIVE_HEADING", mruby__CAM__SET_GAMEPLAY_CAM_RELATIVE_HEADING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "GET_GAMEPLAY_CAM_RELATIVE_PITCH", mruby__CAM__GET_GAMEPLAY_CAM_RELATIVE_PITCH, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "SET_GAMEPLAY_CAM_RELATIVE_PITCH", mruby__CAM__SET_GAMEPLAY_CAM_RELATIVE_PITCH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_SET_GAMEPLAY_CAM_RAW_YAW", mruby__CAM___SET_GAMEPLAY_CAM_RAW_YAW, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_SET_GAMEPLAY_CAM_RAW_PITCH", mruby__CAM___SET_GAMEPLAY_CAM_RAW_PITCH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x469F2ECDEC046337", mruby__CAM___0x469F2ECDEC046337, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "SHAKE_GAMEPLAY_CAM", mruby__CAM__SHAKE_GAMEPLAY_CAM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "IS_GAMEPLAY_CAM_SHAKING", mruby__CAM__IS_GAMEPLAY_CAM_SHAKING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE", mruby__CAM__SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "STOP_GAMEPLAY_CAM_SHAKING", mruby__CAM__STOP_GAMEPLAY_CAM_SHAKING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x8BBACBF51DA047A8", mruby__CAM___0x8BBACBF51DA047A8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "IS_GAMEPLAY_CAM_RENDERING", mruby__CAM__IS_GAMEPLAY_CAM_RENDERING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x3044240D2E0FA842", mruby__CAM___0x3044240D2E0FA842, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x705A276EBFF3133D", mruby__CAM___0x705A276EBFF3133D, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0xDB90C6CCA48940F1", mruby__CAM___0xDB90C6CCA48940F1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_ENABLE_CROSSHAIR_THIS_FRAME", mruby__CAM___ENABLE_CROSSHAIR_THIS_FRAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "IS_GAMEPLAY_CAM_LOOKING_BEHIND", mruby__CAM__IS_GAMEPLAY_CAM_LOOKING_BEHIND, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x2AED6301F67007D5", mruby__CAM___0x2AED6301F67007D5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x49482F9FCD825AAA", mruby__CAM___0x49482F9FCD825AAA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0xFD3151CD37EA2245", mruby__CAM___0xFD3151CD37EA2245, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0xDD79DF9F4D26E1C9", mruby__CAM___0xDD79DF9F4D26E1C9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "IS_SPHERE_VISIBLE", mruby__CAM__IS_SPHERE_VISIBLE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_cam, "IS_FOLLOW_PED_CAM_ACTIVE", mruby__CAM__IS_FOLLOW_PED_CAM_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "SET_FOLLOW_PED_CAM_CUTSCENE_CHAT", mruby__CAM__SET_FOLLOW_PED_CAM_CUTSCENE_CHAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0x271401846BD26E92", mruby__CAM___0x271401846BD26E92, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0xC8391C309684595A", mruby__CAM___0xC8391C309684595A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_CLAMP_GAMEPLAY_CAM_YAW", mruby__CAM___CLAMP_GAMEPLAY_CAM_YAW, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_CLAMP_GAMEPLAY_CAM_PITCH", mruby__CAM___CLAMP_GAMEPLAY_CAM_PITCH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_ANIMATE_GAMEPLAY_CAM_ZOOM", mruby__CAM___ANIMATE_GAMEPLAY_CAM_ZOOM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0xE9EA16D6E54CDCA4", mruby__CAM___0xE9EA16D6E54CDCA4, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_DISABLE_FIRST_PERSON_CAM_THIS_FRAME", mruby__CAM___DISABLE_FIRST_PERSON_CAM_THIS_FRAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x59424BD75174C9B1", mruby__CAM___0x59424BD75174C9B1, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "GET_FOLLOW_PED_CAM_ZOOM_LEVEL", mruby__CAM__GET_FOLLOW_PED_CAM_ZOOM_LEVEL, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "GET_FOLLOW_PED_CAM_VIEW_MODE", mruby__CAM__GET_FOLLOW_PED_CAM_VIEW_MODE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "SET_FOLLOW_PED_CAM_VIEW_MODE", mruby__CAM__SET_FOLLOW_PED_CAM_VIEW_MODE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "IS_FOLLOW_VEHICLE_CAM_ACTIVE", mruby__CAM__IS_FOLLOW_VEHICLE_CAM_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x91EF6EE6419E5B97", mruby__CAM___0x91EF6EE6419E5B97, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x9DFE13ECDC1EC196", mruby__CAM___0x9DFE13ECDC1EC196, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL", mruby__CAM__GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL", mruby__CAM__SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "GET_FOLLOW_VEHICLE_CAM_VIEW_MODE", mruby__CAM__GET_FOLLOW_VEHICLE_CAM_VIEW_MODE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "SET_FOLLOW_VEHICLE_CAM_VIEW_MODE", mruby__CAM__SET_FOLLOW_VEHICLE_CAM_VIEW_MODE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0xEE778F8C7E1142E2", mruby__CAM___0xEE778F8C7E1142E2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x2A2173E46DAECD12", mruby__CAM___0x2A2173E46DAECD12, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0x19CAFA3C87F7C2FF", mruby__CAM___0x19CAFA3C87F7C2FF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "IS_AIM_CAM_ACTIVE", mruby__CAM__IS_AIM_CAM_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x74BD83EA840F6BC9", mruby__CAM___0x74BD83EA840F6BC9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "IS_FIRST_PERSON_AIM_CAM_ACTIVE", mruby__CAM__IS_FIRST_PERSON_AIM_CAM_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x1A31FE0049E542F6", mruby__CAM___0x1A31FE0049E542F6, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_GET_GAMEPLAY_CAM_ZOOM", mruby__CAM___GET_GAMEPLAY_CAM_ZOOM, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x70894BD0915C5BCA", mruby__CAM___0x70894BD0915C5BCA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0xCED08CBE8EBB97C7", mruby__CAM___0xCED08CBE8EBB97C7, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0x2F7F2B26DD3F18EE", mruby__CAM___0x2F7F2B26DD3F18EE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0xBCFC632DB7673BF0", mruby__CAM___0xBCFC632DB7673BF0, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0x0AF7B437918103B3", mruby__CAM___0x0AF7B437918103B3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x42156508606DE65E", mruby__CAM___0x42156508606DE65E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x4008EDF7D6E48175", mruby__CAM___0x4008EDF7D6E48175, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_GET_GAMEPLAY_CAM_COORDS", mruby__CAM___GET_GAMEPLAY_CAM_COORDS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_GET_GAMEPLAY_CAM_ROT", mruby__CAM___GET_GAMEPLAY_CAM_ROT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x26903D9CD1175F2C", mruby__CAM___0x26903D9CD1175F2C, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "_0x80EC114669DAEFF4", mruby__CAM___0x80EC114669DAEFF4, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x5F35F6732C3FBBA0", mruby__CAM___0x5F35F6732C3FBBA0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0xD0082607100D7193", mruby__CAM___0xD0082607100D7193, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0xDFC8CBC606FDB0FC", mruby__CAM___0xDFC8CBC606FDB0FC, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0xA03502FC581F7D9B", mruby__CAM___0xA03502FC581F7D9B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x9780F32BCAF72431", mruby__CAM___0x9780F32BCAF72431, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x162F9D995753DC19", mruby__CAM___0x162F9D995753DC19, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "SET_GAMEPLAY_COORD_HINT", mruby__CAM__SET_GAMEPLAY_COORD_HINT, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_cam, "SET_GAMEPLAY_PED_HINT", mruby__CAM__SET_GAMEPLAY_PED_HINT, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_cam, "SET_GAMEPLAY_VEHICLE_HINT", mruby__CAM__SET_GAMEPLAY_VEHICLE_HINT, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_cam, "SET_GAMEPLAY_OBJECT_HINT", mruby__CAM__SET_GAMEPLAY_OBJECT_HINT, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_cam, "SET_GAMEPLAY_ENTITY_HINT", mruby__CAM__SET_GAMEPLAY_ENTITY_HINT, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_cam, "IS_GAMEPLAY_HINT_ACTIVE", mruby__CAM__IS_GAMEPLAY_HINT_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "STOP_GAMEPLAY_HINT", mruby__CAM__STOP_GAMEPLAY_HINT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0xCCD078C2665D2973", mruby__CAM___0xCCD078C2665D2973, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x247ACBC4ABBC9D1C", mruby__CAM___0x247ACBC4ABBC9D1C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0xBF72910D0F26F025", mruby__CAM___0xBF72910D0F26F025, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "SET_GAMEPLAY_HINT_FOV", mruby__CAM__SET_GAMEPLAY_HINT_FOV, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0xF8BDBF3D573049A1", mruby__CAM___0xF8BDBF3D573049A1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0xD1F8363DFAD03848", mruby__CAM___0xD1F8363DFAD03848, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x5D7B620DAE436138", mruby__CAM___0x5D7B620DAE436138, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0xC92717EF615B6704", mruby__CAM___0xC92717EF615B6704, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "GET_IS_MULTIPLAYER_BRIEF", mruby__CAM__GET_IS_MULTIPLAYER_BRIEF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "SET_CINEMATIC_BUTTON_ACTIVE", mruby__CAM__SET_CINEMATIC_BUTTON_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "IS_CINEMATIC_CAM_RENDERING", mruby__CAM__IS_CINEMATIC_CAM_RENDERING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "SHAKE_CINEMATIC_CAM", mruby__CAM__SHAKE_CINEMATIC_CAM, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_cam, "IS_CINEMATIC_CAM_SHAKING", mruby__CAM__IS_CINEMATIC_CAM_SHAKING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "SET_CINEMATIC_CAM_SHAKE_AMPLITUDE", mruby__CAM__SET_CINEMATIC_CAM_SHAKE_AMPLITUDE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "STOP_CINEMATIC_CAM_SHAKING", mruby__CAM__STOP_CINEMATIC_CAM_SHAKING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_DISABLE_VEHICLE_FIRST_PERSON_CAM_THIS_FRAME", mruby__CAM___DISABLE_VEHICLE_FIRST_PERSON_CAM_THIS_FRAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x62ECFCFDEE7885D6", mruby__CAM___0x62ECFCFDEE7885D6, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x9E4CFFF989258472", mruby__CAM___0x9E4CFFF989258472, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0xF4F2C0D4EE209E20", mruby__CAM___0xF4F2C0D4EE209E20, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0xCA9D2AA3E326D720", mruby__CAM___0xCA9D2AA3E326D720, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x4F32C0D5A90A9B40", mruby__CAM___0x4F32C0D5A90A9B40, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "CREATE_CINEMATIC_SHOT", mruby__CAM__CREATE_CINEMATIC_SHOT, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_cam, "IS_CINEMATIC_SHOT_ACTIVE", mruby__CAM__IS_CINEMATIC_SHOT_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "STOP_CINEMATIC_SHOT", mruby__CAM__STOP_CINEMATIC_SHOT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0xA41BCD7213805AAC", mruby__CAM___0xA41BCD7213805AAC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0xDC9DA9E8789F5246", mruby__CAM___0xDC9DA9E8789F5246, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "SET_CINEMATIC_MODE_ACTIVE", mruby__CAM__SET_CINEMATIC_MODE_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x1F2300CB7FA7B7F6", mruby__CAM___0x1F2300CB7FA7B7F6, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x17FCA7199A530203", mruby__CAM___0x17FCA7199A530203, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "STOP_CUTSCENE_CAM_SHAKING", mruby__CAM__STOP_CUTSCENE_CAM_SHAKING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x12DED8CA53D47EA5", mruby__CAM___0x12DED8CA53D47EA5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x89215EC747DF244A", mruby__CAM___0x89215EC747DF244A, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_cam, "_0x5A43C76F7FC7BA5F", mruby__CAM___0x5A43C76F7FC7BA5F, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_SET_CAM_EFFECT", mruby__CAM___SET_CAM_EFFECT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x5C41E6BABC9E2112", mruby__CAM___0x5C41E6BABC9E2112, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x21E253A7F8DA5DFB", mruby__CAM___0x21E253A7F8DA5DFB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0x11FA5D3479C7DD47", mruby__CAM___0x11FA5D3479C7DD47, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_cam, "_0xEAF0FA793D05C592", mruby__CAM___0xEAF0FA793D05C592, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_cam, "_0x8BFCEB5EA1B161B6", mruby__CAM___0x8BFCEB5EA1B161B6, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_weapon, "ENABLE_LASER_SIGHT_RENDERING", mruby__WEAPON__ENABLE_LASER_SIGHT_RENDERING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "GET_WEAPON_COMPONENT_TYPE_MODEL", mruby__WEAPON__GET_WEAPON_COMPONENT_TYPE_MODEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "GET_WEAPONTYPE_MODEL", mruby__WEAPON__GET_WEAPONTYPE_MODEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "GET_WEAPONTYPE_SLOT", mruby__WEAPON__GET_WEAPONTYPE_SLOT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "GET_WEAPONTYPE_GROUP", mruby__WEAPON__GET_WEAPONTYPE_GROUP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "SET_CURRENT_PED_WEAPON", mruby__WEAPON__SET_CURRENT_PED_WEAPON, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "GET_CURRENT_PED_WEAPON_ENTITY_INDEX", mruby__WEAPON__GET_CURRENT_PED_WEAPON_ENTITY_INDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "GET_BEST_PED_WEAPON", mruby__WEAPON__GET_BEST_PED_WEAPON, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "SET_CURRENT_PED_VEHICLE_WEAPON", mruby__WEAPON__SET_CURRENT_PED_VEHICLE_WEAPON, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "IS_PED_ARMED", mruby__WEAPON__IS_PED_ARMED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "IS_WEAPON_VALID", mruby__WEAPON__IS_WEAPON_VALID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "HAS_PED_GOT_WEAPON", mruby__WEAPON__HAS_PED_GOT_WEAPON, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "IS_PED_WEAPON_READY_TO_SHOOT", mruby__WEAPON__IS_PED_WEAPON_READY_TO_SHOOT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "GET_PED_WEAPONTYPE_IN_SLOT", mruby__WEAPON__GET_PED_WEAPONTYPE_IN_SLOT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "GET_AMMO_IN_PED_WEAPON", mruby__WEAPON__GET_AMMO_IN_PED_WEAPON, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "ADD_AMMO_TO_PED", mruby__WEAPON__ADD_AMMO_TO_PED, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "SET_PED_AMMO", mruby__WEAPON__SET_PED_AMMO, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "SET_PED_INFINITE_AMMO", mruby__WEAPON__SET_PED_INFINITE_AMMO, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "SET_PED_INFINITE_AMMO_CLIP", mruby__WEAPON__SET_PED_INFINITE_AMMO_CLIP, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "GIVE_WEAPON_TO_PED", mruby__WEAPON__GIVE_WEAPON_TO_PED, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_weapon, "GIVE_DELAYED_WEAPON_TO_PED", mruby__WEAPON__GIVE_DELAYED_WEAPON_TO_PED, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_weapon, "REMOVE_ALL_PED_WEAPONS", mruby__WEAPON__REMOVE_ALL_PED_WEAPONS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "REMOVE_WEAPON_FROM_PED", mruby__WEAPON__REMOVE_WEAPON_FROM_PED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE", mruby__WEAPON__HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "SET_PED_CURRENT_WEAPON_VISIBLE", mruby__WEAPON__SET_PED_CURRENT_WEAPON_VISIBLE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_weapon, "SET_PED_DROPS_WEAPONS_WHEN_DEAD", mruby__WEAPON__SET_PED_DROPS_WEAPONS_WHEN_DEAD, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "HAS_PED_BEEN_DAMAGED_BY_WEAPON", mruby__WEAPON__HAS_PED_BEEN_DAMAGED_BY_WEAPON, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "CLEAR_PED_LAST_WEAPON_DAMAGE", mruby__WEAPON__CLEAR_PED_LAST_WEAPON_DAMAGE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON", mruby__WEAPON__HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "CLEAR_ENTITY_LAST_WEAPON_DAMAGE", mruby__WEAPON__CLEAR_ENTITY_LAST_WEAPON_DAMAGE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "SET_PED_DROPS_WEAPON", mruby__WEAPON__SET_PED_DROPS_WEAPON, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "SET_PED_DROPS_INVENTORY_WEAPON", mruby__WEAPON__SET_PED_DROPS_INVENTORY_WEAPON, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_weapon, "GET_MAX_AMMO_IN_CLIP", mruby__WEAPON__GET_MAX_AMMO_IN_CLIP, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "SET_AMMO_IN_CLIP", mruby__WEAPON__SET_AMMO_IN_CLIP, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "SET_PED_AMMO_BY_TYPE", mruby__WEAPON__SET_PED_AMMO_BY_TYPE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "GET_PED_AMMO_BY_TYPE", mruby__WEAPON__GET_PED_AMMO_BY_TYPE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "SET_PED_AMMO_TO_DROP", mruby__WEAPON__SET_PED_AMMO_TO_DROP, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "_0xE620FD3512A04F18", mruby__WEAPON___0xE620FD3512A04F18, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "_GET_PED_AMMO_TYPE", mruby__WEAPON___GET_PED_AMMO_TYPE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "SET_PED_GADGET", mruby__WEAPON__SET_PED_GADGET, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "GET_IS_PED_GADGET_EQUIPPED", mruby__WEAPON__GET_IS_PED_GADGET_EQUIPPED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "GET_SELECTED_PED_WEAPON", mruby__WEAPON__GET_SELECTED_PED_WEAPON, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "EXPLODE_PROJECTILES", mruby__WEAPON__EXPLODE_PROJECTILES, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "REMOVE_ALL_PROJECTILES_OF_TYPE", mruby__WEAPON__REMOVE_ALL_PROJECTILES_OF_TYPE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "_0x840F03E9041E2C9C", mruby__WEAPON___0x840F03E9041E2C9C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "GET_MAX_RANGE_OF_CURRENT_PED_WEAPON", mruby__WEAPON__GET_MAX_RANGE_OF_CURRENT_PED_WEAPON, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "HAS_VEHICLE_GOT_PROJECTILE_ATTACHED", mruby__WEAPON__HAS_VEHICLE_GOT_PROJECTILE_ATTACHED, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_weapon, "GIVE_WEAPON_COMPONENT_TO_PED", mruby__WEAPON__GIVE_WEAPON_COMPONENT_TO_PED, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "REMOVE_WEAPON_COMPONENT_FROM_PED", mruby__WEAPON__REMOVE_WEAPON_COMPONENT_FROM_PED, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "HAS_PED_GOT_WEAPON_COMPONENT", mruby__WEAPON__HAS_PED_GOT_WEAPON_COMPONENT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "IS_PED_WEAPON_COMPONENT_ACTIVE", mruby__WEAPON__IS_PED_WEAPON_COMPONENT_ACTIVE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "_IS_PED_RELOADING", mruby__WEAPON___IS_PED_RELOADING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "MAKE_PED_RELOAD", mruby__WEAPON__MAKE_PED_RELOAD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "REQUEST_WEAPON_ASSET", mruby__WEAPON__REQUEST_WEAPON_ASSET, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "HAS_WEAPON_ASSET_LOADED", mruby__WEAPON__HAS_WEAPON_ASSET_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "REMOVE_WEAPON_ASSET", mruby__WEAPON__REMOVE_WEAPON_ASSET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "CREATE_WEAPON_OBJECT", mruby__WEAPON__CREATE_WEAPON_OBJECT, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_weapon, "GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT", mruby__WEAPON__GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT", mruby__WEAPON__REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "HAS_WEAPON_GOT_WEAPON_COMPONENT", mruby__WEAPON__HAS_WEAPON_GOT_WEAPON_COMPONENT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "GIVE_WEAPON_OBJECT_TO_PED", mruby__WEAPON__GIVE_WEAPON_OBJECT_TO_PED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "DOES_WEAPON_TAKE_WEAPON_COMPONENT", mruby__WEAPON__DOES_WEAPON_TAKE_WEAPON_COMPONENT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "GET_WEAPON_OBJECT_FROM_PED", mruby__WEAPON__GET_WEAPON_OBJECT_FROM_PED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "SET_PED_WEAPON_TINT_INDEX", mruby__WEAPON__SET_PED_WEAPON_TINT_INDEX, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "GET_PED_WEAPON_TINT_INDEX", mruby__WEAPON__GET_PED_WEAPON_TINT_INDEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "SET_WEAPON_OBJECT_TINT_INDEX", mruby__WEAPON__SET_WEAPON_OBJECT_TINT_INDEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "GET_WEAPON_OBJECT_TINT_INDEX", mruby__WEAPON__GET_WEAPON_OBJECT_TINT_INDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "GET_WEAPON_TINT_COUNT", mruby__WEAPON__GET_WEAPON_TINT_COUNT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "_0x3133B907D8B32053", mruby__WEAPON___0x3133B907D8B32053, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "GET_WEAPON_CLIP_SIZE", mruby__WEAPON__GET_WEAPON_CLIP_SIZE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "SET_PED_CHANCE_OF_FIRING_BLANKS", mruby__WEAPON__SET_PED_CHANCE_OF_FIRING_BLANKS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_weapon, "_0xB4C8D77C80C0421E", mruby__WEAPON___0xB4C8D77C80C0421E, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "REQUEST_WEAPON_HIGH_DETAIL_MODEL", mruby__WEAPON__REQUEST_WEAPON_HIGH_DETAIL_MODEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "IS_PED_CURRENT_WEAPON_SILENCED", mruby__WEAPON__IS_PED_CURRENT_WEAPON_SILENCED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "SET_WEAPON_SMOKEGRENADE_ASSIGNED", mruby__WEAPON__SET_WEAPON_SMOKEGRENADE_ASSIGNED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "SET_FLASH_LIGHT_FADE_DISTANCE", mruby__WEAPON__SET_FLASH_LIGHT_FADE_DISTANCE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "SET_WEAPON_ANIMATION_OVERRIDE", mruby__WEAPON__SET_WEAPON_ANIMATION_OVERRIDE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_weapon, "GET_WEAPON_DAMAGE_TYPE", mruby__WEAPON__GET_WEAPON_DAMAGE_TYPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "_0xE4DCEC7FD5B739A5", mruby__WEAPON___0xE4DCEC7FD5B739A5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_weapon, "CAN_USE_WEAPON_ON_PARACHUTE", mruby__WEAPON__CAN_USE_WEAPON_ON_PARACHUTE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_itemset, "CREATE_ITEMSET", mruby__ITEMSET__CREATE_ITEMSET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_itemset, "DESTROY_ITEMSET", mruby__ITEMSET__DESTROY_ITEMSET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_itemset, "IS_ITEMSET_VALID", mruby__ITEMSET__IS_ITEMSET_VALID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_itemset, "ADD_TO_ITEMSET", mruby__ITEMSET__ADD_TO_ITEMSET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_itemset, "REMOVE_FROM_ITEMSET", mruby__ITEMSET__REMOVE_FROM_ITEMSET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_itemset, "GET_ITEMSET_SIZE", mruby__ITEMSET__GET_ITEMSET_SIZE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_itemset, "GET_INDEXED_ITEM_IN_ITEMSET", mruby__ITEMSET__GET_INDEXED_ITEM_IN_ITEMSET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_itemset, "IS_IN_ITEMSET", mruby__ITEMSET__IS_IN_ITEMSET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_itemset, "CLEAN_ITEMSET", mruby__ITEMSET__CLEAN_ITEMSET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "LOAD_ALL_OBJECTS_NOW", mruby__STREAMING__LOAD_ALL_OBJECTS_NOW, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "LOAD_SCENE", mruby__STREAMING__LOAD_SCENE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_streaming, "NETWORK_UPDATE_LOAD_SCENE", mruby__STREAMING__NETWORK_UPDATE_LOAD_SCENE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "NETWORK_STOP_LOAD_SCENE", mruby__STREAMING__NETWORK_STOP_LOAD_SCENE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "IS_NETWORK_LOADING_SCENE", mruby__STREAMING__IS_NETWORK_LOADING_SCENE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "SET_INTERIOR_ACTIVE", mruby__STREAMING__SET_INTERIOR_ACTIVE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_streaming, "REQUEST_MODEL", mruby__STREAMING__REQUEST_MODEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_REQUEST_MODEL_2", mruby__STREAMING___REQUEST_MODEL_2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "HAS_MODEL_LOADED", mruby__STREAMING__HAS_MODEL_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_0x8A7A40100EDFEC58", mruby__STREAMING___0x8A7A40100EDFEC58, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_streaming, "SET_MODEL_AS_NO_LONGER_NEEDED", mruby__STREAMING__SET_MODEL_AS_NO_LONGER_NEEDED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "IS_MODEL_IN_CDIMAGE", mruby__STREAMING__IS_MODEL_IN_CDIMAGE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "IS_MODEL_VALID", mruby__STREAMING__IS_MODEL_VALID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "IS_MODEL_A_VEHICLE", mruby__STREAMING__IS_MODEL_A_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "REQUEST_COLLISION_AT_COORD", mruby__STREAMING__REQUEST_COLLISION_AT_COORD, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_streaming, "REQUEST_COLLISION_FOR_MODEL", mruby__STREAMING__REQUEST_COLLISION_FOR_MODEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "HAS_COLLISION_FOR_MODEL_LOADED", mruby__STREAMING__HAS_COLLISION_FOR_MODEL_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "REQUEST_ADDITIONAL_COLLISION_AT_COORD", mruby__STREAMING__REQUEST_ADDITIONAL_COLLISION_AT_COORD, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_streaming, "DOES_ANIM_DICT_EXIST", mruby__STREAMING__DOES_ANIM_DICT_EXIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "REQUEST_ANIM_DICT", mruby__STREAMING__REQUEST_ANIM_DICT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "HAS_ANIM_DICT_LOADED", mruby__STREAMING__HAS_ANIM_DICT_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "REMOVE_ANIM_DICT", mruby__STREAMING__REMOVE_ANIM_DICT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "REQUEST_ANIM_SET", mruby__STREAMING__REQUEST_ANIM_SET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "HAS_ANIM_SET_LOADED", mruby__STREAMING__HAS_ANIM_SET_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "REMOVE_ANIM_SET", mruby__STREAMING__REMOVE_ANIM_SET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "REQUEST_CLIP_SET", mruby__STREAMING__REQUEST_CLIP_SET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "HAS_CLIP_SET_LOADED", mruby__STREAMING__HAS_CLIP_SET_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "REMOVE_CLIP_SET", mruby__STREAMING__REMOVE_CLIP_SET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "REQUEST_IPL", mruby__STREAMING__REQUEST_IPL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "REMOVE_IPL", mruby__STREAMING__REMOVE_IPL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "IS_IPL_ACTIVE", mruby__STREAMING__IS_IPL_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "SET_STREAMING", mruby__STREAMING__SET_STREAMING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "SET_GAME_PAUSES_FOR_STREAMING", mruby__STREAMING__SET_GAME_PAUSES_FOR_STREAMING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "SET_REDUCE_PED_MODEL_BUDGET", mruby__STREAMING__SET_REDUCE_PED_MODEL_BUDGET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "SET_REDUCE_VEHICLE_MODEL_BUDGET", mruby__STREAMING__SET_REDUCE_VEHICLE_MODEL_BUDGET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "SET_DITCH_POLICE_MODELS", mruby__STREAMING__SET_DITCH_POLICE_MODELS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "GET_NUMBER_OF_STREAMING_REQUESTS", mruby__STREAMING__GET_NUMBER_OF_STREAMING_REQUESTS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "REQUEST_PTFX_ASSET", mruby__STREAMING__REQUEST_PTFX_ASSET, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "HAS_PTFX_ASSET_LOADED", mruby__STREAMING__HAS_PTFX_ASSET_LOADED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "REMOVE_PTFX_ASSET", mruby__STREAMING__REMOVE_PTFX_ASSET, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "REQUEST_NAMED_PTFX_ASSET", mruby__STREAMING__REQUEST_NAMED_PTFX_ASSET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "HAS_NAMED_PTFX_ASSET_LOADED", mruby__STREAMING__HAS_NAMED_PTFX_ASSET_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_REMOVE_NAMED_PTFX_ASSET", mruby__STREAMING___REMOVE_NAMED_PTFX_ASSET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "SET_VEHICLE_POPULATION_BUDGET", mruby__STREAMING__SET_VEHICLE_POPULATION_BUDGET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "SET_PED_POPULATION_BUDGET", mruby__STREAMING__SET_PED_POPULATION_BUDGET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "CLEAR_FOCUS", mruby__STREAMING__CLEAR_FOCUS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_SET_FOCUS_AREA", mruby__STREAMING___SET_FOCUS_AREA, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_streaming, "SET_FOCUS_ENTITY", mruby__STREAMING__SET_FOCUS_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "IS_ENTITY_FOCUS", mruby__STREAMING__IS_ENTITY_FOCUS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_0x0811381EF5062FEC", mruby__STREAMING___0x0811381EF5062FEC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_0xAF12610C644A35C9", mruby__STREAMING___0xAF12610C644A35C9, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_streaming, "_0x4E52E752C76E7E7A", mruby__STREAMING___0x4E52E752C76E7E7A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_0x219C7B8D53E429FD", mruby__STREAMING___0x219C7B8D53E429FD, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_streaming, "_0x1F3F018BC3AFA77C", mruby__STREAMING___0x1F3F018BC3AFA77C, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_streaming, "_0x0AD9710CEE2F590F", mruby__STREAMING___0x0AD9710CEE2F590F, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_streaming, "_0x1EE7D8DF4425F053", mruby__STREAMING___0x1EE7D8DF4425F053, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_0x7D41E9D2D17C5B2D", mruby__STREAMING___0x7D41E9D2D17C5B2D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_0x07C313F94746702C", mruby__STREAMING___0x07C313F94746702C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_0xBC9823AB80A3DCAC", mruby__STREAMING___0xBC9823AB80A3DCAC, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "NEW_LOAD_SCENE_START", mruby__STREAMING__NEW_LOAD_SCENE_START, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_streaming, "_0xACCFB4ACF53551B0", mruby__STREAMING___0xACCFB4ACF53551B0, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_streaming, "NEW_LOAD_SCENE_STOP", mruby__STREAMING__NEW_LOAD_SCENE_STOP, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "IS_NEW_LOAD_SCENE_ACTIVE", mruby__STREAMING__IS_NEW_LOAD_SCENE_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "IS_NEW_LOAD_SCENE_LOADED", mruby__STREAMING__IS_NEW_LOAD_SCENE_LOADED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0x71E7B2E657449AAD", mruby__STREAMING___0x71E7B2E657449AAD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "START_PLAYER_SWITCH", mruby__STREAMING__START_PLAYER_SWITCH, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_streaming, "STOP_PLAYER_SWITCH", mruby__STREAMING__STOP_PLAYER_SWITCH, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "IS_PLAYER_SWITCH_IN_PROGRESS", mruby__STREAMING__IS_PLAYER_SWITCH_IN_PROGRESS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "GET_PLAYER_SWITCH_TYPE", mruby__STREAMING__GET_PLAYER_SWITCH_TYPE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "GET_IDEAL_PLAYER_SWITCH_TYPE", mruby__STREAMING__GET_IDEAL_PLAYER_SWITCH_TYPE, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_streaming, "GET_PLAYER_SWITCH_STATE", mruby__STREAMING__GET_PLAYER_SWITCH_STATE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "GET_PLAYER_SHORT_SWITCH_STATE", mruby__STREAMING__GET_PLAYER_SHORT_SWITCH_STATE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0x5F2013F8BC24EE69", mruby__STREAMING___0x5F2013F8BC24EE69, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_0x78C0D93253149435", mruby__STREAMING___0x78C0D93253149435, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0xC208B673CE446B61", mruby__STREAMING___0xC208B673CE446B61, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_streaming, "_0x0FDE9DBFC0A6BC65", mruby__STREAMING___0x0FDE9DBFC0A6BC65, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_0x43D1680C6D19A8E9", mruby__STREAMING___0x43D1680C6D19A8E9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0x74DE2E8739086740", mruby__STREAMING___0x74DE2E8739086740, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0x8E2A065ABDAE6994", mruby__STREAMING___0x8E2A065ABDAE6994, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0xAD5FDF34B81BFE79", mruby__STREAMING___0xAD5FDF34B81BFE79, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0xDFA80CB25D0A19B3", mruby__STREAMING___0xDFA80CB25D0A19B3, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0xD4793DFF3AF2ABCD", mruby__STREAMING___0xD4793DFF3AF2ABCD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0xBD605B8E0E18B3BB", mruby__STREAMING___0xBD605B8E0E18B3BB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0xAAB3200ED59016BC", mruby__STREAMING___0xAAB3200ED59016BC, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_streaming, "_0xD8295AF639FD9CB8", mruby__STREAMING___0xD8295AF639FD9CB8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_0x933BBEEB8C61B5F4", mruby__STREAMING___0x933BBEEB8C61B5F4, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "SET_PLAYER_INVERTED_UP", mruby__STREAMING__SET_PLAYER_INVERTED_UP, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0x5B48A06DD0E792A5", mruby__STREAMING___0x5B48A06DD0E792A5, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "DESTROY_PLAYER_IN_PAUSE_MENU", mruby__STREAMING__DESTROY_PLAYER_IN_PAUSE_MENU, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0x1E9057A74FD73E23", mruby__STREAMING___0x1E9057A74FD73E23, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0x0C15B0E443B2349D", mruby__STREAMING___0x0C15B0E443B2349D, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0xA76359FC80B2438E", mruby__STREAMING___0xA76359FC80B2438E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_0xBED8CA5FF5E04113", mruby__STREAMING___0xBED8CA5FF5E04113, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_streaming, "_0x472397322E92A856", mruby__STREAMING___0x472397322E92A856, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0x40AEFD1A244741F2", mruby__STREAMING___0x40AEFD1A244741F2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_0x03F1A106BDA7DD3E", mruby__STREAMING___0x03F1A106BDA7DD3E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0x63EB2B972A218CAC", mruby__STREAMING___0x63EB2B972A218CAC, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0xFB199266061F820A", mruby__STREAMING___0xFB199266061F820A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0xF4A0DADB70F57FA6", mruby__STREAMING___0xF4A0DADB70F57FA6, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0x5068F488DDB54DD8", mruby__STREAMING___0x5068F488DDB54DD8, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "PREFETCH_SRL", mruby__STREAMING__PREFETCH_SRL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "IS_SRL_LOADED", mruby__STREAMING__IS_SRL_LOADED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "BEGIN_SRL", mruby__STREAMING__BEGIN_SRL, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "END_SRL", mruby__STREAMING__END_SRL, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "SET_SRL_TIME", mruby__STREAMING__SET_SRL_TIME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_0xEF39EE20C537E98C", mruby__STREAMING___0xEF39EE20C537E98C, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_streaming, "_0xBEB2D9A1D9A8F55A", mruby__STREAMING___0xBEB2D9A1D9A8F55A, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_streaming, "_0x20C6C7E4EB082A7F", mruby__STREAMING___0x20C6C7E4EB082A7F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_0xF8155A7F03DDFC8E", mruby__STREAMING___0xF8155A7F03DDFC8E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "SET_HD_AREA", mruby__STREAMING__SET_HD_AREA, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_streaming, "CLEAR_HD_AREA", mruby__STREAMING__CLEAR_HD_AREA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0xB5A4DB34FE89B88A", mruby__STREAMING___0xB5A4DB34FE89B88A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0xCCE26000E9A6FAD7", mruby__STREAMING___0xCCE26000E9A6FAD7, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_streaming, "_0x0BC3144DEB678666", mruby__STREAMING___0x0BC3144DEB678666, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_0xF086AD9354FAC3A3", mruby__STREAMING___0xF086AD9354FAC3A3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_streaming, "_0x3D3D8B3BE5A83D35", mruby__STREAMING___0x3D3D8B3BE5A83D35, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_script, "REQUEST_SCRIPT", mruby__SCRIPT__REQUEST_SCRIPT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_script, "SET_SCRIPT_AS_NO_LONGER_NEEDED", mruby__SCRIPT__SET_SCRIPT_AS_NO_LONGER_NEEDED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_script, "HAS_SCRIPT_LOADED", mruby__SCRIPT__HAS_SCRIPT_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_script, "DOES_SCRIPT_EXIST", mruby__SCRIPT__DOES_SCRIPT_EXIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_script, "_REQUEST_STREAMED_SCRIPT", mruby__SCRIPT___REQUEST_STREAMED_SCRIPT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_script, "_SET_STREAMED_SCRIPT_AS_NO_LONGER_NEEDED", mruby__SCRIPT___SET_STREAMED_SCRIPT_AS_NO_LONGER_NEEDED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_script, "_HAS_STREAMED_SCRIPT_LOADED", mruby__SCRIPT___HAS_STREAMED_SCRIPT_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_script, "_0xF86AA3C56BA31381", mruby__SCRIPT___0xF86AA3C56BA31381, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_script, "TERMINATE_THREAD", mruby__SCRIPT__TERMINATE_THREAD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_script, "IS_THREAD_ACTIVE", mruby__SCRIPT__IS_THREAD_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_script, "_GET_THREAD_NAME", mruby__SCRIPT___GET_THREAD_NAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_script, "_0xDADFADA5A20143A8", mruby__SCRIPT___0xDADFADA5A20143A8, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_script, "_0x30B4FA1C82DD4B9F", mruby__SCRIPT___0x30B4FA1C82DD4B9F, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_script, "GET_ID_OF_THIS_THREAD", mruby__SCRIPT__GET_ID_OF_THIS_THREAD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_script, "TERMINATE_THIS_THREAD", mruby__SCRIPT__TERMINATE_THIS_THREAD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_script, "_GET_NUMBER_OF_INSTANCES_OF_STREAMED_SCRIPT", mruby__SCRIPT___GET_NUMBER_OF_INSTANCES_OF_STREAMED_SCRIPT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_script, "GET_THIS_SCRIPT_NAME", mruby__SCRIPT__GET_THIS_SCRIPT_NAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_script, "_GET_THIS_SCRIPT_HASH", mruby__SCRIPT___GET_THIS_SCRIPT_HASH, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_script, "GET_NUMBER_OF_EVENTS", mruby__SCRIPT__GET_NUMBER_OF_EVENTS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_script, "GET_EVENT_EXISTS", mruby__SCRIPT__GET_EVENT_EXISTS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_script, "GET_EVENT_AT_INDEX", mruby__SCRIPT__GET_EVENT_AT_INDEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_script, "SHUTDOWN_LOADING_SCREEN", mruby__SCRIPT__SHUTDOWN_LOADING_SCREEN, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_script, "SET_NO_LOADING_SCREEN", mruby__SCRIPT__SET_NO_LOADING_SCREEN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_script, "_GET_NO_LOADING_SCREEN", mruby__SCRIPT___GET_NO_LOADING_SCREEN, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_script, "_0xB1577667C3708F9B", mruby__SCRIPT___0xB1577667C3708F9B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xABA17D7CE615ADBF", mruby__UI___0xABA17D7CE615ADBF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xBD12F8228410D9B4", mruby__UI___0xBD12F8228410D9B4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x10D373323E5B9C0D", mruby__UI___0x10D373323E5B9C0D, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xC65AB383CD91DF98", mruby__UI___0xC65AB383CD91DF98, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xD422FCC5F239A915", mruby__UI___0xD422FCC5F239A915, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xB2A592B04648A9CB", mruby__UI___0xB2A592B04648A9CB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x9245E81072704B8A", mruby__UI___0x9245E81072704B8A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_SHOW_CURSOR_THIS_FRAME", mruby__UI___SHOW_CURSOR_THIS_FRAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x8DB8CFFD58B62552", mruby__UI___0x8DB8CFFD58B62552, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x98215325A695E78A", mruby__UI___0x98215325A695E78A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x3D9ACB1EB139E702", mruby__UI___0x3D9ACB1EB139E702, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x6F1554B0CC2089FA", mruby__UI___0x6F1554B0CC2089FA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x55598D21339CB998", mruby__UI___0x55598D21339CB998, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x25F87B30C382FCA7", mruby__UI___0x25F87B30C382FCA7, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xA8FDB297A8D25FBA", mruby__UI___0xA8FDB297A8D25FBA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_REMOVE_NOTIFICATION", mruby__UI___REMOVE_NOTIFICATION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xA13C11E1B5C06BFC", mruby__UI___0xA13C11E1B5C06BFC, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x583049884A2EEE3C", mruby__UI___0x583049884A2EEE3C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xFDB423997FA30340", mruby__UI___0xFDB423997FA30340, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xE1CD1E48E025E661", mruby__UI___0xE1CD1E48E025E661, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xA9CBFD40B3FA3010", mruby__UI___0xA9CBFD40B3FA3010, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xD4438C0564490E63", mruby__UI___0xD4438C0564490E63, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xB695E2CD0A2DA9EE", mruby__UI___0xB695E2CD0A2DA9EE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_GET_ACTIVE_NOTIFICATION_HANDLE", mruby__UI___GET_ACTIVE_NOTIFICATION_HANDLE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x56C8B608CFD49854", mruby__UI___0x56C8B608CFD49854, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xADED7F5748ACAFE6", mruby__UI___0xADED7F5748ACAFE6, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x92F0DA1E27DB96DC", mruby__UI___0x92F0DA1E27DB96DC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x17430B918701C342", mruby__UI___0x17430B918701C342, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ui, "_0x17AD8C9706BDD88A", mruby__UI___0x17AD8C9706BDD88A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x4A0C7C9BB10ABB36", mruby__UI___0x4A0C7C9BB10ABB36, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xFDD85225B2DEA55E", mruby__UI___0xFDD85225B2DEA55E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xFDEC055AB549E328", mruby__UI___0xFDEC055AB549E328, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x80FE4F3AB4E1B62A", mruby__UI___0x80FE4F3AB4E1B62A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xBAE4F9B97CD43B30", mruby__UI___0xBAE4F9B97CD43B30, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_SET_NOTIFICATION_TEXT_ENTRY", mruby__UI___SET_NOTIFICATION_TEXT_ENTRY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x2B7E9A4EAAA93C89", mruby__UI___0x2B7E9A4EAAA93C89, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ui, "_SET_NOTIFICATION_MESSAGE", mruby__UI___SET_NOTIFICATION_MESSAGE, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ui, "_0xC6F580E4C94926AC", mruby__UI___0xC6F580E4C94926AC, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ui, "_0x1E6611149DB3DB6B", mruby__UI___0x1E6611149DB3DB6B, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_ui, "_SET_NOTIFICATION_MESSAGE_CLAN_TAG", mruby__UI___SET_NOTIFICATION_MESSAGE_CLAN_TAG, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_ui, "_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2", mruby__UI___SET_NOTIFICATION_MESSAGE_CLAN_TAG_2, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_ui, "_DRAW_NOTIFICATION", mruby__UI___DRAW_NOTIFICATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_DRAW_NOTIFICATION_2", mruby__UI___DRAW_NOTIFICATION_2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_DRAW_NOTIFICATION_3", mruby__UI___DRAW_NOTIFICATION_3, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0xAA295B6F28BD587D", mruby__UI___0xAA295B6F28BD587D, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ui, "_0x33EE12743CCD6343", mruby__UI___0x33EE12743CCD6343, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0xC8F3AAF93D0600BF", mruby__UI___0xC8F3AAF93D0600BF, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ui, "_0x7AE0589093A2E088", mruby__UI___0x7AE0589093A2E088, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ui, "_DRAW_NOTIFICATION_4", mruby__UI___DRAW_NOTIFICATION_4, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0xD202B92CBF1D816F", mruby__UI___0xD202B92CBF1D816F, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0xDD6CB2CCE7C2735C", mruby__UI___0xDD6CB2CCE7C2735C, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_SET_TEXT_ENTRY_2", mruby__UI___SET_TEXT_ENTRY_2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_DRAW_SUBTITLE_TIMED", mruby__UI___DRAW_SUBTITLE_TIMED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x853648FD1063A213", mruby__UI___0x853648FD1063A213, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x8A9BA1AB3E237613", mruby__UI___0x8A9BA1AB3E237613, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_SET_TEXT_ENTRY", mruby__UI___SET_TEXT_ENTRY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_DRAW_TEXT", mruby__UI___DRAW_TEXT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_SET_TEXT_ENTRY_FOR_WIDTH", mruby__UI___SET_TEXT_ENTRY_FOR_WIDTH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_GET_TEXT_SCREEN_WIDTH", mruby__UI___GET_TEXT_SCREEN_WIDTH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_SET_TEXT_GXT_ENTRY", mruby__UI___SET_TEXT_GXT_ENTRY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x9040DFB09BE75706", mruby__UI___0x9040DFB09BE75706, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_SET_TEXT_COMPONENT_FORMAT", mruby__UI___SET_TEXT_COMPONENT_FORMAT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_DISPLAY_HELP_TEXT_FROM_STRING_LABEL", mruby__UI___DISPLAY_HELP_TEXT_FROM_STRING_LABEL, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ui, "_0x0A24DA3A41B718F5", mruby__UI___0x0A24DA3A41B718F5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x10BDDBFC529428DD", mruby__UI___0x10BDDBFC529428DD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "BEGIN_TEXT_COMMAND_SET_BLIP_NAME", mruby__UI__BEGIN_TEXT_COMMAND_SET_BLIP_NAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "END_TEXT_COMMAND_SET_BLIP_NAME", mruby__UI__END_TEXT_COMMAND_SET_BLIP_NAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x23D69E0465570028", mruby__UI___0x23D69E0465570028, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xCFDBDF5AE59BA0F4", mruby__UI___0xCFDBDF5AE59BA0F4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xE124FA80A759019C", mruby__UI___0xE124FA80A759019C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xFCC75460ABA29378", mruby__UI___0xFCC75460ABA29378, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x8F9EE5687F8EECCD", mruby__UI___0x8F9EE5687F8EECCD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xA86911979638106F", mruby__UI___0xA86911979638106F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "ADD_TEXT_COMPONENT_INTEGER", mruby__UI__ADD_TEXT_COMPONENT_INTEGER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "ADD_TEXT_COMPONENT_FLOAT", mruby__UI__ADD_TEXT_COMPONENT_FLOAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_ADD_TEXT_COMPONENT_ITEM_STRING", mruby__UI___ADD_TEXT_COMPONENT_ITEM_STRING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x17299B63C7683A2B", mruby__UI___0x17299B63C7683A2B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x80EAD8E2E1D5D52E", mruby__UI___0x80EAD8E2E1D5D52E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_ADD_TEXT_COMPONENT_STRING", mruby__UI___ADD_TEXT_COMPONENT_STRING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "ADD_TEXT_COMPONENT_SUBSTRING_TIME", mruby__UI__ADD_TEXT_COMPONENT_SUBSTRING_TIME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x0E4C749FF9DE9CC4", mruby__UI___0x0E4C749FF9DE9CC4, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x761B77454205A61D", mruby__UI___0x761B77454205A61D, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_ADD_TEXT_COMPONENT_STRING2", mruby__UI___ADD_TEXT_COMPONENT_STRING2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_ADD_TEXT_COMPONENT_STRING3", mruby__UI___ADD_TEXT_COMPONENT_STRING3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x39BBF623FC803EAC", mruby__UI___0x39BBF623FC803EAC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_GET_TEXT_SUBSTRING", mruby__UI___GET_TEXT_SUBSTRING, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_GET_TEXT_SUBSTRING_SAFE", mruby__UI___GET_TEXT_SUBSTRING_SAFE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ui, "_GET_TEXT_SUBSTRING_SLICE", mruby__UI___GET_TEXT_SUBSTRING_SLICE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_GET_LABEL_TEXT", mruby__UI___GET_LABEL_TEXT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "CLEAR_PRINTS", mruby__UI__CLEAR_PRINTS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "CLEAR_BRIEF", mruby__UI__CLEAR_BRIEF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "CLEAR_ALL_HELP_MESSAGES", mruby__UI__CLEAR_ALL_HELP_MESSAGES, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "CLEAR_THIS_PRINT", mruby__UI__CLEAR_THIS_PRINT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "CLEAR_SMALL_PRINTS", mruby__UI__CLEAR_SMALL_PRINTS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "DOES_TEXT_BLOCK_EXIST", mruby__UI__DOES_TEXT_BLOCK_EXIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "REQUEST_ADDITIONAL_TEXT", mruby__UI__REQUEST_ADDITIONAL_TEXT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_REQUEST_ADDITIONAL_TEXT_2", mruby__UI___REQUEST_ADDITIONAL_TEXT_2, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "HAS_ADDITIONAL_TEXT_LOADED", mruby__UI__HAS_ADDITIONAL_TEXT_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "CLEAR_ADDITIONAL_TEXT", mruby__UI__CLEAR_ADDITIONAL_TEXT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "IS_STREAMING_ADDITIONAL_TEXT", mruby__UI__IS_STREAMING_ADDITIONAL_TEXT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "HAS_THIS_ADDITIONAL_TEXT_LOADED", mruby__UI__HAS_THIS_ADDITIONAL_TEXT_LOADED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "IS_MESSAGE_BEING_DISPLAYED", mruby__UI__IS_MESSAGE_BEING_DISPLAYED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "DOES_TEXT_LABEL_EXIST", mruby__UI__DOES_TEXT_LABEL_EXIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL", mruby__UI__GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "GET_LENGTH_OF_LITERAL_STRING", mruby__UI__GET_LENGTH_OF_LITERAL_STRING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x43E4111189E54F0E", mruby__UI___0x43E4111189E54F0E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "GET_STREET_NAME_FROM_HASH_KEY", mruby__UI__GET_STREET_NAME_FROM_HASH_KEY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "IS_HUD_PREFERENCE_SWITCHED_ON", mruby__UI__IS_HUD_PREFERENCE_SWITCHED_ON, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "IS_RADAR_PREFERENCE_SWITCHED_ON", mruby__UI__IS_RADAR_PREFERENCE_SWITCHED_ON, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "IS_SUBTITLE_PREFERENCE_SWITCHED_ON", mruby__UI__IS_SUBTITLE_PREFERENCE_SWITCHED_ON, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "DISPLAY_HUD", mruby__UI__DISPLAY_HUD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x7669F9E39DC17063", mruby__UI___0x7669F9E39DC17063, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x402F9ED62087E898", mruby__UI___0x402F9ED62087E898, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "DISPLAY_RADAR", mruby__UI__DISPLAY_RADAR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "IS_HUD_HIDDEN", mruby__UI__IS_HUD_HIDDEN, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "IS_RADAR_HIDDEN", mruby__UI__IS_RADAR_HIDDEN, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xAF754F20EB5CD51A", mruby__UI___0xAF754F20EB5CD51A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "SET_BLIP_ROUTE", mruby__UI__SET_BLIP_ROUTE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_ROUTE_COLOUR", mruby__UI__SET_BLIP_ROUTE_COLOUR, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS", mruby__UI__ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x57D760D55F54E071", mruby__UI___0x57D760D55F54E071, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "RESPONDING_AS_TEMP", mruby__UI__RESPONDING_AS_TEMP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_RADAR_ZOOM", mruby__UI__SET_RADAR_ZOOM, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xF98E4B3E56AFC7B1", mruby__UI___0xF98E4B3E56AFC7B1, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_SET_RADAR_ZOOM_LEVEL_THIS_FRAME", mruby__UI___SET_RADAR_ZOOM_LEVEL_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xD2049635DEB9C375", mruby__UI___0xD2049635DEB9C375, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xD68A5FF8A3A89874", mruby__UI___0xD68A5FF8A3A89874, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ui, "_0x16A304E6CB2BFAB9", mruby__UI___0x16A304E6CB2BFAB9, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ui, "_0x1CCC708F0F850613", mruby__UI___0x1CCC708F0F850613, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0xF314CF4F0211894E", mruby__UI___0xF314CF4F0211894E, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ui, "FLASH_ABILITY_BAR", mruby__UI__FLASH_ABILITY_BAR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_ABILITY_BAR_VALUE", mruby__UI__SET_ABILITY_BAR_VALUE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "FLASH_WANTED_DISPLAY", mruby__UI__FLASH_WANTED_DISPLAY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xBA8D65C1C65702E5", mruby__UI___0xBA8D65C1C65702E5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xDB88A37483346780", mruby__UI___0xDB88A37483346780, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_TEXT_SCALE", mruby__UI__SET_TEXT_SCALE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_TEXT_COLOUR", mruby__UI__SET_TEXT_COLOUR, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ui, "SET_TEXT_CENTRE", mruby__UI__SET_TEXT_CENTRE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_TEXT_RIGHT_JUSTIFY", mruby__UI__SET_TEXT_RIGHT_JUSTIFY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_TEXT_JUSTIFICATION", mruby__UI__SET_TEXT_JUSTIFICATION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_TEXT_WRAP", mruby__UI__SET_TEXT_WRAP, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_TEXT_LEADING", mruby__UI__SET_TEXT_LEADING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_TEXT_PROPORTIONAL", mruby__UI__SET_TEXT_PROPORTIONAL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_TEXT_FONT", mruby__UI__SET_TEXT_FONT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_TEXT_DROP_SHADOW", mruby__UI__SET_TEXT_DROP_SHADOW, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "SET_TEXT_DROPSHADOW", mruby__UI__SET_TEXT_DROPSHADOW, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ui, "SET_TEXT_OUTLINE", mruby__UI__SET_TEXT_OUTLINE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "SET_TEXT_EDGE", mruby__UI__SET_TEXT_EDGE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ui, "SET_TEXT_RENDER_ID", mruby__UI__SET_TEXT_RENDER_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID", mruby__UI__GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "REGISTER_NAMED_RENDERTARGET", mruby__UI__REGISTER_NAMED_RENDERTARGET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "IS_NAMED_RENDERTARGET_REGISTERED", mruby__UI__IS_NAMED_RENDERTARGET_REGISTERED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "RELEASE_NAMED_RENDERTARGET", mruby__UI__RELEASE_NAMED_RENDERTARGET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "LINK_NAMED_RENDERTARGET", mruby__UI__LINK_NAMED_RENDERTARGET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "GET_NAMED_RENDERTARGET_RENDER_ID", mruby__UI__GET_NAMED_RENDERTARGET_RENDER_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "IS_NAMED_RENDERTARGET_LINKED", mruby__UI__IS_NAMED_RENDERTARGET_LINKED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "CLEAR_HELP", mruby__UI__CLEAR_HELP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "IS_HELP_MESSAGE_ON_SCREEN", mruby__UI__IS_HELP_MESSAGE_ON_SCREEN, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x214CD562A939246A", mruby__UI___0x214CD562A939246A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "IS_HELP_MESSAGE_BEING_DISPLAYED", mruby__UI__IS_HELP_MESSAGE_BEING_DISPLAYED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "IS_HELP_MESSAGE_FADING_OUT", mruby__UI__IS_HELP_MESSAGE_FADING_OUT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x4A9923385BDB9DAD", mruby__UI___0x4A9923385BDB9DAD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_GET_BLIP_INFO_ID_ITERATOR", mruby__UI___GET_BLIP_INFO_ID_ITERATOR, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "GET_NUMBER_OF_ACTIVE_BLIPS", mruby__UI__GET_NUMBER_OF_ACTIVE_BLIPS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "GET_NEXT_BLIP_INFO_ID", mruby__UI__GET_NEXT_BLIP_INFO_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "GET_FIRST_BLIP_INFO_ID", mruby__UI__GET_FIRST_BLIP_INFO_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "GET_BLIP_INFO_ID_COORD", mruby__UI__GET_BLIP_INFO_ID_COORD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "GET_BLIP_INFO_ID_DISPLAY", mruby__UI__GET_BLIP_INFO_ID_DISPLAY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "GET_BLIP_INFO_ID_TYPE", mruby__UI__GET_BLIP_INFO_ID_TYPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "GET_BLIP_INFO_ID_ENTITY_INDEX", mruby__UI__GET_BLIP_INFO_ID_ENTITY_INDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "GET_BLIP_INFO_ID_PICKUP_INDEX", mruby__UI__GET_BLIP_INFO_ID_PICKUP_INDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "GET_BLIP_FROM_ENTITY", mruby__UI__GET_BLIP_FROM_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "ADD_BLIP_FOR_RADIUS", mruby__UI__ADD_BLIP_FOR_RADIUS, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ui, "ADD_BLIP_FOR_ENTITY", mruby__UI__ADD_BLIP_FOR_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "ADD_BLIP_FOR_PICKUP", mruby__UI__ADD_BLIP_FOR_PICKUP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "ADD_BLIP_FOR_COORD", mruby__UI__ADD_BLIP_FOR_COORD, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0x72DD432F3CDFC0EE", mruby__UI___0x72DD432F3CDFC0EE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ui, "_0x60734CC207C9833C", mruby__UI___0x60734CC207C9833C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_BLIP_COORDS", mruby__UI__SET_BLIP_COORDS, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ui, "GET_BLIP_COORDS", mruby__UI__GET_BLIP_COORDS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_BLIP_SPRITE", mruby__UI__SET_BLIP_SPRITE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "GET_BLIP_SPRITE", mruby__UI__GET_BLIP_SPRITE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_BLIP_NAME_FROM_TEXT_FILE", mruby__UI__SET_BLIP_NAME_FROM_TEXT_FILE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_NAME_TO_PLAYER_NAME", mruby__UI__SET_BLIP_NAME_TO_PLAYER_NAME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_ALPHA", mruby__UI__SET_BLIP_ALPHA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "GET_BLIP_ALPHA", mruby__UI__GET_BLIP_ALPHA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_BLIP_FADE", mruby__UI__SET_BLIP_FADE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "SET_BLIP_ROTATION", mruby__UI__SET_BLIP_ROTATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_FLASH_TIMER", mruby__UI__SET_BLIP_FLASH_TIMER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_FLASH_INTERVAL", mruby__UI__SET_BLIP_FLASH_INTERVAL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_COLOUR", mruby__UI__SET_BLIP_COLOUR, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_SECONDARY_COLOUR", mruby__UI__SET_BLIP_SECONDARY_COLOUR, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ui, "GET_BLIP_COLOUR", mruby__UI__GET_BLIP_COLOUR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "GET_BLIP_HUD_COLOUR", mruby__UI__GET_BLIP_HUD_COLOUR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "IS_BLIP_SHORT_RANGE", mruby__UI__IS_BLIP_SHORT_RANGE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "IS_BLIP_ON_MINIMAP", mruby__UI__IS_BLIP_ON_MINIMAP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xDD2238F57B977751", mruby__UI___0xDD2238F57B977751, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x54318C915D27E4CE", mruby__UI___0x54318C915D27E4CE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_HIGH_DETAIL", mruby__UI__SET_BLIP_HIGH_DETAIL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_AS_MISSION_CREATOR_BLIP", mruby__UI__SET_BLIP_AS_MISSION_CREATOR_BLIP, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "IS_MISSION_CREATOR_BLIP", mruby__UI__IS_MISSION_CREATOR_BLIP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "DISABLE_BLIP_NAME_FOR_VAR", mruby__UI__DISABLE_BLIP_NAME_FOR_VAR, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x4167EFE0527D706E", mruby__UI___0x4167EFE0527D706E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xF1A6C18B35BCADE6", mruby__UI___0xF1A6C18B35BCADE6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_BLIP_FLASHES", mruby__UI__SET_BLIP_FLASHES, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_FLASHES_ALTERNATE", mruby__UI__SET_BLIP_FLASHES_ALTERNATE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "IS_BLIP_FLASHING", mruby__UI__IS_BLIP_FLASHING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_BLIP_AS_SHORT_RANGE", mruby__UI__SET_BLIP_AS_SHORT_RANGE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_SCALE", mruby__UI__SET_BLIP_SCALE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_PRIORITY", mruby__UI__SET_BLIP_PRIORITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_DISPLAY", mruby__UI__SET_BLIP_DISPLAY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_CATEGORY", mruby__UI__SET_BLIP_CATEGORY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_AS_FRIENDLY", mruby__UI__SET_BLIP_AS_FRIENDLY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "PULSE_BLIP", mruby__UI__PULSE_BLIP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SHOW_NUMBER_ON_BLIP", mruby__UI__SHOW_NUMBER_ON_BLIP, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "HIDE_NUMBER_ON_BLIP", mruby__UI__HIDE_NUMBER_ON_BLIP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x75A16C3DA34F1245", mruby__UI___0x75A16C3DA34F1245, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x74513EA3E505181E", mruby__UI___0x74513EA3E505181E, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_SET_BLIP_SHOW_HEADING_INDICATOR", mruby__UI___SET_BLIP_SHOW_HEADING_INDICATOR, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0xB81656BC81FE24D1", mruby__UI___0xB81656BC81FE24D1, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x23C3EB807312F01A", mruby__UI___0x23C3EB807312F01A, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0xDCFB5D4DB8BF367E", mruby__UI___0xDCFB5D4DB8BF367E, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0xC4278F70131BAA6D", mruby__UI___0xC4278F70131BAA6D, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x2B6D467DAB714E8D", mruby__UI___0x2B6D467DAB714E8D, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x25615540D894B814", mruby__UI___0x25615540D894B814, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "DOES_BLIP_EXIST", mruby__UI__DOES_BLIP_EXIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_WAYPOINT_OFF", mruby__UI__SET_WAYPOINT_OFF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xD8E694757BCEA8E9", mruby__UI___0xD8E694757BCEA8E9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "REFRESH_WAYPOINT", mruby__UI__REFRESH_WAYPOINT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "IS_WAYPOINT_ACTIVE", mruby__UI__IS_WAYPOINT_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "SET_NEW_WAYPOINT", mruby__UI__SET_NEW_WAYPOINT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_BRIGHT", mruby__UI__SET_BLIP_BRIGHT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_BLIP_SHOW_CONE", mruby__UI__SET_BLIP_SHOW_CONE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0xC594B315EDF2D4AF", mruby__UI___0xC594B315EDF2D4AF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_MINIMAP_COMPONENT", mruby__UI__SET_MINIMAP_COMPONENT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0x60E892BA4F5BDCA4", mruby__UI___0x60E892BA4F5BDCA4, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "GET_MAIN_PLAYER_BLIP_ID", mruby__UI__GET_MAIN_PLAYER_BLIP_ID, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x41350B4FC28E3941", mruby__UI___0x41350B4FC28E3941, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "HIDE_LOADING_ON_FADE_THIS_FRAME", mruby__UI__HIDE_LOADING_ON_FADE_THIS_FRAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "SET_RADAR_AS_INTERIOR_THIS_FRAME", mruby__UI__SET_RADAR_AS_INTERIOR_THIS_FRAME, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_ui, "SET_RADAR_AS_EXTERIOR_THIS_FRAME", mruby__UI__SET_RADAR_AS_EXTERIOR_THIS_FRAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_SET_PLAYER_BLIP_POSITION_THIS_FRAME", mruby__UI___SET_PLAYER_BLIP_POSITION_THIS_FRAME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x9049FE339D5F6F6F", mruby__UI___0x9049FE339D5F6F6F, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_DISABLE_RADAR_THIS_FRAME", mruby__UI___DISABLE_RADAR_THIS_FRAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x20FE7FDFEEAD38C0", mruby__UI___0x20FE7FDFEEAD38C0, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_CENTER_PLAYER_ON_RADAR_THIS_FRAME", mruby__UI___CENTER_PLAYER_ON_RADAR_THIS_FRAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "SET_WIDESCREEN_FORMAT", mruby__UI__SET_WIDESCREEN_FORMAT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "DISPLAY_AREA_NAME", mruby__UI__DISPLAY_AREA_NAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "DISPLAY_CASH", mruby__UI__DISPLAY_CASH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x170F541E1CADD1DE", mruby__UI___0x170F541E1CADD1DE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_SET_SINGLEPLAYER_HUD_CASH", mruby__UI___SET_SINGLEPLAYER_HUD_CASH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "DISPLAY_AMMO_THIS_FRAME", mruby__UI__DISPLAY_AMMO_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "DISPLAY_SNIPER_SCOPE_THIS_FRAME", mruby__UI__DISPLAY_SNIPER_SCOPE_THIS_FRAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "HIDE_HUD_AND_RADAR_THIS_FRAME", mruby__UI__HIDE_HUD_AND_RADAR_THIS_FRAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xE67C6DFD386EA5E7", mruby__UI___0xE67C6DFD386EA5E7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xC2D15BEF167E27BC", mruby__UI___0xC2D15BEF167E27BC, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x95CF81BD06EE1887", mruby__UI___0x95CF81BD06EE1887, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "SET_MULTIPLAYER_BANK_CASH", mruby__UI__SET_MULTIPLAYER_BANK_CASH, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "REMOVE_MULTIPLAYER_BANK_CASH", mruby__UI__REMOVE_MULTIPLAYER_BANK_CASH, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "SET_MULTIPLAYER_HUD_CASH", mruby__UI__SET_MULTIPLAYER_HUD_CASH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "REMOVE_MULTIPLAYER_HUD_CASH", mruby__UI__REMOVE_MULTIPLAYER_HUD_CASH, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "HIDE_HELP_TEXT_THIS_FRAME", mruby__UI__HIDE_HELP_TEXT_THIS_FRAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "DISPLAY_HELP_TEXT_THIS_FRAME", mruby__UI__DISPLAY_HELP_TEXT_THIS_FRAME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_SHOW_WEAPON_WHEEL", mruby__UI___SHOW_WEAPON_WHEEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x0AFC4AF510774B47", mruby__UI___0x0AFC4AF510774B47, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xA48931185F0536FE", mruby__UI___0xA48931185F0536FE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x72C1056D678BB7D8", mruby__UI___0x72C1056D678BB7D8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xA13E93403F26C812", mruby__UI___0xA13E93403F26C812, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x14C9FDCC41F81F63", mruby__UI___0x14C9FDCC41F81F63, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_GPS_FLAGS", mruby__UI__SET_GPS_FLAGS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "CLEAR_GPS_FLAGS", mruby__UI__CLEAR_GPS_FLAGS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x1EAC5F91BCBC5073", mruby__UI___0x1EAC5F91BCBC5073, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "CLEAR_GPS_RACE_TRACK", mruby__UI__CLEAR_GPS_RACE_TRACK, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xDB34E8D56FC13B08", mruby__UI___0xDB34E8D56FC13B08, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0x311438A071DD9B1A", mruby__UI___0x311438A071DD9B1A, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0x900086F371220B6F", mruby__UI___0x900086F371220B6F, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0xE6DE0561D9232A64", mruby__UI___0xE6DE0561D9232A64, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x3D3D15AF7BCAAF83", mruby__UI___0x3D3D15AF7BCAAF83, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0xA905192A6781C41B", mruby__UI___0xA905192A6781C41B, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0x3DDA37128DD1ACA8", mruby__UI___0x3DDA37128DD1ACA8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x67EEDEA1B9BAFD94", mruby__UI___0x67EEDEA1B9BAFD94, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "CLEAR_GPS_PLAYER_WAYPOINT", mruby__UI__CLEAR_GPS_PLAYER_WAYPOINT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "SET_GPS_FLASHES", mruby__UI__SET_GPS_FLASHES, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x7B21E0BB01E8224A", mruby__UI___0x7B21E0BB01E8224A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "FLASH_MINIMAP_DISPLAY", mruby__UI__FLASH_MINIMAP_DISPLAY, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x6B1DE27EE78E6A19", mruby__UI___0x6B1DE27EE78E6A19, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "TOGGLE_STEALTH_RADAR", mruby__UI__TOGGLE_STEALTH_RADAR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "KEY_HUD_COLOUR", mruby__UI__KEY_HUD_COLOUR, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_MISSION_NAME", mruby__UI__SET_MISSION_NAME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "SET_MINIMAP_BLOCK_WAYPOINT", mruby__UI__SET_MINIMAP_BLOCK_WAYPOINT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_SET_DRAW_MAP_VISIBLE", mruby__UI___SET_DRAW_MAP_VISIBLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xF8DEE0A5600CBB93", mruby__UI___0xF8DEE0A5600CBB93, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xE0130B41D3CF4574", mruby__UI___0xE0130B41D3CF4574, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x6E31B91145873922", mruby__UI___0x6E31B91145873922, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0x62E849B7EB28E770", mruby__UI___0x62E849B7EB28E770, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x0923DBF87DFF735E", mruby__UI___0x0923DBF87DFF735E, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0x71BDB63DBAF8DA59", mruby__UI___0x71BDB63DBAF8DA59, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x35EDD5B2E3FF01C0", mruby__UI___0x35EDD5B2E3FF01C0, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "LOCK_MINIMAP_ANGLE", mruby__UI__LOCK_MINIMAP_ANGLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "UNLOCK_MINIMAP_ANGLE", mruby__UI__UNLOCK_MINIMAP_ANGLE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "LOCK_MINIMAP_POSITION", mruby__UI__LOCK_MINIMAP_POSITION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "UNLOCK_MINIMAP_POSITION", mruby__UI__UNLOCK_MINIMAP_POSITION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_SET_MINIMAP_ATTITUDE_INDICATOR_LEVEL", mruby__UI___SET_MINIMAP_ATTITUDE_INDICATOR_LEVEL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x3F5CC444DCAAA8F2", mruby__UI___0x3F5CC444DCAAA8F2, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0x975D66A0BC17064C", mruby__UI___0x975D66A0BC17064C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x06A320535F5F0248", mruby__UI___0x06A320535F5F0248, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_SET_RADAR_BIGMAP_ENABLED", mruby__UI___SET_RADAR_BIGMAP_ENABLED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "IS_HUD_COMPONENT_ACTIVE", mruby__UI__IS_HUD_COMPONENT_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "IS_SCRIPTED_HUD_COMPONENT_ACTIVE", mruby__UI__IS_SCRIPTED_HUD_COMPONENT_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME", mruby__UI__HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x09C0403ED9A751C2", mruby__UI___0x09C0403ED9A751C2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "HIDE_HUD_COMPONENT_THIS_FRAME", mruby__UI__HIDE_HUD_COMPONENT_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SHOW_HUD_COMPONENT_THIS_FRAME", mruby__UI__SHOW_HUD_COMPONENT_THIS_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xA4DEDE28B1814289", mruby__UI___0xA4DEDE28B1814289, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "RESET_RETICULE_VALUES", mruby__UI__RESET_RETICULE_VALUES, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "RESET_HUD_COMPONENT_VALUES", mruby__UI__RESET_HUD_COMPONENT_VALUES, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "SET_HUD_COMPONENT_POSITION", mruby__UI__SET_HUD_COMPONENT_POSITION, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "GET_HUD_COMPONENT_POSITION", mruby__UI__GET_HUD_COMPONENT_POSITION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xB57D8DD645CFA2CF", mruby__UI___0xB57D8DD645CFA2CF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x523A590C1A3CC0D3", mruby__UI___0x523A590C1A3CC0D3, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xEE4C0E6DBC6F2C6F", mruby__UI___0xEE4C0E6DBC6F2C6F, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x9135584D09A3437E", mruby__UI___0x9135584D09A3437E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x2432784ACA090DA4", mruby__UI___0x2432784ACA090DA4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x7679CC1BCEBE3D4C", mruby__UI___0x7679CC1BCEBE3D4C, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0x784BA7E0ECEB4178", mruby__UI___0x784BA7E0ECEB4178, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ui, "_0xB094BC1DB4018240", mruby__UI___0xB094BC1DB4018240, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_ui, "_0x788E7FD431BD67F1", mruby__UI___0x788E7FD431BD67F1, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ui, "CLEAR_FLOATING_HELP", mruby__UI__CLEAR_FLOATING_HELP, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x6DD05E9D83EFA4C9", mruby__UI___0x6DD05E9D83EFA4C9, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_ui, "_0x6E0EB3EB47C8D7AA", mruby__UI___0x6E0EB3EB47C8D7AA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_CREATE_HEAD_DISPLAY", mruby__UI___CREATE_HEAD_DISPLAY, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_ui, "_0x31698AA80E0223F8", mruby__UI___0x31698AA80E0223F8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_HAS_HEAD_DISPLAY_LOADED", mruby__UI___HAS_HEAD_DISPLAY_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "ADD_TREVOR_RANDOM_MODIFIER", mruby__UI__ADD_TREVOR_RANDOM_MODIFIER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_SET_HEAD_DISPLAY_FLAG", mruby__UI___SET_HEAD_DISPLAY_FLAG, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0xEE76FF7E6A0166B0", mruby__UI___0xEE76FF7E6A0166B0, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0xA67F9C46D612B6F1", mruby__UI___0xA67F9C46D612B6F1, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x613ED644950626AE", mruby__UI___0x613ED644950626AE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0x3158C77A7E888AB4", mruby__UI___0x3158C77A7E888AB4, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0xD48FE545CD46F857", mruby__UI___0xD48FE545CD46F857, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_SET_HEAD_DISPLAY_WANTED", mruby__UI___SET_HEAD_DISPLAY_WANTED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_SET_HEAD_DISPLAY_STRING", mruby__UI___SET_HEAD_DISPLAY_STRING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0xEB709A36958ABE0D", mruby__UI___0xEB709A36958ABE0D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x7B7723747CCB55B6", mruby__UI___0x7B7723747CCB55B6, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x01A358D9128B7A86", mruby__UI___0x01A358D9128B7A86, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "GET_CURRENT_WEBSITE_ID", mruby__UI__GET_CURRENT_WEBSITE_ID, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xE3B05614DCE1D014", mruby__UI___0xE3B05614DCE1D014, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xB99C4E4D9499DF29", mruby__UI___0xB99C4E4D9499DF29, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xAF42195A42C63BBA", mruby__UI___0xAF42195A42C63BBA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xDAF87174BE7454FF", mruby__UI___0xDAF87174BE7454FF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x6EF54AB721DC6242", mruby__UI___0x6EF54AB721DC6242, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xE18B138FABC53103", mruby__UI___0xE18B138FABC53103, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x7792424AA0EAC32E", mruby__UI___0x7792424AA0EAC32E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x5354C5BA2EA868A4", mruby__UI___0x5354C5BA2EA868A4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x1EAE6DD17B7A5EFA", mruby__UI___0x1EAE6DD17B7A5EFA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x551DF99658DB6EE8", mruby__UI___0x551DF99658DB6EE8, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0x2708FC083123F9FF", mruby__UI___0x2708FC083123F9FF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x1121BFA1A1A522A8", mruby__UI___0x1121BFA1A1A522A8, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x82CEDC33687E1F50", mruby__UI___0x82CEDC33687E1F50, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x211C4EF450086857", mruby__UI___0x211C4EF450086857, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xBF4F34A85CA2970C", mruby__UI___0xBF4F34A85CA2970C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "ACTIVATE_FRONTEND_MENU", mruby__UI__ACTIVATE_FRONTEND_MENU, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "RESTART_FRONTEND_MENU", mruby__UI__RESTART_FRONTEND_MENU, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x2309595AD6145265", mruby__UI___0x2309595AD6145265, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "SET_PAUSE_MENU_ACTIVE", mruby__UI__SET_PAUSE_MENU_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "DISABLE_FRONTEND_THIS_FRAME", mruby__UI__DISABLE_FRONTEND_THIS_FRAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xBA751764F0821256", mruby__UI___0xBA751764F0821256, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xCC3FDDED67BCFC63", mruby__UI___0xCC3FDDED67BCFC63, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "SET_FRONTEND_ACTIVE", mruby__UI__SET_FRONTEND_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "IS_PAUSE_MENU_ACTIVE", mruby__UI__IS_PAUSE_MENU_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x2F057596F2BD0061", mruby__UI___0x2F057596F2BD0061, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "GET_PAUSE_MENU_STATE", mruby__UI__GET_PAUSE_MENU_STATE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x5BFF36D6ED83E0AE", mruby__UI___0x5BFF36D6ED83E0AE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "IS_PAUSE_MENU_RESTARTING", mruby__UI__IS_PAUSE_MENU_RESTARTING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x2162C446DFDF38FD", mruby__UI___0x2162C446DFDF38FD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x77F16B447824DA6C", mruby__UI___0x77F16B447824DA6C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xCDCA26E80FAECB8F", mruby__UI___0xCDCA26E80FAECB8F, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xDD564BDD0472C936", mruby__UI___0xDD564BDD0472C936, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "OBJECT_DECAL_TOGGLE", mruby__UI__OBJECT_DECAL_TOGGLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x84698AB38D0C6636", mruby__UI___0x84698AB38D0C6636, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x2A25ADC48F87841F", mruby__UI___0x2A25ADC48F87841F, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xDE03620F8703A9DF", mruby__UI___0xDE03620F8703A9DF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x359AF31A4B52F5ED", mruby__UI___0x359AF31A4B52F5ED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x13C4B962653A5280", mruby__UI___0x13C4B962653A5280, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "ENABLE_DEATHBLOOD_SEETHROUGH", mruby__UI__ENABLE_DEATHBLOOD_SEETHROUGH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xC78E239AC5B2DDB9", mruby__UI___0xC78E239AC5B2DDB9, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_ui, "_0xF06EBB91A81E09E3", mruby__UI___0xF06EBB91A81E09E3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x3BAB9A4E4F2FF5C7", mruby__UI___0x3BAB9A4E4F2FF5C7, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xEC9264727EEC0F28", mruby__UI___0xEC9264727EEC0F28, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x14621BB1DF14E2B2", mruby__UI___0x14621BB1DF14E2B2, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x66E7CB63C97B7D20", mruby__UI___0x66E7CB63C97B7D20, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x593FEAE1F73392D4", mruby__UI___0x593FEAE1F73392D4, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x4E3CD0EF8A489541", mruby__UI___0x4E3CD0EF8A489541, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xF284AC67940C6812", mruby__UI___0xF284AC67940C6812, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x2E22FEFA0100275E", mruby__UI___0x2E22FEFA0100275E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x0CF54F20DE43879C", mruby__UI___0x0CF54F20DE43879C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "CLEAR_PED_IN_PAUSE_MENU", mruby__UI__CLEAR_PED_IN_PAUSE_MENU, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "GIVE_PED_TO_PAUSE_MENU", mruby__UI__GIVE_PED_TO_PAUSE_MENU, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x3CA6050692BC61B0", mruby__UI___0x3CA6050692BC61B0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xECF128344E9FF9F1", mruby__UI___0xECF128344E9FF9F1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_SHOW_SOCIAL_CLUB_LEGAL_SCREEN", mruby__UI___SHOW_SOCIAL_CLUB_LEGAL_SCREEN, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xF13FE2A80C05C561", mruby__UI___0xF13FE2A80C05C561, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x6F72CD94F7B5B68C", mruby__UI___0x6F72CD94F7B5B68C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x75D3691713C3B05A", mruby__UI___0x75D3691713C3B05A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0xD2B32BE3FC1626C6", mruby__UI___0xD2B32BE3FC1626C6, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x9E778248D6685FE0", mruby__UI___0x9E778248D6685FE0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xC406BE343FC4B9AF", mruby__UI___0xC406BE343FC4B9AF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x1185A8087587322C", mruby__UI___0x1185A8087587322C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x8817605C2BA76200", mruby__UI___0x8817605C2BA76200, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_IS_TEXT_CHAT_ACTIVE", mruby__UI___IS_TEXT_CHAT_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_ABORT_TEXT_CHAT", mruby__UI___ABORT_TEXT_CHAT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_SET_TEXT_CHAT_UNK", mruby__UI___SET_TEXT_CHAT_UNK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xCEF214315D276FD1", mruby__UI___0xCEF214315D276FD1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xD30C50DF888D58B5", mruby__UI___0xD30C50DF888D58B5, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "DOES_PED_HAVE_AI_BLIP", mruby__UI__DOES_PED_HAVE_AI_BLIP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xE52B8E7F85D39A08", mruby__UI___0xE52B8E7F85D39A08, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "HIDE_SPECIAL_ABILITY_LOCKON_OPERATION", mruby__UI__HIDE_SPECIAL_ABILITY_LOCKON_OPERATION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x0C4BBF625CA98C4E", mruby__UI___0x0C4BBF625CA98C4E, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x97C65887D4B37FA9", mruby__UI___0x97C65887D4B37FA9, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_ui, "_0x7CD934010E115C2C", mruby__UI___0x7CD934010E115C2C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x56176892826A4FE8", mruby__UI___0x56176892826A4FE8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0xA277800A9EAE340E", mruby__UI___0xA277800A9EAE340E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x2632482FD6B9AB87", mruby__UI___0x2632482FD6B9AB87, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_ui, "_0x808519373FD336A3", mruby__UI___0x808519373FD336A3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_ui, "_0x04655F9D075D0AE5", mruby__UI___0x04655F9D075D0AE5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE", mruby__GRAPHICS__SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "DRAW_DEBUG_LINE", mruby__GRAPHICS__DRAW_DEBUG_LINE, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_graphics, "DRAW_DEBUG_LINE_WITH_TWO_COLOURS", mruby__GRAPHICS__DRAW_DEBUG_LINE_WITH_TWO_COLOURS, MRB_ARGS_REQ(14));
  mrb_define_method(mrb, module_graphics, "DRAW_DEBUG_SPHERE", mruby__GRAPHICS__DRAW_DEBUG_SPHERE, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_graphics, "DRAW_DEBUG_BOX", mruby__GRAPHICS__DRAW_DEBUG_BOX, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_graphics, "DRAW_DEBUG_CROSS", mruby__GRAPHICS__DRAW_DEBUG_CROSS, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_graphics, "DRAW_DEBUG_TEXT", mruby__GRAPHICS__DRAW_DEBUG_TEXT, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_graphics, "DRAW_DEBUG_TEXT_2D", mruby__GRAPHICS__DRAW_DEBUG_TEXT_2D, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_graphics, "DRAW_LINE", mruby__GRAPHICS__DRAW_LINE, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_graphics, "DRAW_POLY", mruby__GRAPHICS__DRAW_POLY, MRB_ARGS_REQ(13));
  mrb_define_method(mrb, module_graphics, "DRAW_BOX", mruby__GRAPHICS__DRAW_BOX, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_graphics, "_0x23BA6B0C2AD7B0D3", mruby__GRAPHICS___0x23BA6B0C2AD7B0D3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x1DD2139A9A20DCE8", mruby__GRAPHICS___0x1DD2139A9A20DCE8, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x90A78ECAA4E78453", mruby__GRAPHICS___0x90A78ECAA4E78453, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x0A46AF8A78DC5E0A", mruby__GRAPHICS___0x0A46AF8A78DC5E0A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x4862437A486F91B0", mruby__GRAPHICS___0x4862437A486F91B0, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_graphics, "_0x1670F8D05056F257", mruby__GRAPHICS___0x1670F8D05056F257, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x7FA5D82B8F58EC06", mruby__GRAPHICS___0x7FA5D82B8F58EC06, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x5B0316762AFD4A64", mruby__GRAPHICS___0x5B0316762AFD4A64, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x346EF3ECAAAB149E", mruby__GRAPHICS___0x346EF3ECAAAB149E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xA67C35C56EB1BD9D", mruby__GRAPHICS___0xA67C35C56EB1BD9D, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x0D6CA79EEEBD8CA3", mruby__GRAPHICS___0x0D6CA79EEEBD8CA3, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xD801CC02177FA3F1", mruby__GRAPHICS___0xD801CC02177FA3F1, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x1BBC135A4D25EDDE", mruby__GRAPHICS___0x1BBC135A4D25EDDE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x3DEC726C25A11BAC", mruby__GRAPHICS___0x3DEC726C25A11BAC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x0C0C4E81E1AC60A0", mruby__GRAPHICS___0x0C0C4E81E1AC60A0, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x759650634F07B6B4", mruby__GRAPHICS___0x759650634F07B6B4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xCB82A0BF0E3E3265", mruby__GRAPHICS___0xCB82A0BF0E3E3265, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x6A12D88881435DCA", mruby__GRAPHICS___0x6A12D88881435DCA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x1072F115DAB0717E", mruby__GRAPHICS___0x1072F115DAB0717E, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "GET_MAXIMUM_NUMBER_OF_PHOTOS", mruby__GRAPHICS__GET_MAXIMUM_NUMBER_OF_PHOTOS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xDC54A7AF8B3A14EF", mruby__GRAPHICS___0xDC54A7AF8B3A14EF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x473151EBC762C6DA", mruby__GRAPHICS___0x473151EBC762C6DA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x2A893980E96B659A", mruby__GRAPHICS___0x2A893980E96B659A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xF5BED327CEA362B1", mruby__GRAPHICS___0xF5BED327CEA362B1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x4AF92ACD3141D96C", mruby__GRAPHICS___0x4AF92ACD3141D96C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xE791DF1F73ED2C8B", mruby__GRAPHICS___0xE791DF1F73ED2C8B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xEC72C258667BE5EA", mruby__GRAPHICS___0xEC72C258667BE5EA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x40AFB081F8ADD4EE", mruby__GRAPHICS___0x40AFB081F8ADD4EE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_DRAW_LIGHT_WITH_RANGE_WITH_SHADOW", mruby__GRAPHICS___DRAW_LIGHT_WITH_RANGE_WITH_SHADOW, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_graphics, "DRAW_LIGHT_WITH_RANGE", mruby__GRAPHICS__DRAW_LIGHT_WITH_RANGE, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_graphics, "DRAW_SPOT_LIGHT", mruby__GRAPHICS__DRAW_SPOT_LIGHT, MRB_ARGS_REQ(14));
  mrb_define_method(mrb, module_graphics, "_DRAW_SPOT_LIGHT_WITH_SHADOW", mruby__GRAPHICS___DRAW_SPOT_LIGHT_WITH_SHADOW, MRB_ARGS_REQ(15));
  mrb_define_method(mrb, module_graphics, "_0xC9B18B4619F48F7B", mruby__GRAPHICS___0xC9B18B4619F48F7B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xDEADC0DEDEADC0DE", mruby__GRAPHICS___0xDEADC0DEDEADC0DE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "DRAW_MARKER", mruby__GRAPHICS__DRAW_MARKER, MRB_ARGS_REQ(24));
  mrb_define_method(mrb, module_graphics, "CREATE_CHECKPOINT", mruby__GRAPHICS__CREATE_CHECKPOINT, MRB_ARGS_REQ(13));
  mrb_define_method(mrb, module_graphics, "_0x4B5B4DA5D79F1943", mruby__GRAPHICS___0x4B5B4DA5D79F1943, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "SET_CHECKPOINT_CYLINDER_HEIGHT", mruby__GRAPHICS__SET_CHECKPOINT_CYLINDER_HEIGHT, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_graphics, "SET_CHECKPOINT_RGBA", mruby__GRAPHICS__SET_CHECKPOINT_RGBA, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_graphics, "_SET_CHECKPOINT_ICON_RGBA", mruby__GRAPHICS___SET_CHECKPOINT_ICON_RGBA, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_graphics, "_0xF51D36185993515D", mruby__GRAPHICS___0xF51D36185993515D, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_graphics, "_0x615D3925E87A3B26", mruby__GRAPHICS___0x615D3925E87A3B26, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "DELETE_CHECKPOINT", mruby__GRAPHICS__DELETE_CHECKPOINT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x22A249A53034450A", mruby__GRAPHICS___0x22A249A53034450A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xDC459CFA0CCE245B", mruby__GRAPHICS___0xDC459CFA0CCE245B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "REQUEST_STREAMED_TEXTURE_DICT", mruby__GRAPHICS__REQUEST_STREAMED_TEXTURE_DICT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "HAS_STREAMED_TEXTURE_DICT_LOADED", mruby__GRAPHICS__HAS_STREAMED_TEXTURE_DICT_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED", mruby__GRAPHICS__SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "DRAW_RECT", mruby__GRAPHICS__DRAW_RECT, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_graphics, "_0xC6372ECD45D73BCD", mruby__GRAPHICS___0xC6372ECD45D73BCD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x61BB1D9B3A95D802", mruby__GRAPHICS___0x61BB1D9B3A95D802, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_SET_SCREEN_DRAW_POSITION", mruby__GRAPHICS___SET_SCREEN_DRAW_POSITION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "_0xE3A3DB414A373DAB", mruby__GRAPHICS___0xE3A3DB414A373DAB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xF5A2C681787E579D", mruby__GRAPHICS___0xF5A2C681787E579D, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_graphics, "GET_SAFE_ZONE_SIZE", mruby__GRAPHICS__GET_SAFE_ZONE_SIZE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "DRAW_SPRITE", mruby__GRAPHICS__DRAW_SPRITE, MRB_ARGS_REQ(11));
  mrb_define_method(mrb, module_graphics, "ADD_ENTITY_ICON", mruby__GRAPHICS__ADD_ENTITY_ICON, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "SET_ENTITY_ICON_VISIBILITY", mruby__GRAPHICS__SET_ENTITY_ICON_VISIBILITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "SET_ENTITY_ICON_COLOR", mruby__GRAPHICS__SET_ENTITY_ICON_COLOR, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_graphics, "SET_DRAW_ORIGIN", mruby__GRAPHICS__SET_DRAW_ORIGIN, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_graphics, "CLEAR_DRAW_ORIGIN", mruby__GRAPHICS__CLEAR_DRAW_ORIGIN, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "ATTACH_TV_AUDIO_TO_ENTITY", mruby__GRAPHICS__ATTACH_TV_AUDIO_TO_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "SET_TV_AUDIO_FRONTEND", mruby__GRAPHICS__SET_TV_AUDIO_FRONTEND, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "LOAD_MOVIE_MESH_SET", mruby__GRAPHICS__LOAD_MOVIE_MESH_SET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "RELEASE_MOVIE_MESH_SET", mruby__GRAPHICS__RELEASE_MOVIE_MESH_SET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x9B6E70C5CEEF4EEB", mruby__GRAPHICS___0x9B6E70C5CEEF4EEB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_GET_SCREEN_ASPECT_RATIO", mruby__GRAPHICS___GET_SCREEN_ASPECT_RATIO, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xB2EBE8CBC58B90E9", mruby__GRAPHICS___0xB2EBE8CBC58B90E9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "GET_IS_WIDESCREEN", mruby__GRAPHICS__GET_IS_WIDESCREEN, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "GET_IS_HIDEF", mruby__GRAPHICS__GET_IS_HIDEF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xEFABC7722293DA7C", mruby__GRAPHICS___0xEFABC7722293DA7C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "SET_NIGHTVISION", mruby__GRAPHICS__SET_NIGHTVISION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x35FB78DC42B7BD21", mruby__GRAPHICS___0x35FB78DC42B7BD21, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_IS_NIGHTVISION_INACTIVE", mruby__GRAPHICS___IS_NIGHTVISION_INACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xEF398BEEE4EF45F9", mruby__GRAPHICS___0xEF398BEEE4EF45F9, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "SET_NOISEOVERIDE", mruby__GRAPHICS__SET_NOISEOVERIDE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "SET_NOISINESSOVERIDE", mruby__GRAPHICS__SET_NOISINESSOVERIDE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "GET_TEXTURE_RESOLUTION", mruby__GRAPHICS__GET_TEXTURE_RESOLUTION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "_0xE2892E7E55D7073A", mruby__GRAPHICS___0xE2892E7E55D7073A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "SET_FLASH", mruby__GRAPHICS__SET_FLASH, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_graphics, "_0x3669F1B198DCAA4F", mruby__GRAPHICS___0x3669F1B198DCAA4F, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_SET_BLACKOUT", mruby__GRAPHICS___SET_BLACKOUT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xC35A6D07C93802B2", mruby__GRAPHICS___0xC35A6D07C93802B2, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "CREATE_TRACKED_POINT", mruby__GRAPHICS__CREATE_TRACKED_POINT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "SET_TRACKED_POINT_INFO", mruby__GRAPHICS__SET_TRACKED_POINT_INFO, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_graphics, "IS_TRACKED_POINT_VISIBLE", mruby__GRAPHICS__IS_TRACKED_POINT_VISIBLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "DESTROY_TRACKED_POINT", mruby__GRAPHICS__DESTROY_TRACKED_POINT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xBE197EAA669238F4", mruby__GRAPHICS___0xBE197EAA669238F4, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_graphics, "_0x61F95E5BB3E0A8C6", mruby__GRAPHICS___0x61F95E5BB3E0A8C6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xAE51BC858F32BA66", mruby__GRAPHICS___0xAE51BC858F32BA66, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_graphics, "_0x649C97D52332341A", mruby__GRAPHICS___0x649C97D52332341A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x2C42340F916C5930", mruby__GRAPHICS___0x2C42340F916C5930, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x14FC5833464340A8", mruby__GRAPHICS___0x14FC5833464340A8, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x0218BA067D249DEA", mruby__GRAPHICS___0x0218BA067D249DEA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x1612C45F9E3E0D44", mruby__GRAPHICS___0x1612C45F9E3E0D44, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x5DEBD9C4DC995692", mruby__GRAPHICS___0x5DEBD9C4DC995692, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x6D955F6A9E0295B1", mruby__GRAPHICS___0x6D955F6A9E0295B1, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_graphics, "_0x302C91AB2D477F7E", mruby__GRAPHICS___0x302C91AB2D477F7E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x03FC694AE06C5A20", mruby__GRAPHICS___0x03FC694AE06C5A20, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xD2936CAB8B58FCBD", mruby__GRAPHICS___0xD2936CAB8B58FCBD, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_graphics, "_0x5F0F3F56635809EF", mruby__GRAPHICS___0x5F0F3F56635809EF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x5E9DAF5A20F15908", mruby__GRAPHICS___0x5E9DAF5A20F15908, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x36F6626459D91457", mruby__GRAPHICS___0x36F6626459D91457, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_SET_FAR_SHADOWS_SUPPRESSED", mruby__GRAPHICS___SET_FAR_SHADOWS_SUPPRESSED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x25FC3E33A31AD0C9", mruby__GRAPHICS___0x25FC3E33A31AD0C9, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xB11D94BC55F41932", mruby__GRAPHICS___0xB11D94BC55F41932, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x27CB772218215325", mruby__GRAPHICS___0x27CB772218215325, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x6DDBF9DFFC4AC080", mruby__GRAPHICS___0x6DDBF9DFFC4AC080, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xD39D13C9FEBF0511", mruby__GRAPHICS___0xD39D13C9FEBF0511, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x02AC28F3A01FA04A", mruby__GRAPHICS___0x02AC28F3A01FA04A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x0AE73D8DF3A762B2", mruby__GRAPHICS___0x0AE73D8DF3A762B2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xA51C4B86B71652AE", mruby__GRAPHICS___0xA51C4B86B71652AE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x312342E1A4874F3F", mruby__GRAPHICS___0x312342E1A4874F3F, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_graphics, "_0x2485D34E50A22E84", mruby__GRAPHICS___0x2485D34E50A22E84, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_graphics, "_0x12995F2E53FFA601", mruby__GRAPHICS___0x12995F2E53FFA601, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_graphics, "_0xDBAA5EC848BA2D46", mruby__GRAPHICS___0xDBAA5EC848BA2D46, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "_0xC0416B061F2B7E5E", mruby__GRAPHICS___0xC0416B061F2B7E5E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xB1BB03742917A5D6", mruby__GRAPHICS___0xB1BB03742917A5D6, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_graphics, "_0x9CFDD90B2B844BF7", mruby__GRAPHICS___0x9CFDD90B2B844BF7, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_graphics, "_0x06F761EA47C1D3ED", mruby__GRAPHICS___0x06F761EA47C1D3ED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xA4819F5E23E2FFAD", mruby__GRAPHICS___0xA4819F5E23E2FFAD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xA4664972A9B8F8BA", mruby__GRAPHICS___0xA4664972A9B8F8BA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "SET_SEETHROUGH", mruby__GRAPHICS__SET_SEETHROUGH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_IS_SEETHROUGH_ACTIVE", mruby__GRAPHICS___IS_SEETHROUGH_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xD7D0B00177485411", mruby__GRAPHICS___0xD7D0B00177485411, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "_0xB3C641F3630BF6DA", mruby__GRAPHICS___0xB3C641F3630BF6DA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xE59343E9E96529E7", mruby__GRAPHICS___0xE59343E9E96529E7, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xE63D7C6EECECB66B", mruby__GRAPHICS___0xE63D7C6EECECB66B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xE3E2C1B4C59DBC77", mruby__GRAPHICS___0xE3E2C1B4C59DBC77, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_TRANSITION_TO_BLURRED", mruby__GRAPHICS___TRANSITION_TO_BLURRED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_TRANSITION_FROM_BLURRED", mruby__GRAPHICS___TRANSITION_FROM_BLURRED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xDE81239437E8C5A8", mruby__GRAPHICS___0xDE81239437E8C5A8, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "IS_PARTICLE_FX_DELAYED_BLINK", mruby__GRAPHICS__IS_PARTICLE_FX_DELAYED_BLINK, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x7B226C785A52A0A9", mruby__GRAPHICS___0x7B226C785A52A0A9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_SET_FROZEN_RENDERING_DISABLED", mruby__GRAPHICS___SET_FROZEN_RENDERING_DISABLED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xEB3DAC2C86001E5E", mruby__GRAPHICS___0xEB3DAC2C86001E5E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xE1C8709406F2C41C", mruby__GRAPHICS___0xE1C8709406F2C41C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x851CD923176EBA7C", mruby__GRAPHICS___0x851CD923176EBA7C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xBA3D65906822BED5", mruby__GRAPHICS___0xBA3D65906822BED5, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_graphics, "_0x7AC24EAB6D74118D", mruby__GRAPHICS___0x7AC24EAB6D74118D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xBCEDB009461DA156", mruby__GRAPHICS___0xBCEDB009461DA156, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x27FEB5254759CDE3", mruby__GRAPHICS___0x27FEB5254759CDE3, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "START_PARTICLE_FX_NON_LOOPED_AT_COORD", mruby__GRAPHICS__START_PARTICLE_FX_NON_LOOPED_AT_COORD, MRB_ARGS_REQ(11));
  mrb_define_method(mrb, module_graphics, "_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2", mruby__GRAPHICS___START_PARTICLE_FX_NON_LOOPED_AT_COORD_2, MRB_ARGS_REQ(11));
  mrb_define_method(mrb, module_graphics, "START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE", mruby__GRAPHICS__START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE, MRB_ARGS_REQ(13));
  mrb_define_method(mrb, module_graphics, "_START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE_2", mruby__GRAPHICS___START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE_2, MRB_ARGS_REQ(13));
  mrb_define_method(mrb, module_graphics, "START_PARTICLE_FX_NON_LOOPED_ON_ENTITY", mruby__GRAPHICS__START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_graphics, "_START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_2", mruby__GRAPHICS___START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_2, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_graphics, "SET_PARTICLE_FX_NON_LOOPED_COLOUR", mruby__GRAPHICS__SET_PARTICLE_FX_NON_LOOPED_COLOUR, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_graphics, "SET_PARTICLE_FX_NON_LOOPED_ALPHA", mruby__GRAPHICS__SET_PARTICLE_FX_NON_LOOPED_ALPHA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_SET_PARTICLE_FX_CAM_INSIDE_VEHICLE", mruby__GRAPHICS___SET_PARTICLE_FX_CAM_INSIDE_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "START_PARTICLE_FX_LOOPED_AT_COORD", mruby__GRAPHICS__START_PARTICLE_FX_LOOPED_AT_COORD, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_graphics, "START_PARTICLE_FX_LOOPED_ON_PED_BONE", mruby__GRAPHICS__START_PARTICLE_FX_LOOPED_ON_PED_BONE, MRB_ARGS_REQ(13));
  mrb_define_method(mrb, module_graphics, "START_PARTICLE_FX_LOOPED_ON_ENTITY", mruby__GRAPHICS__START_PARTICLE_FX_LOOPED_ON_ENTITY, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_graphics, "_START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE", mruby__GRAPHICS___START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE, MRB_ARGS_REQ(13));
  mrb_define_method(mrb, module_graphics, "_START_PARTICLE_FX_LOOPED_ON_ENTITY_2", mruby__GRAPHICS___START_PARTICLE_FX_LOOPED_ON_ENTITY_2, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_graphics, "_START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE_2", mruby__GRAPHICS___START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE_2, MRB_ARGS_REQ(13));
  mrb_define_method(mrb, module_graphics, "STOP_PARTICLE_FX_LOOPED", mruby__GRAPHICS__STOP_PARTICLE_FX_LOOPED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "REMOVE_PARTICLE_FX", mruby__GRAPHICS__REMOVE_PARTICLE_FX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "REMOVE_PARTICLE_FX_FROM_ENTITY", mruby__GRAPHICS__REMOVE_PARTICLE_FX_FROM_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "REMOVE_PARTICLE_FX_IN_RANGE", mruby__GRAPHICS__REMOVE_PARTICLE_FX_IN_RANGE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_graphics, "DOES_PARTICLE_FX_LOOPED_EXIST", mruby__GRAPHICS__DOES_PARTICLE_FX_LOOPED_EXIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "SET_PARTICLE_FX_LOOPED_OFFSETS", mruby__GRAPHICS__SET_PARTICLE_FX_LOOPED_OFFSETS, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_graphics, "SET_PARTICLE_FX_LOOPED_EVOLUTION", mruby__GRAPHICS__SET_PARTICLE_FX_LOOPED_EVOLUTION, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_graphics, "SET_PARTICLE_FX_LOOPED_COLOUR", mruby__GRAPHICS__SET_PARTICLE_FX_LOOPED_COLOUR, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_graphics, "SET_PARTICLE_FX_LOOPED_ALPHA", mruby__GRAPHICS__SET_PARTICLE_FX_LOOPED_ALPHA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "SET_PARTICLE_FX_LOOPED_SCALE", mruby__GRAPHICS__SET_PARTICLE_FX_LOOPED_SCALE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "_SET_PARTICLE_FX_LOOPED_RANGE", mruby__GRAPHICS___SET_PARTICLE_FX_LOOPED_RANGE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "SET_PARTICLE_FX_CAM_INSIDE_VEHICLE", mruby__GRAPHICS__SET_PARTICLE_FX_CAM_INSIDE_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE", mruby__GRAPHICS__SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "SET_PARTICLE_FX_SHOOTOUT_BOAT", mruby__GRAPHICS__SET_PARTICLE_FX_SHOOTOUT_BOAT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "SET_PARTICLE_FX_BLOOD_SCALE", mruby__GRAPHICS__SET_PARTICLE_FX_BLOOD_SCALE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "ENABLE_CLOWN_BLOOD_VFX", mruby__GRAPHICS__ENABLE_CLOWN_BLOOD_VFX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "ENABLE_ALIEN_BLOOD_VFX", mruby__GRAPHICS__ENABLE_ALIEN_BLOOD_VFX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x27E32866E9A5C416", mruby__GRAPHICS___0x27E32866E9A5C416, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xBB90E12CAC1DAB25", mruby__GRAPHICS___0xBB90E12CAC1DAB25, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xCA4AE345A153D573", mruby__GRAPHICS___0xCA4AE345A153D573, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x54E22EA2C1956A8D", mruby__GRAPHICS___0x54E22EA2C1956A8D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x949F397A288B28B3", mruby__GRAPHICS___0x949F397A288B28B3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x9B079E5221D984D3", mruby__GRAPHICS___0x9B079E5221D984D3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_SET_PTFX_ASSET_NEXT_CALL", mruby__GRAPHICS___SET_PTFX_ASSET_NEXT_CALL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_SET_PTFX_ASSET_OLD_TO_NEW", mruby__GRAPHICS___SET_PTFX_ASSET_OLD_TO_NEW, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "_0x89C8553DD3274AAE", mruby__GRAPHICS___0x89C8553DD3274AAE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xA46B73FAA3460AE1", mruby__GRAPHICS___0xA46B73FAA3460AE1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xF78B803082D4386F", mruby__GRAPHICS___0xF78B803082D4386F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "WASH_DECALS_IN_RANGE", mruby__GRAPHICS__WASH_DECALS_IN_RANGE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_graphics, "WASH_DECALS_FROM_VEHICLE", mruby__GRAPHICS__WASH_DECALS_FROM_VEHICLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "FADE_DECALS_IN_RANGE", mruby__GRAPHICS__FADE_DECALS_IN_RANGE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_graphics, "REMOVE_DECALS_IN_RANGE", mruby__GRAPHICS__REMOVE_DECALS_IN_RANGE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_graphics, "REMOVE_DECALS_FROM_OBJECT", mruby__GRAPHICS__REMOVE_DECALS_FROM_OBJECT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "REMOVE_DECALS_FROM_OBJECT_FACING", mruby__GRAPHICS__REMOVE_DECALS_FROM_OBJECT_FACING, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_graphics, "REMOVE_DECALS_FROM_VEHICLE", mruby__GRAPHICS__REMOVE_DECALS_FROM_VEHICLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "ADD_DECAL", mruby__GRAPHICS__ADD_DECAL, MRB_ARGS_REQ(20));
  mrb_define_method(mrb, module_graphics, "ADD_PETROL_DECAL", mruby__GRAPHICS__ADD_PETROL_DECAL, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_graphics, "_0x99AC7F0D8B9C893D", mruby__GRAPHICS___0x99AC7F0D8B9C893D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x967278682CB6967A", mruby__GRAPHICS___0x967278682CB6967A, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_graphics, "_0x0A123435A26C36CD", mruby__GRAPHICS___0x0A123435A26C36CD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "REMOVE_DECAL", mruby__GRAPHICS__REMOVE_DECAL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "IS_DECAL_ALIVE", mruby__GRAPHICS__IS_DECAL_ALIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "GET_DECAL_WASH_LEVEL", mruby__GRAPHICS__GET_DECAL_WASH_LEVEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xD9454B5752C857DC", mruby__GRAPHICS___0xD9454B5752C857DC, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x27CFB1B1E078CB2D", mruby__GRAPHICS___0x27CFB1B1E078CB2D, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x4B5CFC83122DF602", mruby__GRAPHICS___0x4B5CFC83122DF602, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x2F09F7976C512404", mruby__GRAPHICS___0x2F09F7976C512404, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_graphics, "_0xB7ED70C49521A61D", mruby__GRAPHICS___0xB7ED70C49521A61D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "MOVE_VEHICLE_DECALS", mruby__GRAPHICS__MOVE_VEHICLE_DECALS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "_ADD_CLAN_DECAL_TO_VEHICLE", mruby__GRAPHICS___ADD_CLAN_DECAL_TO_VEHICLE, MRB_ARGS_REQ(15));
  mrb_define_method(mrb, module_graphics, "_0xD2300034310557E4", mruby__GRAPHICS___0xD2300034310557E4, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "_0xFE26117A5841B2FF", mruby__GRAPHICS___0xFE26117A5841B2FF, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "_HAS_VEHICLE_GOT_DECAL", mruby__GRAPHICS___HAS_VEHICLE_GOT_DECAL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "_0x0E4299C549F0D1F1", mruby__GRAPHICS___0x0E4299C549F0D1F1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x02369D5C8A51FDCF", mruby__GRAPHICS___0x02369D5C8A51FDCF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x46D1A61A21F566FC", mruby__GRAPHICS___0x46D1A61A21F566FC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x2A2A52824DB96700", mruby__GRAPHICS___0x2A2A52824DB96700, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x1600FD8CF72EBC12", mruby__GRAPHICS___0x1600FD8CF72EBC12, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xEFB55E7C25D3B3BE", mruby__GRAPHICS___0xEFB55E7C25D3B3BE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xA44FF770DFBC5DAE", mruby__GRAPHICS___0xA44FF770DFBC5DAE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "DISABLE_VEHICLE_DISTANTLIGHTS", mruby__GRAPHICS__DISABLE_VEHICLE_DISTANTLIGHTS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x03300B57FCAC6DDB", mruby__GRAPHICS___0x03300B57FCAC6DDB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x98EDF76A7271E4F2", mruby__GRAPHICS___0x98EDF76A7271E4F2, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_SET_FORCE_PED_FOOTSTEPS_TRACKS", mruby__GRAPHICS___SET_FORCE_PED_FOOTSTEPS_TRACKS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_SET_FORCE_VEHICLE_TRAILS", mruby__GRAPHICS___SET_FORCE_VEHICLE_TRAILS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xD7021272EB0A451E", mruby__GRAPHICS___0xD7021272EB0A451E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "SET_TIMECYCLE_MODIFIER", mruby__GRAPHICS__SET_TIMECYCLE_MODIFIER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "SET_TIMECYCLE_MODIFIER_STRENGTH", mruby__GRAPHICS__SET_TIMECYCLE_MODIFIER_STRENGTH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "SET_TRANSITION_TIMECYCLE_MODIFIER", mruby__GRAPHICS__SET_TRANSITION_TIMECYCLE_MODIFIER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "_0x1CBA05AE7BD7EE05", mruby__GRAPHICS___0x1CBA05AE7BD7EE05, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "CLEAR_TIMECYCLE_MODIFIER", mruby__GRAPHICS__CLEAR_TIMECYCLE_MODIFIER, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "GET_TIMECYCLE_MODIFIER_INDEX", mruby__GRAPHICS__GET_TIMECYCLE_MODIFIER_INDEX, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x459FD2C8D0AB78BC", mruby__GRAPHICS___0x459FD2C8D0AB78BC, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "PUSH_TIMECYCLE_MODIFIER", mruby__GRAPHICS__PUSH_TIMECYCLE_MODIFIER, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "POP_TIMECYCLE_MODIFIER", mruby__GRAPHICS__POP_TIMECYCLE_MODIFIER, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xBBF327DED94E4DEB", mruby__GRAPHICS___0xBBF327DED94E4DEB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xBDEB86F4D5809204", mruby__GRAPHICS___0xBDEB86F4D5809204, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xBF59707B3E5ED531", mruby__GRAPHICS___0xBF59707B3E5ED531, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x15E33297C3E8DC60", mruby__GRAPHICS___0x15E33297C3E8DC60, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x5096FD9CCB49056D", mruby__GRAPHICS___0x5096FD9CCB49056D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x92CCC17A7A2285DA", mruby__GRAPHICS___0x92CCC17A7A2285DA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xBB0527EC6341496D", mruby__GRAPHICS___0xBB0527EC6341496D, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x2C328AF17210F009", mruby__GRAPHICS___0x2C328AF17210F009, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x2BF72AD5B41AA739", mruby__GRAPHICS___0x2BF72AD5B41AA739, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "REQUEST_SCALEFORM_MOVIE", mruby__GRAPHICS__REQUEST_SCALEFORM_MOVIE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "REQUEST_SCALEFORM_MOVIE_INSTANCE", mruby__GRAPHICS__REQUEST_SCALEFORM_MOVIE_INSTANCE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_REQUEST_SCALEFORM_MOVIE3", mruby__GRAPHICS___REQUEST_SCALEFORM_MOVIE3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "HAS_SCALEFORM_MOVIE_LOADED", mruby__GRAPHICS__HAS_SCALEFORM_MOVIE_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x0C1C5D756FB5F337", mruby__GRAPHICS___0x0C1C5D756FB5F337, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT", mruby__GRAPHICS__HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME", mruby__GRAPHICS__SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "DRAW_SCALEFORM_MOVIE", mruby__GRAPHICS__DRAW_SCALEFORM_MOVIE, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_graphics, "DRAW_SCALEFORM_MOVIE_FULLSCREEN", mruby__GRAPHICS__DRAW_SCALEFORM_MOVIE_FULLSCREEN, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_graphics, "DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED", mruby__GRAPHICS__DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_graphics, "DRAW_SCALEFORM_MOVIE_3D", mruby__GRAPHICS__DRAW_SCALEFORM_MOVIE_3D, MRB_ARGS_REQ(14));
  mrb_define_method(mrb, module_graphics, "_DRAW_SCALEFORM_MOVIE_3D_NON_ADDITIVE", mruby__GRAPHICS___DRAW_SCALEFORM_MOVIE_3D_NON_ADDITIVE, MRB_ARGS_REQ(14));
  mrb_define_method(mrb, module_graphics, "CALL_SCALEFORM_MOVIE_METHOD", mruby__GRAPHICS__CALL_SCALEFORM_MOVIE_METHOD, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "_CALL_SCALEFORM_MOVIE_FUNCTION_FLOAT_PARAMS", mruby__GRAPHICS___CALL_SCALEFORM_MOVIE_FUNCTION_FLOAT_PARAMS, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_graphics, "_CALL_SCALEFORM_MOVIE_FUNCTION_STRING_PARAMS", mruby__GRAPHICS___CALL_SCALEFORM_MOVIE_FUNCTION_STRING_PARAMS, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_graphics, "_CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS", mruby__GRAPHICS___CALL_SCALEFORM_MOVIE_FUNCTION_MIXED_PARAMS, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_graphics, "_PUSH_SCALEFORM_MOVIE_FUNCTION_FROM_HUD_COMPONENT", mruby__GRAPHICS___PUSH_SCALEFORM_MOVIE_FUNCTION_FROM_HUD_COMPONENT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "_PUSH_SCALEFORM_MOVIE_FUNCTION", mruby__GRAPHICS___PUSH_SCALEFORM_MOVIE_FUNCTION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_graphics, "_0xAB58C27C2E6123C6", mruby__GRAPHICS___0xAB58C27C2E6123C6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xB9449845F73F5E9C", mruby__GRAPHICS___0xB9449845F73F5E9C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_POP_SCALEFORM_MOVIE_FUNCTION_VOID", mruby__GRAPHICS___POP_SCALEFORM_MOVIE_FUNCTION_VOID, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_POP_SCALEFORM_MOVIE_FUNCTION", mruby__GRAPHICS___POP_SCALEFORM_MOVIE_FUNCTION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x768FF8961BA904D6", mruby__GRAPHICS___0x768FF8961BA904D6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x2DE7EFA66B906036", mruby__GRAPHICS___0x2DE7EFA66B906036, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "SITTING_TV", mruby__GRAPHICS__SITTING_TV, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT", mruby__GRAPHICS___PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_INT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_FLOAT", mruby__GRAPHICS___PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_FLOAT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL", mruby__GRAPHICS___PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_BOOL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_BEGIN_TEXT_COMPONENT", mruby__GRAPHICS___BEGIN_TEXT_COMPONENT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_END_TEXT_COMPONENT", mruby__GRAPHICS___END_TEXT_COMPONENT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xAE4E8157D9ECF087", mruby__GRAPHICS___0xAE4E8157D9ECF087, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING", mruby__GRAPHICS___PUSH_SCALEFORM_MOVIE_FUNCTION_PARAMETER_STRING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xE83A3E3557A56640", mruby__GRAPHICS___0xE83A3E3557A56640, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x5E657EF1099EDD65", mruby__GRAPHICS___0x5E657EF1099EDD65, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xEC52C631A1831C03", mruby__GRAPHICS___0xEC52C631A1831C03, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_REQUEST_HUD_SCALEFORM", mruby__GRAPHICS___REQUEST_HUD_SCALEFORM, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_HAS_HUD_SCALEFORM_LOADED", mruby__GRAPHICS___HAS_HUD_SCALEFORM_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xF44A5456AC3F4F97", mruby__GRAPHICS___0xF44A5456AC3F4F97, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xD1C7CB175E012964", mruby__GRAPHICS___0xD1C7CB175E012964, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "SET_TV_CHANNEL", mruby__GRAPHICS__SET_TV_CHANNEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "GET_TV_CHANNEL", mruby__GRAPHICS__GET_TV_CHANNEL, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "SET_TV_VOLUME", mruby__GRAPHICS__SET_TV_VOLUME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "GET_TV_VOLUME", mruby__GRAPHICS__GET_TV_VOLUME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "DRAW_TV_CHANNEL", mruby__GRAPHICS__DRAW_TV_CHANNEL, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_graphics, "_0xF7B38B8305F1FE8B", mruby__GRAPHICS___0xF7B38B8305F1FE8B, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_graphics, "_0xBEB3D46BB7F043C0", mruby__GRAPHICS___0xBEB3D46BB7F043C0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x0AD973CA1E077B60", mruby__GRAPHICS___0x0AD973CA1E077B60, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x74C180030FDE4B69", mruby__GRAPHICS___0x74C180030FDE4B69, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xD1C55B110E4DF534", mruby__GRAPHICS___0xD1C55B110E4DF534, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "ENABLE_MOVIE_SUBTITLES", mruby__GRAPHICS__ENABLE_MOVIE_SUBTITLES, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xD3A10FC7FD8D98CD", mruby__GRAPHICS___0xD3A10FC7FD8D98CD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xF1CEA8A4198D8E9A", mruby__GRAPHICS___0xF1CEA8A4198D8E9A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x98C4FE6EC34154CA", mruby__GRAPHICS___0x98C4FE6EC34154CA, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_graphics, "_0x7A42B2E236E71415", mruby__GRAPHICS___0x7A42B2E236E71415, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0x108BE26959A9D9BB", mruby__GRAPHICS___0x108BE26959A9D9BB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0xA356990E161C9E65", mruby__GRAPHICS___0xA356990E161C9E65, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_0x1C4FC5752BCD8E48", mruby__GRAPHICS___0x1C4FC5752BCD8E48, MRB_ARGS_REQ(13));
  mrb_define_method(mrb, module_graphics, "_0x5CE62918F8D703C7", mruby__GRAPHICS___0x5CE62918F8D703C7, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_graphics, "_START_SCREEN_EFFECT", mruby__GRAPHICS___START_SCREEN_EFFECT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_graphics, "_STOP_SCREEN_EFFECT", mruby__GRAPHICS___STOP_SCREEN_EFFECT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_GET_SCREEN_EFFECT_IS_ACTIVE", mruby__GRAPHICS___GET_SCREEN_EFFECT_IS_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_graphics, "_STOP_ALL_SCREEN_EFFECTS", mruby__GRAPHICS___STOP_ALL_SCREEN_EFFECTS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_graphics, "_0xD2209BE128B5418C", mruby__GRAPHICS___0xD2209BE128B5418C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "STAT_CLEAR_SLOT_FOR_RELOAD", mruby__STATS__STAT_CLEAR_SLOT_FOR_RELOAD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "STAT_LOAD", mruby__STATS__STAT_LOAD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "STAT_SAVE", mruby__STATS__STAT_SAVE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "_0x5688585E6D563CD8", mruby__STATS___0x5688585E6D563CD8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "STAT_LOAD_PENDING", mruby__STATS__STAT_LOAD_PENDING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "STAT_SAVE_PENDING", mruby__STATS__STAT_SAVE_PENDING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "STAT_SAVE_PENDING_OR_REQUESTED", mruby__STATS__STAT_SAVE_PENDING_OR_REQUESTED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "STAT_DELETE_SLOT", mruby__STATS__STAT_DELETE_SLOT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "STAT_SLOT_IS_LOADED", mruby__STATS__STAT_SLOT_IS_LOADED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x7F2C4CDF2E82DF4C", mruby__STATS___0x7F2C4CDF2E82DF4C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0xE496A53BA5F50A56", mruby__STATS___0xE496A53BA5F50A56, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0xF434A10BA01C37D0", mruby__STATS___0xF434A10BA01C37D0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x7E6946F68A38B74F", mruby__STATS___0x7E6946F68A38B74F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0xA8733668D1047B51", mruby__STATS___0xA8733668D1047B51, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0xECB41AC6AB754401", mruby__STATS___0xECB41AC6AB754401, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0x9B4BD21D69B1E609", mruby__STATS___0x9B4BD21D69B1E609, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0xC0E0D686DDFC6EAE", mruby__STATS___0xC0E0D686DDFC6EAE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "STAT_SET_INT", mruby__STATS__STAT_SET_INT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "STAT_SET_FLOAT", mruby__STATS__STAT_SET_FLOAT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "STAT_SET_BOOL", mruby__STATS__STAT_SET_BOOL, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "STAT_SET_GXT_LABEL", mruby__STATS__STAT_SET_GXT_LABEL, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "STAT_SET_STRING", mruby__STATS__STAT_SET_STRING, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "STAT_SET_POS", mruby__STATS__STAT_SET_POS, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_stats, "STAT_SET_MASKED_INT", mruby__STATS__STAT_SET_MASKED_INT, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_stats, "STAT_SET_USER_ID", mruby__STATS__STAT_SET_USER_ID, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "STAT_SET_CURRENT_POSIX_TIME", mruby__STATS__STAT_SET_CURRENT_POSIX_TIME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_stats, "STAT_GET_STRING", mruby__STATS__STAT_GET_STRING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_stats, "STAT_GET_USER_ID", mruby__STATS__STAT_GET_USER_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "STAT_GET_LICENSE_PLATE", mruby__STATS__STAT_GET_LICENSE_PLATE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "STAT_SET_LICENSE_PLATE", mruby__STATS__STAT_SET_LICENSE_PLATE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_stats, "STAT_INCREMENT", mruby__STATS__STAT_INCREMENT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_stats, "_0x5A556B229A169402", mruby__STATS___0x5A556B229A169402, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0xB1D2BB1E1631F5B1", mruby__STATS___0xB1D2BB1E1631F5B1, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0x26D7399B9587FE89", mruby__STATS___0x26D7399B9587FE89, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0xA78B8FA58200DA56", mruby__STATS___0xA78B8FA58200DA56, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0xE0E854F5280FB769", mruby__STATS___0xE0E854F5280FB769, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0xF2D4B2FE415AAFC3", mruby__STATS___0xF2D4B2FE415AAFC3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x7583B4BE4C5A41B5", mruby__STATS___0x7583B4BE4C5A41B5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x2CE056FF3723F00B", mruby__STATS___0x2CE056FF3723F00B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_STAT_SET_PROFILE_SETTING", mruby__STATS___STAT_SET_PROFILE_SETTING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_stats, "_0xF4D8E7AC2A27758C", mruby__STATS___0xF4D8E7AC2A27758C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x94F12ABF9C79E339", mruby__STATS___0x94F12ABF9C79E339, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x80C75307B1C42837", mruby__STATS___0x80C75307B1C42837, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_stats, "_0x61E111E323419E07", mruby__STATS___0x61E111E323419E07, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_stats, "_0xC4BB08EE7907471E", mruby__STATS___0xC4BB08EE7907471E, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_stats, "_0xD16C2AD6B8E32854", mruby__STATS___0xD16C2AD6B8E32854, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_stats, "STAT_GET_BOOL_MASKED", mruby__STATS__STAT_GET_BOOL_MASKED, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "STAT_SET_BOOL_MASKED", mruby__STATS__STAT_SET_BOOL_MASKED, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_stats, "_0x5009DFD741329729", mruby__STATS___0x5009DFD741329729, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_stats, "PLAYSTATS_NPC_INVITE", mruby__STATS__PLAYSTATS_NPC_INVITE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "PLAYSTATS_AWARD_XP", mruby__STATS__PLAYSTATS_AWARD_XP, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "PLAYSTATS_RANK_UP", mruby__STATS__PLAYSTATS_RANK_UP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x098760C7461724CD", mruby__STATS___0x098760C7461724CD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0xA071E0ED98F91286", mruby__STATS___0xA071E0ED98F91286, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_stats, "_0xC5BE134EC7BA96A0", mruby__STATS___0xC5BE134EC7BA96A0, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_stats, "PLAYSTATS_MISSION_STARTED", mruby__STATS__PLAYSTATS_MISSION_STARTED, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_stats, "PLAYSTATS_MISSION_OVER", mruby__STATS__PLAYSTATS_MISSION_OVER, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_stats, "PLAYSTATS_MISSION_CHECKPOINT", mruby__STATS__PLAYSTATS_MISSION_CHECKPOINT, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_stats, "_0x71862B1D855F32E1", mruby__STATS___0x71862B1D855F32E1, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_stats, "_0x121FB4DDDC2D5291", mruby__STATS___0x121FB4DDDC2D5291, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_stats, "PLAYSTATS_RACE_CHECKPOINT", mruby__STATS__PLAYSTATS_RACE_CHECKPOINT, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_stats, "PLAYSTATS_MATCH_STARTED", mruby__STATS__PLAYSTATS_MATCH_STARTED, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_stats, "PLAYSTATS_SHOP_ITEM", mruby__STATS__PLAYSTATS_SHOP_ITEM, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_stats, "_0x1CAE5D2E3F9A07F0", mruby__STATS___0x1CAE5D2E3F9A07F0, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_stats, "_0xAFC7E5E075A96F46", mruby__STATS___0xAFC7E5E075A96F46, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "_0xCB00196B31C39EB1", mruby__STATS___0xCB00196B31C39EB1, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_stats, "_0x2B69F5074C894811", mruby__STATS___0x2B69F5074C894811, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_stats, "_0x7EEC2A316C250073", mruby__STATS___0x7EEC2A316C250073, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "_0xADDD1C754E2E2914", mruby__STATS___0xADDD1C754E2E2914, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_stats, "_0x79AB33F0FBFAC40C", mruby__STATS___0x79AB33F0FBFAC40C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0xDDF24D535060F811", mruby__STATS___0xDDF24D535060F811, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_stats, "PLAYSTATS_FRIEND_ACTIVITY", mruby__STATS__PLAYSTATS_FRIEND_ACTIVITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_stats, "PLAYSTATS_ODDJOB_DONE", mruby__STATS__PLAYSTATS_ODDJOB_DONE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "PLAYSTATS_PROP_CHANGE", mruby__STATS__PLAYSTATS_PROP_CHANGE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_stats, "PLAYSTATS_CLOTH_CHANGE", mruby__STATS__PLAYSTATS_CLOTH_CHANGE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_stats, "_0xE95C8A1875A02CA4", mruby__STATS___0xE95C8A1875A02CA4, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "PLAYSTATS_CHEAT_APPLIED", mruby__STATS__PLAYSTATS_CHEAT_APPLIED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x5DA3A8DE8CB6226F", mruby__STATS___0x5DA3A8DE8CB6226F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0xD1032E482629049E", mruby__STATS___0xD1032E482629049E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0xF4FF020A08BC8863", mruby__STATS___0xF4FF020A08BC8863, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_stats, "_0x46326E13DA4E0546", mruby__STATS___0x46326E13DA4E0546, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "LEADERBOARDS_GET_NUMBER_OF_COLUMNS", mruby__STATS__LEADERBOARDS_GET_NUMBER_OF_COLUMNS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_stats, "LEADERBOARDS_GET_COLUMN_ID", mruby__STATS__LEADERBOARDS_GET_COLUMN_ID, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "LEADERBOARDS_GET_COLUMN_TYPE", mruby__STATS__LEADERBOARDS_GET_COLUMN_TYPE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "LEADERBOARDS_READ_CLEAR_ALL", mruby__STATS__LEADERBOARDS_READ_CLEAR_ALL, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "LEADERBOARDS_READ_CLEAR", mruby__STATS__LEADERBOARDS_READ_CLEAR, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "LEADERBOARDS_READ_PENDING", mruby__STATS__LEADERBOARDS_READ_PENDING, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "_0xA31FD15197B192BD", mruby__STATS___0xA31FD15197B192BD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "LEADERBOARDS_READ_SUCCESSFUL", mruby__STATS__LEADERBOARDS_READ_SUCCESSFUL, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "LEADERBOARDS2_READ_BY_RANK", mruby__STATS__LEADERBOARDS2_READ_BY_RANK, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "LEADERBOARDS2_READ_BY_SCORE_INT", mruby__STATS__LEADERBOARDS2_READ_BY_SCORE_INT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "LEADERBOARDS2_READ_BY_SCORE_FLOAT", mruby__STATS__LEADERBOARDS2_READ_BY_SCORE_FLOAT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "_0xA0F93D5465B3094D", mruby__STATS___0xA0F93D5465B3094D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x71B008056E5692D6", mruby__STATS___0x71B008056E5692D6, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0x88578F6EC36B4A3A", mruby__STATS___0x88578F6EC36B4A3A, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_stats, "_0x38491439B6BA7F7D", mruby__STATS___0x38491439B6BA7F7D, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_stats, "LEADERBOARDS2_WRITE_DATA", mruby__STATS__LEADERBOARDS2_WRITE_DATA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x0BCA1D2C47B0D269", mruby__STATS___0x0BCA1D2C47B0D269, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "_0x2E65248609523599", mruby__STATS___0x2E65248609523599, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "LEADERBOARDS_CACHE_DATA_ROW", mruby__STATS__LEADERBOARDS_CACHE_DATA_ROW, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "LEADERBOARDS_CLEAR_CACHE_DATA", mruby__STATS__LEADERBOARDS_CLEAR_CACHE_DATA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0x8EC74CEB042E7CFF", mruby__STATS___0x8EC74CEB042E7CFF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "LEADERBOARDS_GET_CACHE_EXISTS", mruby__STATS__LEADERBOARDS_GET_CACHE_EXISTS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "LEADERBOARDS_GET_CACHE_TIME", mruby__STATS__LEADERBOARDS_GET_CACHE_TIME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x58A651CD201D89AD", mruby__STATS___0x58A651CD201D89AD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x11FF1C80276097ED", mruby__STATS___0x11FF1C80276097ED, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "_0x30A6614C1F7799B8", mruby__STATS___0x30A6614C1F7799B8, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_stats, "_0x5EAD2BF6484852E4", mruby__STATS___0x5EAD2BF6484852E4, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0xC141B8917E0017EC", mruby__STATS___0xC141B8917E0017EC, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0xB475F27C6A994D65", mruby__STATS___0xB475F27C6A994D65, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0xF1A1803D3476F215", mruby__STATS___0xF1A1803D3476F215, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x38BAAA5DD4C9D19F", mruby__STATS___0x38BAAA5DD4C9D19F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x55384438FC55AD8E", mruby__STATS___0x55384438FC55AD8E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x723C1CE13FBFDB67", mruby__STATS___0x723C1CE13FBFDB67, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_stats, "_0x0D01D20616FC73FB", mruby__STATS___0x0D01D20616FC73FB, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_stats, "_0x428EAF89E24F6C36", mruby__STATS___0x428EAF89E24F6C36, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_stats, "_0x047CBED6F6F8B63C", mruby__STATS___0x047CBED6F6F8B63C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0x6F361B8889A792A3", mruby__STATS___0x6F361B8889A792A3, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0xC847B43F369AC0B5", mruby__STATS___0xC847B43F369AC0B5, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0xA5C80D8E768A9E66", mruby__STATS___0xA5C80D8E768A9E66, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x9A62EC95AE10E011", mruby__STATS___0x9A62EC95AE10E011, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0x4C89FE2BDEB3F169", mruby__STATS___0x4C89FE2BDEB3F169, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0xC6E0E2616A7576BB", mruby__STATS___0xC6E0E2616A7576BB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0x5BD5F255321C4AAF", mruby__STATS___0x5BD5F255321C4AAF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0xC70DDCE56D0D3A99", mruby__STATS___0xC70DDCE56D0D3A99, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0x886913BBEACA68C1", mruby__STATS___0x886913BBEACA68C1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x4FEF53183C3C6414", mruby__STATS___0x4FEF53183C3C6414, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0x567384DFA67029E6", mruby__STATS___0x567384DFA67029E6, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0xCE5AA445ABA8DEE0", mruby__STATS___0xCE5AA445ABA8DEE0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0x98E2BC1CA26287C3", mruby__STATS___0x98E2BC1CA26287C3, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0x629526ABA383BCAA", mruby__STATS___0x629526ABA383BCAA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0xB3DA2606774A8E2D", mruby__STATS___0xB3DA2606774A8E2D, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_stats, "_0xDAC073C7901F9E15", mruby__STATS___0xDAC073C7901F9E15, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_stats, "_0xF6792800AC95350D", mruby__STATS___0xF6792800AC95350D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_brain, "ADD_SCRIPT_TO_RANDOM_PED", mruby__BRAIN__ADD_SCRIPT_TO_RANDOM_PED, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_brain, "REGISTER_OBJECT_SCRIPT_BRAIN", mruby__BRAIN__REGISTER_OBJECT_SCRIPT_BRAIN, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_brain, "IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE", mruby__BRAIN__IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_brain, "REGISTER_WORLD_POINT_SCRIPT_BRAIN", mruby__BRAIN__REGISTER_WORLD_POINT_SCRIPT_BRAIN, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_brain, "IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE", mruby__BRAIN__IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_brain, "ENABLE_SCRIPT_BRAIN_SET", mruby__BRAIN__ENABLE_SCRIPT_BRAIN_SET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_brain, "DISABLE_SCRIPT_BRAIN_SET", mruby__BRAIN__DISABLE_SCRIPT_BRAIN_SET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_brain, "_0x0B40ED49D7D6FF84", mruby__BRAIN___0x0B40ED49D7D6FF84, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_brain, "_0x4D953DF78EBF8158", mruby__BRAIN___0x4D953DF78EBF8158, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_brain, "_0x6D6840CEE8845831", mruby__BRAIN___0x6D6840CEE8845831, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_brain, "_0x6E91B04E08773030", mruby__BRAIN___0x6E91B04E08773030, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "CREATE_MOBILE_PHONE", mruby__MOBILE__CREATE_MOBILE_PHONE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "DESTROY_MOBILE_PHONE", mruby__MOBILE__DESTROY_MOBILE_PHONE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_mobile, "SET_MOBILE_PHONE_SCALE", mruby__MOBILE__SET_MOBILE_PHONE_SCALE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "SET_MOBILE_PHONE_ROTATION", mruby__MOBILE__SET_MOBILE_PHONE_ROTATION, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_mobile, "SET_MOBILE_PHONE_POSITION", mruby__MOBILE__SET_MOBILE_PHONE_POSITION, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_mobile, "SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN", mruby__MOBILE__SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "CAN_PHONE_BE_SEEN_ON_SCREEN", mruby__MOBILE__CAN_PHONE_BE_SEEN_ON_SCREEN, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_mobile, "_MOVE_FINGER", mruby__MOBILE___MOVE_FINGER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "_SET_PHONE_LEAN", mruby__MOBILE___SET_PHONE_LEAN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "CELL_CAM_ACTIVATE", mruby__MOBILE__CELL_CAM_ACTIVATE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_mobile, "_0x015C49A93E3E086E", mruby__MOBILE___0x015C49A93E3E086E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "_0xA2CCBE62CD4C91A4", mruby__MOBILE___0xA2CCBE62CD4C91A4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "_0x1B0B4AEED5B9B41C", mruby__MOBILE___0x1B0B4AEED5B9B41C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "_0x53F4892D18EC90A4", mruby__MOBILE___0x53F4892D18EC90A4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "_0x3117D84EFA60F77B", mruby__MOBILE___0x3117D84EFA60F77B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "_0x15E69E2802C24B8D", mruby__MOBILE___0x15E69E2802C24B8D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "_0xAC2890471901861C", mruby__MOBILE___0xAC2890471901861C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "_0xD6ADE981781FCA09", mruby__MOBILE___0xD6ADE981781FCA09, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "_0xF1E22DC13F5EEBAD", mruby__MOBILE___0xF1E22DC13F5EEBAD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "_0x466DA42C89865553", mruby__MOBILE___0x466DA42C89865553, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK", mruby__MOBILE__CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "GET_MOBILE_PHONE_RENDER_ID", mruby__MOBILE__GET_MOBILE_PHONE_RENDER_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "_0xBD4D7EAF8A30F637", mruby__MOBILE___0xBD4D7EAF8A30F637, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_mobile, "_0x247F0F73A182EA0B", mruby__MOBILE___0x247F0F73A182EA0B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_app, "APP_DATA_VALID", mruby__APP__APP_DATA_VALID, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_app, "APP_GET_INT", mruby__APP__APP_GET_INT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_app, "APP_GET_FLOAT", mruby__APP__APP_GET_FLOAT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_app, "APP_GET_STRING", mruby__APP__APP_GET_STRING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_app, "APP_SET_INT", mruby__APP__APP_SET_INT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_app, "APP_SET_FLOAT", mruby__APP__APP_SET_FLOAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_app, "APP_SET_STRING", mruby__APP__APP_SET_STRING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_app, "APP_SET_APP", mruby__APP__APP_SET_APP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_app, "APP_SET_BLOCK", mruby__APP__APP_SET_BLOCK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_app, "APP_CLEAR_BLOCK", mruby__APP__APP_CLEAR_BLOCK, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_app, "APP_CLOSE_APP", mruby__APP__APP_CLOSE_APP, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_app, "APP_CLOSE_BLOCK", mruby__APP__APP_CLOSE_BLOCK, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_app, "APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT", mruby__APP__APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_app, "APP_HAS_SYNCED_DATA", mruby__APP__APP_HAS_SYNCED_DATA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_app, "APP_SAVE_DATA", mruby__APP__APP_SAVE_DATA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_app, "APP_GET_DELETED_FILE_STATUS", mruby__APP__APP_GET_DELETED_FILE_STATUS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_app, "APP_DELETE_APP_DATA", mruby__APP__APP_DELETE_APP_DATA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_time, "SET_CLOCK_TIME", mruby__TIME__SET_CLOCK_TIME, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_time, "PAUSE_CLOCK", mruby__TIME__PAUSE_CLOCK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_time, "ADVANCE_CLOCK_TIME_TO", mruby__TIME__ADVANCE_CLOCK_TIME_TO, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_time, "ADD_TO_CLOCK_TIME", mruby__TIME__ADD_TO_CLOCK_TIME, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_time, "GET_CLOCK_HOURS", mruby__TIME__GET_CLOCK_HOURS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_time, "GET_CLOCK_MINUTES", mruby__TIME__GET_CLOCK_MINUTES, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_time, "GET_CLOCK_SECONDS", mruby__TIME__GET_CLOCK_SECONDS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_time, "SET_CLOCK_DATE", mruby__TIME__SET_CLOCK_DATE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_time, "GET_CLOCK_DAY_OF_WEEK", mruby__TIME__GET_CLOCK_DAY_OF_WEEK, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_time, "GET_CLOCK_DAY_OF_MONTH", mruby__TIME__GET_CLOCK_DAY_OF_MONTH, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_time, "GET_CLOCK_MONTH", mruby__TIME__GET_CLOCK_MONTH, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_time, "GET_CLOCK_YEAR", mruby__TIME__GET_CLOCK_YEAR, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_time, "GET_MILLISECONDS_PER_GAME_MINUTE", mruby__TIME__GET_MILLISECONDS_PER_GAME_MINUTE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_pathfind, "SET_ROADS_IN_AREA", mruby__PATHFIND__SET_ROADS_IN_AREA, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_pathfind, "SET_ROADS_IN_ANGLED_AREA", mruby__PATHFIND__SET_ROADS_IN_ANGLED_AREA, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_pathfind, "SET_PED_PATHS_IN_AREA", mruby__PATHFIND__SET_PED_PATHS_IN_AREA, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_pathfind, "GET_NTH_CLOSEST_VEHICLE_NODE_ID", mruby__PATHFIND__GET_NTH_CLOSEST_VEHICLE_NODE_ID, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_pathfind, "IS_VEHICLE_NODE_ID_VALID", mruby__PATHFIND__IS_VEHICLE_NODE_ID_VALID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_pathfind, "_GET_SUPPORTS_GPS_ROUTE_FLAG", mruby__PATHFIND___GET_SUPPORTS_GPS_ROUTE_FLAG, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_pathfind, "_GET_IS_SLOW_ROAD_FLAG", mruby__PATHFIND___GET_IS_SLOW_ROAD_FLAG, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_pathfind, "GET_CLOSEST_ROAD", mruby__PATHFIND__GET_CLOSEST_ROAD, MRB_ARGS_REQ(11));
  mrb_define_method(mrb, module_pathfind, "LOAD_ALL_PATH_NODES", mruby__PATHFIND__LOAD_ALL_PATH_NODES, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_pathfind, "_0x228E5C6AD4D74BFD", mruby__PATHFIND___0x228E5C6AD4D74BFD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_pathfind, "_0xF7B79A50B905A30D", mruby__PATHFIND___0xF7B79A50B905A30D, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_pathfind, "_0x07FB139B592FA687", mruby__PATHFIND___0x07FB139B592FA687, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_pathfind, "SET_ROADS_BACK_TO_ORIGINAL", mruby__PATHFIND__SET_ROADS_BACK_TO_ORIGINAL, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_pathfind, "SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA", mruby__PATHFIND__SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_pathfind, "_0x0B919E1FB47CC4E0", mruby__PATHFIND___0x0B919E1FB47CC4E0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_pathfind, "_0xAA76052DDA9BFC3E", mruby__PATHFIND___0xAA76052DDA9BFC3E, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_pathfind, "SET_PED_PATHS_BACK_TO_ORIGINAL", mruby__PATHFIND__SET_PED_PATHS_BACK_TO_ORIGINAL, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_pathfind, "SET_IGNORE_NO_GPS_FLAG", mruby__PATHFIND__SET_IGNORE_NO_GPS_FLAG, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_pathfind, "_0x1FC289A0C3FF470F", mruby__PATHFIND___0x1FC289A0C3FF470F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_pathfind, "SET_GPS_DISABLED_ZONE", mruby__PATHFIND__SET_GPS_DISABLED_ZONE, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_pathfind, "_0xBBB45C3CF5C8AA85", mruby__PATHFIND___0xBBB45C3CF5C8AA85, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_pathfind, "_0x869DAACBBE9FA006", mruby__PATHFIND___0x869DAACBBE9FA006, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_pathfind, "_0x16F46FB18C8009E4", mruby__PATHFIND___0x16F46FB18C8009E4, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_pathfind, "IS_POINT_ON_ROAD", mruby__PATHFIND__IS_POINT_ON_ROAD, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_pathfind, "_0xD3A6A0EF48823A8C", mruby__PATHFIND___0xD3A6A0EF48823A8C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_pathfind, "_0xD0BC1C6FB18EE154", mruby__PATHFIND___0xD0BC1C6FB18EE154, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_pathfind, "_0x2801D0012266DF07", mruby__PATHFIND___0x2801D0012266DF07, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_pathfind, "ADD_NAVMESH_REQUIRED_REGION", mruby__PATHFIND__ADD_NAVMESH_REQUIRED_REGION, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_pathfind, "REMOVE_NAVMESH_REQUIRED_REGIONS", mruby__PATHFIND__REMOVE_NAVMESH_REQUIRED_REGIONS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_pathfind, "DISABLE_NAVMESH_IN_AREA", mruby__PATHFIND__DISABLE_NAVMESH_IN_AREA, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_pathfind, "ARE_ALL_NAVMESH_REGIONS_LOADED", mruby__PATHFIND__ARE_ALL_NAVMESH_REGIONS_LOADED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_pathfind, "IS_NAVMESH_LOADED_IN_AREA", mruby__PATHFIND__IS_NAVMESH_LOADED_IN_AREA, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_pathfind, "_0x01708E8DD3FF8C65", mruby__PATHFIND___0x01708E8DD3FF8C65, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_pathfind, "ADD_NAVMESH_BLOCKING_OBJECT", mruby__PATHFIND__ADD_NAVMESH_BLOCKING_OBJECT, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_pathfind, "UPDATE_NAVMESH_BLOCKING_OBJECT", mruby__PATHFIND__UPDATE_NAVMESH_BLOCKING_OBJECT, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_pathfind, "REMOVE_NAVMESH_BLOCKING_OBJECT", mruby__PATHFIND__REMOVE_NAVMESH_BLOCKING_OBJECT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_pathfind, "_0x0EAEB0DB4B132399", mruby__PATHFIND___0x0EAEB0DB4B132399, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_pathfind, "_0x29C24BFBED8AB8FB", mruby__PATHFIND___0x29C24BFBED8AB8FB, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_pathfind, "_0x8ABE8608576D9CE3", mruby__PATHFIND___0x8ABE8608576D9CE3, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_pathfind, "_0x336511A34F2E5185", mruby__PATHFIND___0x336511A34F2E5185, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_pathfind, "_0x3599D741C9AC6310", mruby__PATHFIND___0x3599D741C9AC6310, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_pathfind, "CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS", mruby__PATHFIND__CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_controls, "IS_CONTROL_ENABLED", mruby__CONTROLS__IS_CONTROL_ENABLED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_controls, "IS_CONTROL_PRESSED", mruby__CONTROLS__IS_CONTROL_PRESSED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_controls, "IS_CONTROL_RELEASED", mruby__CONTROLS__IS_CONTROL_RELEASED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_controls, "IS_CONTROL_JUST_PRESSED", mruby__CONTROLS__IS_CONTROL_JUST_PRESSED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_controls, "IS_CONTROL_JUST_RELEASED", mruby__CONTROLS__IS_CONTROL_JUST_RELEASED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_controls, "GET_CONTROL_VALUE", mruby__CONTROLS__GET_CONTROL_VALUE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_controls, "GET_CONTROL_NORMAL", mruby__CONTROLS__GET_CONTROL_NORMAL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_controls, "_0x5B73C77D9EB66E24", mruby__CONTROLS___0x5B73C77D9EB66E24, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_controls, "_0x5B84D09CEC5209C5", mruby__CONTROLS___0x5B84D09CEC5209C5, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_controls, "_SET_CONTROL_NORMAL", mruby__CONTROLS___SET_CONTROL_NORMAL, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_controls, "IS_DISABLED_CONTROL_PRESSED", mruby__CONTROLS__IS_DISABLED_CONTROL_PRESSED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_controls, "IS_DISABLED_CONTROL_JUST_PRESSED", mruby__CONTROLS__IS_DISABLED_CONTROL_JUST_PRESSED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_controls, "IS_DISABLED_CONTROL_JUST_RELEASED", mruby__CONTROLS__IS_DISABLED_CONTROL_JUST_RELEASED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_controls, "GET_DISABLED_CONTROL_NORMAL", mruby__CONTROLS__GET_DISABLED_CONTROL_NORMAL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_controls, "_0x4F8A26A890FD62FB", mruby__CONTROLS___0x4F8A26A890FD62FB, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_controls, "_0xD7D22F5592AED8BA", mruby__CONTROLS___0xD7D22F5592AED8BA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_controls, "_GET_LAST_INPUT_METHOD", mruby__CONTROLS___GET_LAST_INPUT_METHOD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_controls, "_0x13337B38DB572509", mruby__CONTROLS___0x13337B38DB572509, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_controls, "_0xFC695459D4D0E219", mruby__CONTROLS___0xFC695459D4D0E219, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_controls, "_0x23F09EADC01449D6", mruby__CONTROLS___0x23F09EADC01449D6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_controls, "_0x6CD79468A1E595C6", mruby__CONTROLS___0x6CD79468A1E595C6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_controls, "_GET_CONTROL_ACTION_NAME", mruby__CONTROLS___GET_CONTROL_ACTION_NAME, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_controls, "_0x80C2FD58D720C801", mruby__CONTROLS___0x80C2FD58D720C801, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_controls, "_0x8290252FFF36ACB5", mruby__CONTROLS___0x8290252FFF36ACB5, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_controls, "_0xCB0360EFEFB2580D", mruby__CONTROLS___0xCB0360EFEFB2580D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_controls, "SET_PAD_SHAKE", mruby__CONTROLS__SET_PAD_SHAKE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_controls, "_0x14D29BB12D47F68C", mruby__CONTROLS___0x14D29BB12D47F68C, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_controls, "STOP_PAD_SHAKE", mruby__CONTROLS__STOP_PAD_SHAKE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_controls, "_0xF239400E16C23E08", mruby__CONTROLS___0xF239400E16C23E08, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_controls, "_0xA0CEFCEA390AAB9B", mruby__CONTROLS___0xA0CEFCEA390AAB9B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_controls, "IS_LOOK_INVERTED", mruby__CONTROLS__IS_LOOK_INVERTED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_controls, "_0xE1615EC03B3BB4FD", mruby__CONTROLS___0xE1615EC03B3BB4FD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_controls, "GET_LOCAL_PLAYER_AIM_STATE", mruby__CONTROLS__GET_LOCAL_PLAYER_AIM_STATE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_controls, "_0x59B9A7AF4C95133C", mruby__CONTROLS___0x59B9A7AF4C95133C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_controls, "_0x0F70731BACCFBB96", mruby__CONTROLS___0x0F70731BACCFBB96, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_controls, "_0xFC859E2374407556", mruby__CONTROLS___0xFC859E2374407556, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_controls, "SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED", mruby__CONTROLS__SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_controls, "SET_INPUT_EXCLUSIVE", mruby__CONTROLS__SET_INPUT_EXCLUSIVE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_controls, "DISABLE_CONTROL_ACTION", mruby__CONTROLS__DISABLE_CONTROL_ACTION, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_controls, "ENABLE_CONTROL_ACTION", mruby__CONTROLS__ENABLE_CONTROL_ACTION, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_controls, "DISABLE_ALL_CONTROL_ACTIONS", mruby__CONTROLS__DISABLE_ALL_CONTROL_ACTIONS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_controls, "ENABLE_ALL_CONTROL_ACTIONS", mruby__CONTROLS__ENABLE_ALL_CONTROL_ACTIONS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_controls, "_0x3D42B92563939375", mruby__CONTROLS___0x3D42B92563939375, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_controls, "_0x4683149ED1DDE7A1", mruby__CONTROLS___0x4683149ED1DDE7A1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_controls, "_0x643ED62D5EA3BEBD", mruby__CONTROLS___0x643ED62D5EA3BEBD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_controls, "_0x7F4724035FDCA1DD", mruby__CONTROLS___0x7F4724035FDCA1DD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_datafile, "_0xAD6875BBC0FC899C", mruby__DATAFILE___0xAD6875BBC0FC899C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_datafile, "_0x6CC86E78358D5119", mruby__DATAFILE___0x6CC86E78358D5119, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_datafile, "_0xFCCAE5B92A830878", mruby__DATAFILE___0xFCCAE5B92A830878, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_datafile, "_0x15FF52B809DB2353", mruby__DATAFILE___0x15FF52B809DB2353, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_datafile, "_0xF8CC1EBE0B62E29F", mruby__DATAFILE___0xF8CC1EBE0B62E29F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_datafile, "_0x22DA66936E0FFF37", mruby__DATAFILE___0x22DA66936E0FFF37, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_datafile, "_0x8F5EA1C01D65A100", mruby__DATAFILE___0x8F5EA1C01D65A100, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_datafile, "_0xA5EFC3E847D60507", mruby__DATAFILE___0xA5EFC3E847D60507, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_datafile, "_0x4645DE9980999E93", mruby__DATAFILE___0x4645DE9980999E93, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_datafile, "_0x692D808C34A82143", mruby__DATAFILE___0x692D808C34A82143, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_datafile, "_0xA69AC4ADE82B57A4", mruby__DATAFILE___0xA69AC4ADE82B57A4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_datafile, "_0x9CB0BFA7A9342C3D", mruby__DATAFILE___0x9CB0BFA7A9342C3D, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_datafile, "_0x52818819057F2B40", mruby__DATAFILE___0x52818819057F2B40, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_datafile, "_0x01095C95CD46B624", mruby__DATAFILE___0x01095C95CD46B624, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_datafile, "_LOAD_UGC_FILE", mruby__DATAFILE___LOAD_UGC_FILE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_datafile, "DATAFILE_CREATE", mruby__DATAFILE__DATAFILE_CREATE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_datafile, "DATAFILE_DELETE", mruby__DATAFILE__DATAFILE_DELETE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_datafile, "_0x2ED61456317B8178", mruby__DATAFILE___0x2ED61456317B8178, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_datafile, "_0xC55854C7D7274882", mruby__DATAFILE___0xC55854C7D7274882, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_datafile, "_0x83BCCE3224735F05", mruby__DATAFILE___0x83BCCE3224735F05, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_datafile, "_0x4DFDD9EB705F8140", mruby__DATAFILE___0x4DFDD9EB705F8140, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_datafile, "_0xBEDB96A7584AA8CF", mruby__DATAFILE___0xBEDB96A7584AA8CF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_datafile, "_OBJECT_VALUE_ADD_BOOLEAN", mruby__DATAFILE___OBJECT_VALUE_ADD_BOOLEAN, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_datafile, "_OBJECT_VALUE_ADD_INTEGER", mruby__DATAFILE___OBJECT_VALUE_ADD_INTEGER, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_datafile, "_OBJECT_VALUE_ADD_FLOAT", mruby__DATAFILE___OBJECT_VALUE_ADD_FLOAT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_datafile, "_OBJECT_VALUE_ADD_STRING", mruby__DATAFILE___OBJECT_VALUE_ADD_STRING, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_datafile, "_OBJECT_VALUE_ADD_VECTOR3", mruby__DATAFILE___OBJECT_VALUE_ADD_VECTOR3, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_datafile, "_OBJECT_VALUE_GET_BOOLEAN", mruby__DATAFILE___OBJECT_VALUE_GET_BOOLEAN, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_datafile, "_OBJECT_VALUE_GET_INTEGER", mruby__DATAFILE___OBJECT_VALUE_GET_INTEGER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_datafile, "_OBJECT_VALUE_GET_FLOAT", mruby__DATAFILE___OBJECT_VALUE_GET_FLOAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_datafile, "_OBJECT_VALUE_GET_STRING", mruby__DATAFILE___OBJECT_VALUE_GET_STRING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_datafile, "_OBJECT_VALUE_GET_VECTOR3", mruby__DATAFILE___OBJECT_VALUE_GET_VECTOR3, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_datafile, "_OBJECT_VALUE_GET_TYPE", mruby__DATAFILE___OBJECT_VALUE_GET_TYPE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_datafile, "_ARRAY_VALUE_ADD_BOOLEAN", mruby__DATAFILE___ARRAY_VALUE_ADD_BOOLEAN, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_datafile, "_ARRAY_VALUE_ADD_INTEGER", mruby__DATAFILE___ARRAY_VALUE_ADD_INTEGER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_datafile, "_ARRAY_VALUE_ADD_FLOAT", mruby__DATAFILE___ARRAY_VALUE_ADD_FLOAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_datafile, "_ARRAY_VALUE_ADD_STRING", mruby__DATAFILE___ARRAY_VALUE_ADD_STRING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_datafile, "_ARRAY_VALUE_ADD_VECTOR3", mruby__DATAFILE___ARRAY_VALUE_ADD_VECTOR3, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_datafile, "_ARRAY_VALUE_GET_BOOLEAN", mruby__DATAFILE___ARRAY_VALUE_GET_BOOLEAN, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_datafile, "_ARRAY_VALUE_GET_INTEGER", mruby__DATAFILE___ARRAY_VALUE_GET_INTEGER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_datafile, "_ARRAY_VALUE_GET_FLOAT", mruby__DATAFILE___ARRAY_VALUE_GET_FLOAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_datafile, "_ARRAY_VALUE_GET_STRING", mruby__DATAFILE___ARRAY_VALUE_GET_STRING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_datafile, "_ARRAY_VALUE_GET_VECTOR3", mruby__DATAFILE___ARRAY_VALUE_GET_VECTOR3, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_datafile, "_ARRAY_VALUE_GET_SIZE", mruby__DATAFILE___ARRAY_VALUE_GET_SIZE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_datafile, "_ARRAY_VALUE_GET_TYPE", mruby__DATAFILE___ARRAY_VALUE_GET_TYPE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_fire, "START_SCRIPT_FIRE", mruby__FIRE__START_SCRIPT_FIRE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_fire, "REMOVE_SCRIPT_FIRE", mruby__FIRE__REMOVE_SCRIPT_FIRE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_fire, "START_ENTITY_FIRE", mruby__FIRE__START_ENTITY_FIRE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_fire, "STOP_ENTITY_FIRE", mruby__FIRE__STOP_ENTITY_FIRE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_fire, "IS_ENTITY_ON_FIRE", mruby__FIRE__IS_ENTITY_ON_FIRE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_fire, "GET_NUMBER_OF_FIRES_IN_RANGE", mruby__FIRE__GET_NUMBER_OF_FIRES_IN_RANGE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_fire, "STOP_FIRE_IN_RANGE", mruby__FIRE__STOP_FIRE_IN_RANGE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_fire, "GET_CLOSEST_FIRE_POS", mruby__FIRE__GET_CLOSEST_FIRE_POS, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_fire, "ADD_EXPLOSION", mruby__FIRE__ADD_EXPLOSION, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_fire, "ADD_OWNED_EXPLOSION", mruby__FIRE__ADD_OWNED_EXPLOSION, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_fire, "_ADD_SPECFX_EXPLOSION", mruby__FIRE___ADD_SPECFX_EXPLOSION, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_fire, "IS_EXPLOSION_IN_AREA", mruby__FIRE__IS_EXPLOSION_IN_AREA, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_fire, "_0x6070104B699B2EF4", mruby__FIRE___0x6070104B699B2EF4, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_fire, "IS_EXPLOSION_IN_SPHERE", mruby__FIRE__IS_EXPLOSION_IN_SPHERE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_fire, "IS_EXPLOSION_IN_ANGLED_AREA", mruby__FIRE__IS_EXPLOSION_IN_ANGLED_AREA, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_fire, "_GET_PED_INSIDE_EXPLOSION_AREA", mruby__FIRE___GET_PED_INSIDE_EXPLOSION_AREA, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_decisionevent, "SET_DECISION_MAKER", mruby__DECISIONEVENT__SET_DECISION_MAKER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_decisionevent, "CLEAR_DECISION_MAKER_EVENT_RESPONSE", mruby__DECISIONEVENT__CLEAR_DECISION_MAKER_EVENT_RESPONSE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_decisionevent, "BLOCK_DECISION_MAKER_EVENT", mruby__DECISIONEVENT__BLOCK_DECISION_MAKER_EVENT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_decisionevent, "UNBLOCK_DECISION_MAKER_EVENT", mruby__DECISIONEVENT__UNBLOCK_DECISION_MAKER_EVENT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_decisionevent, "ADD_SHOCKING_EVENT_AT_POSITION", mruby__DECISIONEVENT__ADD_SHOCKING_EVENT_AT_POSITION, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_decisionevent, "ADD_SHOCKING_EVENT_FOR_ENTITY", mruby__DECISIONEVENT__ADD_SHOCKING_EVENT_FOR_ENTITY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_decisionevent, "IS_SHOCKING_EVENT_IN_SPHERE", mruby__DECISIONEVENT__IS_SHOCKING_EVENT_IN_SPHERE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_decisionevent, "REMOVE_SHOCKING_EVENT", mruby__DECISIONEVENT__REMOVE_SHOCKING_EVENT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_decisionevent, "REMOVE_ALL_SHOCKING_EVENTS", mruby__DECISIONEVENT__REMOVE_ALL_SHOCKING_EVENTS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_decisionevent, "REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS", mruby__DECISIONEVENT__REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_decisionevent, "SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME", mruby__DECISIONEVENT__SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_decisionevent, "SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME", mruby__DECISIONEVENT__SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_decisionevent, "SUPPRESS_AGITATION_EVENTS_NEXT_FRAME", mruby__DECISIONEVENT__SUPPRESS_AGITATION_EVENTS_NEXT_FRAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_zone, "GET_ZONE_AT_COORDS", mruby__ZONE__GET_ZONE_AT_COORDS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_zone, "GET_ZONE_FROM_NAME_ID", mruby__ZONE__GET_ZONE_FROM_NAME_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_zone, "GET_ZONE_POPSCHEDULE", mruby__ZONE__GET_ZONE_POPSCHEDULE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_zone, "GET_NAME_OF_ZONE", mruby__ZONE__GET_NAME_OF_ZONE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_zone, "SET_ZONE_ENABLED", mruby__ZONE__SET_ZONE_ENABLED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_zone, "GET_ZONE_SCUMMINESS", mruby__ZONE__GET_ZONE_SCUMMINESS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_zone, "OVERRIDE_POPSCHEDULE_VEHICLE_MODEL", mruby__ZONE__OVERRIDE_POPSCHEDULE_VEHICLE_MODEL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_zone, "CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL", mruby__ZONE__CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_zone, "GET_HASH_OF_MAP_AREA_AT_COORDS", mruby__ZONE__GET_HASH_OF_MAP_AREA_AT_COORDS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_rope, "DELETE_CHILD_ROPE", mruby__ROPE__DELETE_CHILD_ROPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_rope, "LOAD_ROPE_DATA", mruby__ROPE__LOAD_ROPE_DATA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_rope, "PIN_ROPE_VERTEX", mruby__ROPE__PIN_ROPE_VERTEX, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_rope, "UNPIN_ROPE_VERTEX", mruby__ROPE__UNPIN_ROPE_VERTEX, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_rope, "GET_ROPE_VERTEX_COUNT", mruby__ROPE__GET_ROPE_VERTEX_COUNT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_rope, "ATTACH_ROPE_TO_ENTITY", mruby__ROPE__ATTACH_ROPE_TO_ENTITY, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_rope, "DETACH_ROPE_FROM_ENTITY", mruby__ROPE__DETACH_ROPE_FROM_ENTITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_rope, "ROPE_SET_UPDATE_PINVERTS", mruby__ROPE__ROPE_SET_UPDATE_PINVERTS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_rope, "_0xDC57A637A20006ED", mruby__ROPE___0xDC57A637A20006ED, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_rope, "_0x36CCB9BE67B970FD", mruby__ROPE___0x36CCB9BE67B970FD, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_rope, "_0x84DE3B5FB3E666F0", mruby__ROPE___0x84DE3B5FB3E666F0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_rope, "GET_ROPE_LAST_VERTEX_COORD", mruby__ROPE__GET_ROPE_LAST_VERTEX_COORD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_rope, "GET_ROPE_VERTEX_COORD", mruby__ROPE__GET_ROPE_VERTEX_COORD, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_rope, "START_ROPE_WINDING", mruby__ROPE__START_ROPE_WINDING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_rope, "STOP_ROPE_WINDING", mruby__ROPE__STOP_ROPE_WINDING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_rope, "START_ROPE_UNWINDING_FRONT", mruby__ROPE__START_ROPE_UNWINDING_FRONT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_rope, "STOP_ROPE_UNWINDING_FRONT", mruby__ROPE__STOP_ROPE_UNWINDING_FRONT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_rope, "ROPE_CONVERT_TO_SIMPLE", mruby__ROPE__ROPE_CONVERT_TO_SIMPLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_rope, "ROPE_LOAD_TEXTURES", mruby__ROPE__ROPE_LOAD_TEXTURES, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_rope, "ROPE_ARE_TEXTURES_LOADED", mruby__ROPE__ROPE_ARE_TEXTURES_LOADED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_rope, "ROPE_UNLOAD_TEXTURES", mruby__ROPE__ROPE_UNLOAD_TEXTURES, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_rope, "_0x271C9D3ACA5D6409", mruby__ROPE___0x271C9D3ACA5D6409, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_rope, "_0xBC0CE682D4D05650", mruby__ROPE___0xBC0CE682D4D05650, MRB_ARGS_REQ(14));
  mrb_define_method(mrb, module_rope, "_0xB1B6216CA2E7B55E", mruby__ROPE___0xB1B6216CA2E7B55E, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_rope, "_0xB743F735C03D7810", mruby__ROPE___0xB743F735C03D7810, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_rope, "_GET_ROPE_LENGTH", mruby__ROPE___GET_ROPE_LENGTH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_rope, "ROPE_FORCE_LENGTH", mruby__ROPE__ROPE_FORCE_LENGTH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_rope, "ROPE_RESET_LENGTH", mruby__ROPE__ROPE_RESET_LENGTH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_rope, "APPLY_IMPULSE_TO_CLOTH", mruby__ROPE__APPLY_IMPULSE_TO_CLOTH, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_rope, "SET_DAMPING", mruby__ROPE__SET_DAMPING, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_rope, "ACTIVATE_PHYSICS", mruby__ROPE__ACTIVATE_PHYSICS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_rope, "SET_CGOFFSET", mruby__ROPE__SET_CGOFFSET, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_rope, "GET_CGOFFSET", mruby__ROPE__GET_CGOFFSET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_rope, "SET_CG_AT_BOUNDCENTER", mruby__ROPE__SET_CG_AT_BOUNDCENTER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_rope, "BREAK_ENTITY_GLASS", mruby__ROPE__BREAK_ENTITY_GLASS, MRB_ARGS_REQ(11));
  mrb_define_method(mrb, module_rope, "SET_DISABLE_BREAKING", mruby__ROPE__SET_DISABLE_BREAKING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_rope, "_0xCC6E963682533882", mruby__ROPE___0xCC6E963682533882, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_rope, "SET_DISABLE_FRAG_DAMAGE", mruby__ROPE__SET_DISABLE_FRAG_DAMAGE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_water, "TEST_PROBE_AGAINST_WATER", mruby__WATER__TEST_PROBE_AGAINST_WATER, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_water, "TEST_PROBE_AGAINST_ALL_WATER", mruby__WATER__TEST_PROBE_AGAINST_ALL_WATER, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_water, "MODIFY_WATER", mruby__WATER__MODIFY_WATER, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_water, "_0xFDBF4CDBC07E1706", mruby__WATER___0xFDBF4CDBC07E1706, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_water, "_0xB1252E3E59A82AAF", mruby__WATER___0xB1252E3E59A82AAF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_water, "_0xB96B00E976BE977F", mruby__WATER___0xB96B00E976BE977F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_water, "_0x2B2A2CC86778B619", mruby__WATER___0x2B2A2CC86778B619, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_water, "_0x5E5E99285AE812DB", mruby__WATER___0x5E5E99285AE812DB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_worldprobe, "_0x7EE9F5D83DD4F90E", mruby__WORLDPROBE___0x7EE9F5D83DD4F90E, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_worldprobe, "_CAST_RAY_POINT_TO_POINT", mruby__WORLDPROBE___CAST_RAY_POINT_TO_POINT, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_worldprobe, "_0x052837721A854EC7", mruby__WORLDPROBE___0x052837721A854EC7, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_worldprobe, "_0xFE466162C4401D18", mruby__WORLDPROBE___0xFE466162C4401D18, MRB_ARGS_REQ(13));
  mrb_define_method(mrb, module_worldprobe, "_0x37181417CE7C8900", mruby__WORLDPROBE___0x37181417CE7C8900, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_worldprobe, "_CAST_3D_RAY_POINT_TO_POINT", mruby__WORLDPROBE___CAST_3D_RAY_POINT_TO_POINT, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_worldprobe, "_0xE6AC6C45FBE83004", mruby__WORLDPROBE___0xE6AC6C45FBE83004, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_worldprobe, "_0xFF6BE494C7987F34", mruby__WORLDPROBE___0xFF6BE494C7987F34, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_worldprobe, "_0x2B3334BCA57CD799", mruby__WORLDPROBE___0x2B3334BCA57CD799, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_SIGNED_IN", mruby__NETWORK__NETWORK_IS_SIGNED_IN, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_SIGNED_ONLINE", mruby__NETWORK__NETWORK_IS_SIGNED_ONLINE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xBD545D44CCE70597", mruby__NETWORK___0xBD545D44CCE70597, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xEBCAB9E5048434F4", mruby__NETWORK___0xEBCAB9E5048434F4, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x74FB3E29E6D10FA9", mruby__NETWORK___0x74FB3E29E6D10FA9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x7808619F31FF22DB", mruby__NETWORK___0x7808619F31FF22DB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xA0FA4EC6A05DA44E", mruby__NETWORK___0xA0FA4EC6A05DA44E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x85443FF4C328F53B", mruby__NETWORK___0x85443FF4C328F53B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x8D11E61A4ABF49CC", mruby__NETWORK___0x8D11E61A4ABF49CC, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_CLOUD_AVAILABLE", mruby__NETWORK__NETWORK_IS_CLOUD_AVAILABLE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x67A5589628E0CFF6", mruby__NETWORK___0x67A5589628E0CFF6, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xBA9775570DB788CF", mruby__NETWORK___0xBA9775570DB788CF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_HOST", mruby__NETWORK__NETWORK_IS_HOST, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xA306F470D1660581", mruby__NETWORK___0xA306F470D1660581, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x4237E822315D8BA9", mruby__NETWORK___0x4237E822315D8BA9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_HAVE_ONLINE_PRIVILEGES", mruby__NETWORK__NETWORK_HAVE_ONLINE_PRIVILEGES, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x1353F87E89946207", mruby__NETWORK___0x1353F87E89946207, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x72D918C99BCACC54", mruby__NETWORK___0x72D918C99BCACC54, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xAEEF48CDF5B6CE7C", mruby__NETWORK___0xAEEF48CDF5B6CE7C, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x78321BEA235FD8CD", mruby__NETWORK___0x78321BEA235FD8CD, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x595F028698072DD9", mruby__NETWORK___0x595F028698072DD9, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "_0x83F28CE49FBBFFBA", mruby__NETWORK___0x83F28CE49FBBFFBA, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "_0x76BF03FADBF154F5", mruby__NETWORK___0x76BF03FADBF154F5, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x9614B71F8ADB982B", mruby__NETWORK___0x9614B71F8ADB982B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x5EA784D197556507", mruby__NETWORK___0x5EA784D197556507, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xA8ACB6459542A8C8", mruby__NETWORK___0xA8ACB6459542A8C8, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x83FE8D7229593017", mruby__NETWORK___0x83FE8D7229593017, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_CAN_BAIL", mruby__NETWORK__NETWORK_CAN_BAIL, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_BAIL", mruby__NETWORK__NETWORK_BAIL, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x283B6062A2C01E9B", mruby__NETWORK___0x283B6062A2C01E9B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x9747292807126EDA", mruby__NETWORK___0x9747292807126EDA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_CAN_ENTER_MULTIPLAYER", mruby__NETWORK__NETWORK_CAN_ENTER_MULTIPLAYER, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_SESSION_ENTER", mruby__NETWORK__NETWORK_SESSION_ENTER, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_network, "_0x2CFC76E0D087C994", mruby__NETWORK___0x2CFC76E0D087C994, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_network, "_0x94BC51E9449D917F", mruby__NETWORK___0x94BC51E9449D917F, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_network, "_0xBE3E347A87ACEB82", mruby__NETWORK___0xBE3E347A87ACEB82, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_network, "NETWORK_SESSION_HOST", mruby__NETWORK__NETWORK_SESSION_HOST, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "_0xED34C0C02C098BB7", mruby__NETWORK___0xED34C0C02C098BB7, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_SESSION_HOST_FRIENDS_ONLY", mruby__NETWORK__NETWORK_SESSION_HOST_FRIENDS_ONLY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0xFBCFA2EA2E206890", mruby__NETWORK___0xFBCFA2EA2E206890, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x74732C6CA90DA2B4", mruby__NETWORK___0x74732C6CA90DA2B4, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xF3929C2379B60CCE", mruby__NETWORK___0xF3929C2379B60CCE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xCEF70AA5B3F89BA1", mruby__NETWORK___0xCEF70AA5B3F89BA1, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_SESSION_END", mruby__NETWORK__NETWORK_SESSION_END, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_SESSION_KICK_PLAYER", mruby__NETWORK__NETWORK_SESSION_KICK_PLAYER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_NETWORK_SESSION_ARE_PLAYERS_VOTING_TO_KICK", mruby__NETWORK___NETWORK_SESSION_ARE_PLAYERS_VOTING_TO_KICK, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x59DF79317F85A7E0", mruby__NETWORK___0x59DF79317F85A7E0, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xFFE1E5B792D92B34", mruby__NETWORK___0xFFE1E5B792D92B34, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x49EC8030F5015F8B", mruby__NETWORK___0x49EC8030F5015F8B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x8B6A4DD0AF9CE215", mruby__NETWORK___0x8B6A4DD0AF9CE215, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x56CE820830EF040B", mruby__NETWORK___0x56CE820830EF040B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xCAE55F48D3D7875C", mruby__NETWORK___0xCAE55F48D3D7875C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xF49ABC20D8552257", mruby__NETWORK___0xF49ABC20D8552257, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x4811BBAC21C5FCD5", mruby__NETWORK___0x4811BBAC21C5FCD5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x5539C3EBF104A53A", mruby__NETWORK___0x5539C3EBF104A53A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x702BC4D605522539", mruby__NETWORK___0x702BC4D605522539, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x3F52E880AAF6C8CA", mruby__NETWORK___0x3F52E880AAF6C8CA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xF1EEA2DDA9FFA69D", mruby__NETWORK___0xF1EEA2DDA9FFA69D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x1153FA02A659051C", mruby__NETWORK___0x1153FA02A659051C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xC19F6C8E7865A6FF", mruby__NETWORK___0xC19F6C8E7865A6FF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x236406F60CF216D6", mruby__NETWORK___0x236406F60CF216D6, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x058F43EC59A8631A", mruby__NETWORK___0x058F43EC59A8631A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x600F8CB31C7AAB6E", mruby__NETWORK___0x600F8CB31C7AAB6E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xE532D6811B3A4D2A", mruby__NETWORK___0xE532D6811B3A4D2A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xF7B2CFDE5C9F700D", mruby__NETWORK___0xF7B2CFDE5C9F700D, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_network, "NETWORK_IS_FINDING_GAMERS", mruby__NETWORK__NETWORK_IS_FINDING_GAMERS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xF9B83B77929D8863", mruby__NETWORK___0xF9B83B77929D8863, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_GET_NUM_FOUND_GAMERS", mruby__NETWORK__NETWORK_GET_NUM_FOUND_GAMERS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_GET_FOUND_GAMER", mruby__NETWORK__NETWORK_GET_FOUND_GAMER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_CLEAR_FOUND_GAMERS", mruby__NETWORK__NETWORK_CLEAR_FOUND_GAMERS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x85A0EF54A500882C", mruby__NETWORK___0x85A0EF54A500882C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x2CC848A861D01493", mruby__NETWORK___0x2CC848A861D01493, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x94A8394D150B013A", mruby__NETWORK___0x94A8394D150B013A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x5AE17C6B0134B7F1", mruby__NETWORK___0x5AE17C6B0134B7F1, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x02A8BEC6FD9AF660", mruby__NETWORK___0x02A8BEC6FD9AF660, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x86E0660E4F5C956D", mruby__NETWORK___0x86E0660E4F5C956D, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_PLAYER_ANIMATION_DRAWING_SYNCHRONIZED", mruby__NETWORK__NETWORK_IS_PLAYER_ANIMATION_DRAWING_SYNCHRONIZED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_SESSION_CANCEL_INVITE", mruby__NETWORK__NETWORK_SESSION_CANCEL_INVITE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xA29177F7703B5644", mruby__NETWORK___0xA29177F7703B5644, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_HAS_PENDING_INVITE", mruby__NETWORK__NETWORK_HAS_PENDING_INVITE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xC42DD763159F3461", mruby__NETWORK___0xC42DD763159F3461, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x62A0296C1BB1CEB3", mruby__NETWORK___0x62A0296C1BB1CEB3, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x23DFB504655D0CE4", mruby__NETWORK___0x23DFB504655D0CE4, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_SESSION_GET_INVITER", mruby__NETWORK__NETWORK_SESSION_GET_INVITER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xD313DE83394AF134", mruby__NETWORK___0xD313DE83394AF134, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xBDB6F89C729CF388", mruby__NETWORK___0xBDB6F89C729CF388, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_SUPPRESS_INVITE", mruby__NETWORK__NETWORK_SUPPRESS_INVITE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_BLOCK_INVITES", mruby__NETWORK__NETWORK_BLOCK_INVITES, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xCFEB8AF24FC1D0BB", mruby__NETWORK___0xCFEB8AF24FC1D0BB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xF814FEC6A19FD6E0", mruby__NETWORK___0xF814FEC6A19FD6E0, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x6B07B9CE4D390375", mruby__NETWORK___0x6B07B9CE4D390375, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x7AC752103856FB20", mruby__NETWORK___0x7AC752103856FB20, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x74698374C45701D2", mruby__NETWORK___0x74698374C45701D2, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x140E6A44870A11CE", mruby__NETWORK___0x140E6A44870A11CE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_SESSION_HOST_SINGLE_PLAYER", mruby__NETWORK__NETWORK_SESSION_HOST_SINGLE_PLAYER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_SESSION_LEAVE_SINGLE_PLAYER", mruby__NETWORK__NETWORK_SESSION_LEAVE_SINGLE_PLAYER, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_GAME_IN_PROGRESS", mruby__NETWORK__NETWORK_IS_GAME_IN_PROGRESS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_SESSION_ACTIVE", mruby__NETWORK__NETWORK_IS_SESSION_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_IN_SESSION", mruby__NETWORK__NETWORK_IS_IN_SESSION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_SESSION_STARTED", mruby__NETWORK__NETWORK_IS_SESSION_STARTED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_SESSION_BUSY", mruby__NETWORK__NETWORK_IS_SESSION_BUSY, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_CAN_SESSION_END", mruby__NETWORK__NETWORK_CAN_SESSION_END, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x271CC6AB59EBF9A5", mruby__NETWORK___0x271CC6AB59EBF9A5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xBA416D68C631496A", mruby__NETWORK___0xBA416D68C631496A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xA73667484D7037C3", mruby__NETWORK___0xA73667484D7037C3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xB4AB419E0D86ACAE", mruby__NETWORK___0xB4AB419E0D86ACAE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x53AFD64C6758F2F9", mruby__NETWORK___0x53AFD64C6758F2F9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_SESSION_VOICE_HOST", mruby__NETWORK__NETWORK_SESSION_VOICE_HOST, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_SESSION_VOICE_LEAVE", mruby__NETWORK__NETWORK_SESSION_VOICE_LEAVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xABD5E88B8A2D3DB2", mruby__NETWORK___0xABD5E88B8A2D3DB2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_SET_KEEP_FOCUSPOINT", mruby__NETWORK__NETWORK_SET_KEEP_FOCUSPOINT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x5B8ED3DB018927B1", mruby__NETWORK___0x5B8ED3DB018927B1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x855BC38818F6F684", mruby__NETWORK___0x855BC38818F6F684, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xB5D3453C98456528", mruby__NETWORK___0xB5D3453C98456528, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xEF0912DDF7C4CB4B", mruby__NETWORK___0xEF0912DDF7C4CB4B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_SET_ACTIVITY_SPECTATOR", mruby__NETWORK__NETWORK_SET_ACTIVITY_SPECTATOR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_ACTIVITY_SPECTATOR", mruby__NETWORK__NETWORK_IS_ACTIVITY_SPECTATOR, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_SET_ACTIVITY_SPECTATOR_MAX", mruby__NETWORK__NETWORK_SET_ACTIVITY_SPECTATOR_MAX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_GET_ACTIVITY_PLAYER_NUM", mruby__NETWORK__NETWORK_GET_ACTIVITY_PLAYER_NUM, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE", mruby__NETWORK__NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_HOST_TRANSITION", mruby__NETWORK__NETWORK_HOST_TRANSITION, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_network, "_0x71FB0EBCD4915D56", mruby__NETWORK___0x71FB0EBCD4915D56, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_network, "_0xA091A5E44F0072E5", mruby__NETWORK___0xA091A5E44F0072E5, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_network, "_0xA06509A691D12BE4", mruby__NETWORK___0xA06509A691D12BE4, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xB13E88E655E5A3BC", mruby__NETWORK___0xB13E88E655E5A3BC, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x6512765E3BE78C50", mruby__NETWORK___0x6512765E3BE78C50, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x0DBD5D7E3C5BEC3B", mruby__NETWORK___0x0DBD5D7E3C5BEC3B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x5DC577201723960A", mruby__NETWORK___0x5DC577201723960A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x5A6AA44FF8E931E6", mruby__NETWORK___0x5A6AA44FF8E931E6, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x261E97AD7BCF3D40", mruby__NETWORK___0x261E97AD7BCF3D40, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x39917E1B4CB0F911", mruby__NETWORK___0x39917E1B4CB0F911, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_SET_TRANSITION_CREATOR_HANDLE", mruby__NETWORK__NETWORK_SET_TRANSITION_CREATOR_HANDLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE", mruby__NETWORK__NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_INVITE_GAMERS_TO_TRANSITION", mruby__NETWORK__NETWORK_INVITE_GAMERS_TO_TRANSITION, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_SET_GAMER_INVITED_TO_TRANSITION", mruby__NETWORK__NETWORK_SET_GAMER_INVITED_TO_TRANSITION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_LEAVE_TRANSITION", mruby__NETWORK__NETWORK_LEAVE_TRANSITION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_LAUNCH_TRANSITION", mruby__NETWORK__NETWORK_LAUNCH_TRANSITION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xA2E9C1AB8A92E8CD", mruby__NETWORK___0xA2E9C1AB8A92E8CD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_BAIL_TRANSITION", mruby__NETWORK__NETWORK_BAIL_TRANSITION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_DO_TRANSITION_TO_GAME", mruby__NETWORK__NETWORK_DO_TRANSITION_TO_GAME, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_DO_TRANSITION_TO_NEW_GAME", mruby__NETWORK__NETWORK_DO_TRANSITION_TO_NEW_GAME, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "NETWORK_DO_TRANSITION_TO_FREEMODE", mruby__NETWORK__NETWORK_DO_TRANSITION_TO_FREEMODE, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_network, "NETWORK_DO_TRANSITION_TO_NEW_FREEMODE", mruby__NETWORK__NETWORK_DO_TRANSITION_TO_NEW_FREEMODE, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_network, "NETWORK_IS_TRANSITION_TO_GAME", mruby__NETWORK__NETWORK_IS_TRANSITION_TO_GAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_GET_TRANSITION_MEMBERS", mruby__NETWORK__NETWORK_GET_TRANSITION_MEMBERS, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x521638ADA1BA0D18", mruby__NETWORK___0x521638ADA1BA0D18, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED", mruby__NETWORK__NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_TRANSITION_HOST", mruby__NETWORK__NETWORK_IS_TRANSITION_HOST, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_TRANSITION_HOST_FROM_HANDLE", mruby__NETWORK__NETWORK_IS_TRANSITION_HOST_FROM_HANDLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_GET_TRANSITION_HOST", mruby__NETWORK__NETWORK_GET_TRANSITION_HOST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_IN_TRANSITION", mruby__NETWORK__NETWORK_IS_IN_TRANSITION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_TRANSITION_STARTED", mruby__NETWORK__NETWORK_IS_TRANSITION_STARTED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_TRANSITION_BUSY", mruby__NETWORK__NETWORK_IS_TRANSITION_BUSY, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x292564C735375EDF", mruby__NETWORK___0x292564C735375EDF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xC571D0E77D8BBC29", mruby__NETWORK___0xC571D0E77D8BBC29, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x2B3A8F7CA3A38FDE", mruby__NETWORK___0x2B3A8F7CA3A38FDE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x43F4DBA69710E01E", mruby__NETWORK___0x43F4DBA69710E01E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x37A4494483B9F5C9", mruby__NETWORK___0x37A4494483B9F5C9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x0C978FDA19692C2C", mruby__NETWORK___0x0C978FDA19692C2C, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0xD0A484CB2F829FBE", mruby__NETWORK___0xD0A484CB2F829FBE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x30DE938B516F0AD2", mruby__NETWORK___0x30DE938B516F0AD2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xEEEDA5E6D7080987", mruby__NETWORK___0xEEEDA5E6D7080987, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x973D76AA760A6CB6", mruby__NETWORK___0x973D76AA760A6CB6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_HAS_PLAYER_STARTED_TRANSITION", mruby__NETWORK__NETWORK_HAS_PLAYER_STARTED_TRANSITION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x2615AA2A695930C1", mruby__NETWORK___0x2615AA2A695930C1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_JOIN_TRANSITION", mruby__NETWORK__NETWORK_JOIN_TRANSITION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_HAS_INVITED_GAMER_TO_TRANSITION", mruby__NETWORK__NETWORK_HAS_INVITED_GAMER_TO_TRANSITION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x3F9990BF5F22759C", mruby__NETWORK___0x3F9990BF5F22759C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_ACTIVITY_SESSION", mruby__NETWORK__NETWORK_IS_ACTIVITY_SESSION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x4A9FDE3A5A6D0437", mruby__NETWORK___0x4A9FDE3A5A6D0437, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x742B58F723233ED9", mruby__NETWORK___0x742B58F723233ED9, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xCEFA968912D0F78D", mruby__NETWORK___0xCEFA968912D0F78D, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_ACCEPT_PRESENCE_INVITE", mruby__NETWORK__NETWORK_ACCEPT_PRESENCE_INVITE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xF0210268DB0974B1", mruby__NETWORK___0xF0210268DB0974B1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_GET_PRESENCE_INVITE_ID", mruby__NETWORK__NETWORK_GET_PRESENCE_INVITE_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_GET_PRESENCE_INVITE_INVITER", mruby__NETWORK__NETWORK_GET_PRESENCE_INVITE_INVITER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x26E1CD96B0903D60", mruby__NETWORK___0x26E1CD96B0903D60, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x24409FC4C55CB22D", mruby__NETWORK___0x24409FC4C55CB22D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xD39B3FFF8FFDD5BF", mruby__NETWORK___0xD39B3FFF8FFDD5BF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x728C4CC7920CD102", mruby__NETWORK___0x728C4CC7920CD102, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x3DBF2DF0AEB7D289", mruby__NETWORK___0x3DBF2DF0AEB7D289, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x8806CEBFABD3CE05", mruby__NETWORK___0x8806CEBFABD3CE05, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x76D9B976C4C09FDE", mruby__NETWORK___0x76D9B976C4C09FDE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xC88156EBB786F8D5", mruby__NETWORK___0xC88156EBB786F8D5, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x439BFDE3CD0610F6", mruby__NETWORK___0x439BFDE3CD0610F6, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xEBF8284D8CADEB53", mruby__NETWORK___0xEBF8284D8CADEB53, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_REMOVE_TRANSITION_INVITE", mruby__NETWORK__NETWORK_REMOVE_TRANSITION_INVITE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x726E0375C7A26368", mruby__NETWORK___0x726E0375C7A26368, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xF083835B70BA9BFE", mruby__NETWORK___0xF083835B70BA9BFE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_HAS_INVITED_GAMER", mruby__NETWORK__NETWORK_HAS_INVITED_GAMER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU", mruby__NETWORK__NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU", mruby__NETWORK__NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x66F010A4B031A331", mruby__NETWORK___0x66F010A4B031A331, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "FILLOUT_PM_PLAYER_LIST", mruby__NETWORK__FILLOUT_PM_PLAYER_LIST, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "USING_NETWORK_WEAPONTYPE", mruby__NETWORK__USING_NETWORK_WEAPONTYPE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x796A87B3B68D1F3D", mruby__NETWORK___0x796A87B3B68D1F3D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x2FC5650B0271CB57", mruby__NETWORK___0x2FC5650B0271CB57, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x01ABCE5E7CBDA196", mruby__NETWORK___0x01ABCE5E7CBDA196, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x120364DE2845DAF8", mruby__NETWORK___0x120364DE2845DAF8, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0xFD8B834A8BA05048", mruby__NETWORK___0xFD8B834A8BA05048, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_CHATTING_IN_PLATFORM_PARTY", mruby__NETWORK__NETWORK_IS_CHATTING_IN_PLATFORM_PARTY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_IN_PARTY", mruby__NETWORK__NETWORK_IS_IN_PARTY, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_PARTY_MEMBER", mruby__NETWORK__NETWORK_IS_PARTY_MEMBER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x2BF66D2E7414F686", mruby__NETWORK___0x2BF66D2E7414F686, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x14922ED3E38761F0", mruby__NETWORK___0x14922ED3E38761F0, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xFA2888E3833C8E96", mruby__NETWORK___0xFA2888E3833C8E96, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x25D990F8E0E3F13C", mruby__NETWORK___0x25D990F8E0E3F13C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x77FADDCBE3499DF7", mruby__NETWORK___0x77FADDCBE3499DF7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xF1B84178F8674195", mruby__NETWORK___0xF1B84178F8674195, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x599E4FA1F87EB5FF", mruby__NETWORK___0x599E4FA1F87EB5FF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xE30CF56F1EFA5F43", mruby__NETWORK___0xE30CF56F1EFA5F43, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_PLAYER_IS_CHEATER", mruby__NETWORK__NETWORK_PLAYER_IS_CHEATER, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x172F75B6EE2233BA", mruby__NETWORK___0x172F75B6EE2233BA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_PLAYER_IS_BADSPORT", mruby__NETWORK__NETWORK_PLAYER_IS_BADSPORT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x46FB3ED415C7641C", mruby__NETWORK___0x46FB3ED415C7641C, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "BAD_SPORT_PLAYER_LEFT_DETECTED", mruby__NETWORK__BAD_SPORT_PLAYER_LEFT_DETECTED, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "_0xE66C690248F11150", mruby__NETWORK___0xE66C690248F11150, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT", mruby__NETWORK__NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "_0xD1110739EEADB592", mruby__NETWORK___0xD1110739EEADB592, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT", mruby__NETWORK__NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_NETWORK_GET_NUM_PARTICIPANTS_HOST", mruby__NETWORK___NETWORK_GET_NUM_PARTICIPANTS_HOST, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_GET_NUM_PARTICIPANTS", mruby__NETWORK__NETWORK_GET_NUM_PARTICIPANTS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_GET_SCRIPT_STATUS", mruby__NETWORK__NETWORK_GET_SCRIPT_STATUS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_REGISTER_HOST_BROADCAST_VARIABLES", mruby__NETWORK__NETWORK_REGISTER_HOST_BROADCAST_VARIABLES, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES", mruby__NETWORK__NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x64F62AFB081E260D", mruby__NETWORK___0x64F62AFB081E260D, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x5D10B3795F3FC886", mruby__NETWORK___0x5D10B3795F3FC886, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_GET_PLAYER_INDEX", mruby__NETWORK__NETWORK_GET_PLAYER_INDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_GET_PARTICIPANT_INDEX", mruby__NETWORK__NETWORK_GET_PARTICIPANT_INDEX, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_NETWORK_GET_PLAYER_FROM_PED", mruby__NETWORK___NETWORK_GET_PLAYER_FROM_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_GET_NUM_CONNECTED_PLAYERS", mruby__NETWORK__NETWORK_GET_NUM_CONNECTED_PLAYERS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_PLAYER_CONNECTED", mruby__NETWORK__NETWORK_IS_PLAYER_CONNECTED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xCF61D4B4702EE9EB", mruby__NETWORK___0xCF61D4B4702EE9EB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_PARTICIPANT_ACTIVE", mruby__NETWORK__NETWORK_IS_PARTICIPANT_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_PLAYER_ACTIVE", mruby__NETWORK__NETWORK_IS_PLAYER_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_PLAYER_A_PARTICIPANT", mruby__NETWORK__NETWORK_IS_PLAYER_A_PARTICIPANT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_HOST_OF_THIS_SCRIPT", mruby__NETWORK__NETWORK_IS_HOST_OF_THIS_SCRIPT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_GET_HOST_OF_THIS_SCRIPT", mruby__NETWORK__NETWORK_GET_HOST_OF_THIS_SCRIPT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_GET_HOST_OF_SCRIPT", mruby__NETWORK__NETWORK_GET_HOST_OF_SCRIPT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "NETWORK_SET_MISSION_FINISHED", mruby__NETWORK__NETWORK_SET_MISSION_FINISHED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_SCRIPT_ACTIVE", mruby__NETWORK__NETWORK_IS_SCRIPT_ACTIVE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_network, "_0x3658E8CD94FC121A", mruby__NETWORK___0x3658E8CD94FC121A, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "_0x638A3A81733086DB", mruby__NETWORK___0x638A3A81733086DB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x2302C0264EA58D31", mruby__NETWORK___0x2302C0264EA58D31, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x741A3D8380319A81", mruby__NETWORK___0x741A3D8380319A81, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "PARTICIPANT_ID", mruby__NETWORK__PARTICIPANT_ID, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "PARTICIPANT_ID_TO_INT", mruby__NETWORK__PARTICIPANT_ID_TO_INT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_RESURRECT_LOCAL_PLAYER", mruby__NETWORK__NETWORK_RESURRECT_LOCAL_PLAYER, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_network, "NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME", mruby__NETWORK__NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_LOCAL_PLAYER_INVINCIBLE", mruby__NETWORK__NETWORK_IS_LOCAL_PLAYER_INVINCIBLE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x9DD368BF06983221", mruby__NETWORK___0x9DD368BF06983221, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x524FF0AEFF9C3973", mruby__NETWORK___0x524FF0AEFF9C3973, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xB07D3185E11657A5", mruby__NETWORK___0xB07D3185E11657A5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_GET_NETWORK_ID_FROM_ENTITY", mruby__NETWORK__NETWORK_GET_NETWORK_ID_FROM_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_GET_ENTITY_FROM_NETWORK_ID", mruby__NETWORK__NETWORK_GET_ENTITY_FROM_NETWORK_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xC7827959479DCC78", mruby__NETWORK___0xC7827959479DCC78, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_GET_ENTITY_IS_LOCAL", mruby__NETWORK__NETWORK_GET_ENTITY_IS_LOCAL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x06FAACD625D80CAA", mruby__NETWORK___0x06FAACD625D80CAA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x7368E683BB9038D6", mruby__NETWORK___0x7368E683BB9038D6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_DOES_NETWORK_ID_EXIST", mruby__NETWORK__NETWORK_DOES_NETWORK_ID_EXIST, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID", mruby__NETWORK__NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_REQUEST_CONTROL_OF_NETWORK_ID", mruby__NETWORK__NETWORK_REQUEST_CONTROL_OF_NETWORK_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_HAS_CONTROL_OF_NETWORK_ID", mruby__NETWORK__NETWORK_HAS_CONTROL_OF_NETWORK_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_REQUEST_CONTROL_OF_ENTITY", mruby__NETWORK__NETWORK_REQUEST_CONTROL_OF_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_REQUEST_CONTROL_OF_DOOR", mruby__NETWORK__NETWORK_REQUEST_CONTROL_OF_DOOR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_HAS_CONTROL_OF_ENTITY", mruby__NETWORK__NETWORK_HAS_CONTROL_OF_ENTITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_HAS_CONTROL_OF_PICKUP", mruby__NETWORK__NETWORK_HAS_CONTROL_OF_PICKUP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_HAS_CONTROL_OF_DOOR", mruby__NETWORK__NETWORK_HAS_CONTROL_OF_DOOR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xC01E93FAC20C3346", mruby__NETWORK___0xC01E93FAC20C3346, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "VEH_TO_NET", mruby__NETWORK__VEH_TO_NET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "PED_TO_NET", mruby__NETWORK__PED_TO_NET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "OBJ_TO_NET", mruby__NETWORK__OBJ_TO_NET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NET_TO_VEH", mruby__NETWORK__NET_TO_VEH, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NET_TO_PED", mruby__NETWORK__NET_TO_PED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NET_TO_OBJ", mruby__NETWORK__NET_TO_OBJ, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NET_TO_ENT", mruby__NETWORK__NET_TO_ENT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_GET_LOCAL_HANDLE", mruby__NETWORK__NETWORK_GET_LOCAL_HANDLE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0xBC1D768F2F5D6C05", mruby__NETWORK___0xBC1D768F2F5D6C05, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x58575AC3CF2CA8EC", mruby__NETWORK___0x58575AC3CF2CA8EC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_GAMERTAG_FROM_HANDLE_START", mruby__NETWORK__NETWORK_GAMERTAG_FROM_HANDLE_START, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_GAMERTAG_FROM_HANDLE_PENDING", mruby__NETWORK__NETWORK_GAMERTAG_FROM_HANDLE_PENDING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED", mruby__NETWORK__NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xD66C9E72B3CC4982", mruby__NETWORK___0xD66C9E72B3CC4982, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x58CC181719256197", mruby__NETWORK___0x58CC181719256197, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "NETWORK_GET_PLAYER_FROM_GAMER_HANDLE", mruby__NETWORK__NETWORK_GET_PLAYER_FROM_GAMER_HANDLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_MEMBER_ID_FROM_GAMER_HANDLE", mruby__NETWORK__NETWORK_MEMBER_ID_FROM_GAMER_HANDLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_GAMER_IN_MY_SESSION", mruby__NETWORK__NETWORK_IS_GAMER_IN_MY_SESSION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_PLAYER_GET_NAME", mruby__NETWORK__NETWORK_PLAYER_GET_NAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_PLAYER_IS_ROCKSTAR_DEV", mruby__NETWORK__NETWORK_PLAYER_IS_ROCKSTAR_DEV, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x565E430DB3B05BEC", mruby__NETWORK___0x565E430DB3B05BEC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_INACTIVE_PROFILE", mruby__NETWORK__NETWORK_IS_INACTIVE_PROFILE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_GET_MAX_FRIENDS", mruby__NETWORK__NETWORK_GET_MAX_FRIENDS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_GET_FRIEND_COUNT", mruby__NETWORK__NETWORK_GET_FRIEND_COUNT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_GET_FRIEND_NAME", mruby__NETWORK__NETWORK_GET_FRIEND_NAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_NETWORK_GET_FRIEND_NAME", mruby__NETWORK___NETWORK_GET_FRIEND_NAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_FRIEND_ONLINE", mruby__NETWORK__NETWORK_IS_FRIEND_ONLINE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x87EB7A3FFCB314DB", mruby__NETWORK___0x87EB7A3FFCB314DB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_FRIEND_IN_SAME_TITLE", mruby__NETWORK__NETWORK_IS_FRIEND_IN_SAME_TITLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_FRIEND_IN_MULTIPLAYER", mruby__NETWORK__NETWORK_IS_FRIEND_IN_MULTIPLAYER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_PENDING_FRIEND", mruby__NETWORK__NETWORK_IS_PENDING_FRIEND, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_ADDING_FRIEND", mruby__NETWORK__NETWORK_IS_ADDING_FRIEND, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xBAD8F2A42B844821", mruby__NETWORK___0xBAD8F2A42B844821, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x1B857666604B1A74", mruby__NETWORK___0x1B857666604B1A74, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x82377B65E943F72D", mruby__NETWORK___0x82377B65E943F72D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_CAN_SET_WAYPOINT", mruby__NETWORK__NETWORK_CAN_SET_WAYPOINT, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xB309EBEA797E001F", mruby__NETWORK___0xB309EBEA797E001F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x26F07DD83A5F7F98", mruby__NETWORK___0x26F07DD83A5F7F98, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_HAS_HEADSET", mruby__NETWORK__NETWORK_HAS_HEADSET, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x7D395EA61622E116", mruby__NETWORK___0x7D395EA61622E116, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xC0D2AF00BCC234CA", mruby__NETWORK___0xC0D2AF00BCC234CA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_GAMER_HAS_HEADSET", mruby__NETWORK__NETWORK_GAMER_HAS_HEADSET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_AM_I_MUTED_BY_GAMER", mruby__NETWORK__NETWORK_AM_I_MUTED_BY_GAMER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_GAMER_BLOCKED_BY_ME", mruby__NETWORK__NETWORK_IS_GAMER_BLOCKED_BY_ME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_AM_I_BLOCKED_BY_GAMER", mruby__NETWORK__NETWORK_AM_I_BLOCKED_BY_GAMER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xB57A49545BA53CE7", mruby__NETWORK___0xB57A49545BA53CE7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xCCA4318E1AB03F1F", mruby__NETWORK___0xCCA4318E1AB03F1F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x07DD29D5E22763F1", mruby__NETWORK___0x07DD29D5E22763F1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x135F9B7B7ADD2185", mruby__NETWORK___0x135F9B7B7ADD2185, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_PLAYER_TALKING", mruby__NETWORK__NETWORK_IS_PLAYER_TALKING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_PLAYER_HAS_HEADSET", mruby__NETWORK__NETWORK_PLAYER_HAS_HEADSET, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_PLAYER_MUTED_BY_ME", mruby__NETWORK__NETWORK_IS_PLAYER_MUTED_BY_ME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_AM_I_MUTED_BY_PLAYER", mruby__NETWORK__NETWORK_AM_I_MUTED_BY_PLAYER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_IS_PLAYER_BLOCKED_BY_ME", mruby__NETWORK__NETWORK_IS_PLAYER_BLOCKED_BY_ME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_AM_I_BLOCKED_BY_PLAYER", mruby__NETWORK__NETWORK_AM_I_BLOCKED_BY_PLAYER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_GET_PLAYER_LOUDNESS", mruby__NETWORK__NETWORK_GET_PLAYER_LOUDNESS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_SET_TALKER_PROXIMITY", mruby__NETWORK__NETWORK_SET_TALKER_PROXIMITY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_GET_TALKER_PROXIMITY", mruby__NETWORK__NETWORK_GET_TALKER_PROXIMITY, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_SET_VOICE_ACTIVE", mruby__NETWORK__NETWORK_SET_VOICE_ACTIVE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xCFEB46DCD7D8D5EB", mruby__NETWORK___0xCFEB46DCD7D8D5EB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xAF66059A131AA269", mruby__NETWORK___0xAF66059A131AA269, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_SET_TEAM_ONLY_CHAT", mruby__NETWORK__NETWORK_SET_TEAM_ONLY_CHAT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x6F697A66CE78674E", mruby__NETWORK___0x6F697A66CE78674E, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_SET_OVERRIDE_SPECTATOR_MODE", mruby__NETWORK__NETWORK_SET_OVERRIDE_SPECTATOR_MODE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x3C5C1E2C2FF814B1", mruby__NETWORK___0x3C5C1E2C2FF814B1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x9D7AFCBF21C51712", mruby__NETWORK___0x9D7AFCBF21C51712, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xF46A1E03E8755980", mruby__NETWORK___0xF46A1E03E8755980, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x6A5D89D7769A40D8", mruby__NETWORK___0x6A5D89D7769A40D8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x3039AE5AD2C9C0C4", mruby__NETWORK___0x3039AE5AD2C9C0C4, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x97DD4C5944CC2E6A", mruby__NETWORK___0x97DD4C5944CC2E6A, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x57B192B4D4AD23D5", mruby__NETWORK___0x57B192B4D4AD23D5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xDDF73E2B1FEC5AB4", mruby__NETWORK___0xDDF73E2B1FEC5AB4, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x0FF2862B61A58AF9", mruby__NETWORK___0x0FF2862B61A58AF9, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_SET_VOICE_CHANNEL", mruby__NETWORK__NETWORK_SET_VOICE_CHANNEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xE036A705F989E049", mruby__NETWORK___0xE036A705F989E049, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "IS_NETWORK_VEHICLE_BEEN_DAMAGED_BY_ANY_OBJECT", mruby__NETWORK__IS_NETWORK_VEHICLE_BEEN_DAMAGED_BY_ANY_OBJECT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "_0xF03755696450470C", mruby__NETWORK___0xF03755696450470C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x5E3AA4CA2B6FB0EE", mruby__NETWORK___0x5E3AA4CA2B6FB0EE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xCA575C391FEA25CC", mruby__NETWORK___0xCA575C391FEA25CC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_NETWORK_IS_TEXT_CHAT_ACTIVE", mruby__NETWORK___NETWORK_IS_TEXT_CHAT_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME", mruby__NETWORK__SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_SET_FRIENDLY_FIRE_OPTION", mruby__NETWORK__NETWORK_SET_FRIENDLY_FIRE_OPTION, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_SET_RICH_PRESENCE", mruby__NETWORK__NETWORK_SET_RICH_PRESENCE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_network, "_0x3E200C2BCF4164EB", mruby__NETWORK___0x3E200C2BCF4164EB, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x5ED0356A0CE3A34F", mruby__NETWORK___0x5ED0356A0CE3A34F, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x9769F811D1785B03", mruby__NETWORK___0x9769F811D1785B03, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_network, "_0xBF22E0F32968E967", mruby__NETWORK___0xBF22E0F32968E967, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x715135F4B82AC90D", mruby__NETWORK___0x715135F4B82AC90D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_NETWORK_PLAYER_IS_IN_CLAN", mruby__NETWORK___NETWORK_PLAYER_IS_IN_CLAN, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x7543BB439F63792B", mruby__NETWORK___0x7543BB439F63792B, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x1F471B79ACC90BEF", mruby__NETWORK___0x1F471B79ACC90BEF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_CLAN_GET_MEMBERSHIP_DESC", mruby__NETWORK__NETWORK_CLAN_GET_MEMBERSHIP_DESC, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_CLAN_DOWNLOAD_MEMBERSHIP", mruby__NETWORK__NETWORK_CLAN_DOWNLOAD_MEMBERSHIP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING", mruby__NETWORK__NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xB3F64A6A91432477", mruby__NETWORK___0xB3F64A6A91432477, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE", mruby__NETWORK__NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_CLAN_GET_MEMBERSHIP_COUNT", mruby__NETWORK__NETWORK_CLAN_GET_MEMBERSHIP_COUNT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_CLAN_GET_MEMBERSHIP_VALID", mruby__NETWORK__NETWORK_CLAN_GET_MEMBERSHIP_VALID, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_CLAN_JOIN", mruby__NETWORK__NETWORK_CLAN_JOIN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xC32EA7A2F6CA7557", mruby__NETWORK___0xC32EA7A2F6CA7557, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x13518FF1C6B28938", mruby__NETWORK___0x13518FF1C6B28938, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x113E6E3E50E286B0", mruby__NETWORK___0x113E6E3E50E286B0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x9AA46BADAD0E27ED", mruby__NETWORK___0x9AA46BADAD0E27ED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x042E4B70B93E6054", mruby__NETWORK___0x042E4B70B93E6054, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_GET_PRIMARY_CLAN_DATA_START", mruby__NETWORK__NETWORK_GET_PRIMARY_CLAN_DATA_START, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0xB5074DB804E28CE7", mruby__NETWORK___0xB5074DB804E28CE7, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x5B4F04F19376A0BA", mruby__NETWORK___0x5B4F04F19376A0BA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "SET_NETWORK_ID_CAN_MIGRATE", mruby__NETWORK__SET_NETWORK_ID_CAN_MIGRATE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES", mruby__NETWORK__SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0xA8A024587329F36A", mruby__NETWORK___0xA8A024587329F36A, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "NETWORK_SET_ENTITY_CAN_BLEND", mruby__NETWORK__NETWORK_SET_ENTITY_CAN_BLEND, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0xF1CA12B18AEF5298", mruby__NETWORK___0xF1CA12B18AEF5298, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "SET_NETWORK_ID_VISIBLE_IN_CUTSCENE", mruby__NETWORK__SET_NETWORK_ID_VISIBLE_IN_CUTSCENE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "_0xAAA553E7DD28A457", mruby__NETWORK___0xAAA553E7DD28A457, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x3FA36981311FA4FF", mruby__NETWORK___0x3FA36981311FA4FF, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0xA1607996431332DF", mruby__NETWORK___0xA1607996431332DF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE", mruby__NETWORK__SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "SET_LOCAL_PLAYER_INVISIBLE_LOCALLY", mruby__NETWORK__SET_LOCAL_PLAYER_INVISIBLE_LOCALLY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "SET_LOCAL_PLAYER_VISIBLE_LOCALLY", mruby__NETWORK__SET_LOCAL_PLAYER_VISIBLE_LOCALLY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "SET_PLAYER_INVISIBLE_LOCALLY", mruby__NETWORK__SET_PLAYER_INVISIBLE_LOCALLY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "SET_PLAYER_VISIBLE_LOCALLY", mruby__NETWORK__SET_PLAYER_VISIBLE_LOCALLY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "FADE_OUT_LOCAL_PLAYER", mruby__NETWORK__FADE_OUT_LOCAL_PLAYER, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_FADE_OUT_ENTITY", mruby__NETWORK__NETWORK_FADE_OUT_ENTITY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "NETWORK_FADE_IN_ENTITY", mruby__NETWORK__NETWORK_FADE_IN_ENTITY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x631DC5DFF4B110E3", mruby__NETWORK___0x631DC5DFF4B110E3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x422F32CC7E56ABAD", mruby__NETWORK___0x422F32CC7E56ABAD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "IS_PLAYER_IN_CUTSCENE", mruby__NETWORK__IS_PLAYER_IN_CUTSCENE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "SET_ENTITY_VISIBLE_IN_CUTSCENE", mruby__NETWORK__SET_ENTITY_VISIBLE_IN_CUTSCENE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "SET_ENTITY_LOCALLY_INVISIBLE", mruby__NETWORK__SET_ENTITY_LOCALLY_INVISIBLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "SET_ENTITY_LOCALLY_VISIBLE", mruby__NETWORK__SET_ENTITY_LOCALLY_VISIBLE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID", mruby__NETWORK__IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID", mruby__NETWORK__ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE", mruby__NETWORK__IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_network, "IS_SPHERE_VISIBLE_TO_PLAYER", mruby__NETWORK__IS_SPHERE_VISIBLE_TO_PLAYER, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_network, "RESERVE_NETWORK_MISSION_OBJECTS", mruby__NETWORK__RESERVE_NETWORK_MISSION_OBJECTS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "RESERVE_NETWORK_MISSION_PEDS", mruby__NETWORK__RESERVE_NETWORK_MISSION_PEDS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "RESERVE_NETWORK_MISSION_VEHICLES", mruby__NETWORK__RESERVE_NETWORK_MISSION_VEHICLES, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "CAN_REGISTER_MISSION_OBJECTS", mruby__NETWORK__CAN_REGISTER_MISSION_OBJECTS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "CAN_REGISTER_MISSION_PEDS", mruby__NETWORK__CAN_REGISTER_MISSION_PEDS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "CAN_REGISTER_MISSION_VEHICLES", mruby__NETWORK__CAN_REGISTER_MISSION_VEHICLES, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "CAN_REGISTER_MISSION_ENTITIES", mruby__NETWORK__CAN_REGISTER_MISSION_ENTITIES, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_network, "GET_NUM_RESERVED_MISSION_OBJECTS", mruby__NETWORK__GET_NUM_RESERVED_MISSION_OBJECTS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "GET_NUM_RESERVED_MISSION_PEDS", mruby__NETWORK__GET_NUM_RESERVED_MISSION_PEDS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "GET_NUM_RESERVED_MISSION_VEHICLES", mruby__NETWORK__GET_NUM_RESERVED_MISSION_VEHICLES, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x12B6281B6C6706C0", mruby__NETWORK___0x12B6281B6C6706C0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xCB215C4B56A7FAE7", mruby__NETWORK___0xCB215C4B56A7FAE7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x0CD9AB83489430EA", mruby__NETWORK___0x0CD9AB83489430EA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xC7BE335216B5EC7C", mruby__NETWORK___0xC7BE335216B5EC7C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x0C1F7D49C39D2289", mruby__NETWORK___0x0C1F7D49C39D2289, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x0AFCE529F69B21FF", mruby__NETWORK___0x0AFCE529F69B21FF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xA72835064DD63E4C", mruby__NETWORK___0xA72835064DD63E4C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "GET_NETWORK_TIME", mruby__NETWORK__GET_NETWORK_TIME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x89023FBBF9200E9F", mruby__NETWORK___0x89023FBBF9200E9F, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x46718ACEEDEAFC84", mruby__NETWORK___0x46718ACEEDEAFC84, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "GET_TIME_OFFSET", mruby__NETWORK__GET_TIME_OFFSET, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_SUBTRACT_B_FROM_A_AND_CHECK_IF_NEGATIVE", mruby__NETWORK___SUBTRACT_B_FROM_A_AND_CHECK_IF_NEGATIVE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_SUBTRACT_A_FROM_B_AND_CHECK_IF_NEGATIVE", mruby__NETWORK___SUBTRACT_A_FROM_B_AND_CHECK_IF_NEGATIVE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_ARE_INTEGERS_EQUAL", mruby__NETWORK___ARE_INTEGERS_EQUAL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "GET_TIME_DIFFERENCE", mruby__NETWORK__GET_TIME_DIFFERENCE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_FORMAT_TIME", mruby__NETWORK___FORMAT_TIME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_GET_POSIX_TIME", mruby__NETWORK___GET_POSIX_TIME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_SET_IN_SPECTATOR_MODE", mruby__NETWORK__NETWORK_SET_IN_SPECTATOR_MODE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x419594E137637120", mruby__NETWORK___0x419594E137637120, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "_0xFC18DB55AE19E046", mruby__NETWORK___0xFC18DB55AE19E046, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x5C707A667DF8B9FA", mruby__NETWORK___0x5C707A667DF8B9FA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_IS_IN_SPECTATOR_MODE", mruby__NETWORK__NETWORK_IS_IN_SPECTATOR_MODE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_SET_IN_MP_CUTSCENE", mruby__NETWORK__NETWORK_SET_IN_MP_CUTSCENE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_IS_IN_MP_CUTSCENE", mruby__NETWORK__NETWORK_IS_IN_MP_CUTSCENE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_PLAYER_IN_MP_CUTSCENE", mruby__NETWORK__NETWORK_IS_PLAYER_IN_MP_CUTSCENE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "SET_NETWORK_VEHICLE_RESPOT_TIMER", mruby__NETWORK__SET_NETWORK_VEHICLE_RESPOT_TIMER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x6274C4712850841E", mruby__NETWORK___0x6274C4712850841E, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR", mruby__NETWORK__USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x21D04D7BC538C146", mruby__NETWORK___0x21D04D7BC538C146, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x77758139EC9B66C7", mruby__NETWORK___0x77758139EC9B66C7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_CREATE_SYNCHRONISED_SCENE", mruby__NETWORK__NETWORK_CREATE_SYNCHRONISED_SCENE, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_network, "NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY", mruby__NETWORK__NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "NETWORK_START_SYNCHRONISED_SCENE", mruby__NETWORK__NETWORK_START_SYNCHRONISED_SCENE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_STOP_SYNCHRONISED_SCENE", mruby__NETWORK__NETWORK_STOP_SYNCHRONISED_SCENE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x02C40BF885C567B6", mruby__NETWORK___0x02C40BF885C567B6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xC9B43A33D09CADA7", mruby__NETWORK___0xC9B43A33D09CADA7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xFB1F9381E80FA13F", mruby__NETWORK___0xFB1F9381E80FA13F, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x5A6FFA2433E2F14C", mruby__NETWORK___0x5A6FFA2433E2F14C, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_network, "_0x4BA92A18502BCA61", mruby__NETWORK___0x4BA92A18502BCA61, MRB_ARGS_REQ(12));
  mrb_define_method(mrb, module_network, "_0x3C891A251567DFCE", mruby__NETWORK___0x3C891A251567DFCE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xFB8F2A6F3DF08CBE", mruby__NETWORK___0xFB8F2A6F3DF08CBE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x6C34F1208B8923FD", mruby__NETWORK___0x6C34F1208B8923FD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x17E0198B3882C2CB", mruby__NETWORK___0x17E0198B3882C2CB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xFB680D403909DC70", mruby__NETWORK___0xFB680D403909DC70, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_END_TUTORIAL_SESSION", mruby__NETWORK__NETWORK_END_TUTORIAL_SESSION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_IS_IN_TUTORIAL_SESSION", mruby__NETWORK__NETWORK_IS_IN_TUTORIAL_SESSION, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xB37E4E6A2388CA7B", mruby__NETWORK___0xB37E4E6A2388CA7B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x35F0B98A8387274D", mruby__NETWORK___0x35F0B98A8387274D, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x3B39236746714134", mruby__NETWORK___0x3B39236746714134, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x9DE986FC9A87C474", mruby__NETWORK___0x9DE986FC9A87C474, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0xBBDF066252829606", mruby__NETWORK___0xBBDF066252829606, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x919B3C98ED8292F9", mruby__NETWORK___0x919B3C98ED8292F9, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_OVERRIDE_CLOCK_TIME", mruby__NETWORK__NETWORK_OVERRIDE_CLOCK_TIME, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "_0xD972DF67326F966E", mruby__NETWORK___0xD972DF67326F966E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xD7C95D322FF57522", mruby__NETWORK___0xD7C95D322FF57522, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_ADD_ENTITY_AREA", mruby__NETWORK__NETWORK_ADD_ENTITY_AREA, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_network, "_0x376C6375BA60293A", mruby__NETWORK___0x376C6375BA60293A, MRB_ARGS_REQ(7));
  mrb_define_method(mrb, module_network, "_0x25B99872D588A101", mruby__NETWORK___0x25B99872D588A101, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_network, "NETWORK_REMOVE_ENTITY_AREA", mruby__NETWORK__NETWORK_REMOVE_ENTITY_AREA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xE64A3CA08DFA37A9", mruby__NETWORK___0xE64A3CA08DFA37A9, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x4DF7CFFF471A7FB1", mruby__NETWORK___0x4DF7CFFF471A7FB1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x4A2D4E8BF4265B0F", mruby__NETWORK___0x4A2D4E8BF4265B0F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x2B1813ABA29016C5", mruby__NETWORK___0x2B1813ABA29016C5, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_DOWNLOAD_BG_SCRIPT_RPF", mruby__NETWORK___DOWNLOAD_BG_SCRIPT_RPF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_HAS_BG_SCRIPT_BEEN_DOWNLOADED", mruby__NETWORK___HAS_BG_SCRIPT_BEEN_DOWNLOADED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_DOWNLOAD_TUNABLES", mruby__NETWORK___DOWNLOAD_TUNABLES, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_HAS_TUNABLES_BEEN_DOWNLOADED", mruby__NETWORK___HAS_TUNABLES_BEEN_DOWNLOADED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x10BD227A753B0D84", mruby__NETWORK___0x10BD227A753B0D84, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_DOES_TUNABLE_EXIST", mruby__NETWORK__NETWORK_DOES_TUNABLE_EXIST, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_ACCESS_TUNABLE_BOOL", mruby__NETWORK__NETWORK_ACCESS_TUNABLE_BOOL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_NETWORK_DOES_TUNABLE_EXIST_HASH", mruby__NETWORK___NETWORK_DOES_TUNABLE_EXIST_HASH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_NETWORK_ACCESS_TUNABLE_BOOL_HASH", mruby__NETWORK___NETWORK_ACCESS_TUNABLE_BOOL_HASH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_NETWORK_ACCESS_TUNABLE_BOOL_HASH_FAIL_VAL", mruby__NETWORK___NETWORK_ACCESS_TUNABLE_BOOL_HASH_FAIL_VAL, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "_0x187382F8A3E0A6C3", mruby__NETWORK___0x187382F8A3E0A6C3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x7DB53B37A2F211A0", mruby__NETWORK___0x7DB53B37A2F211A0, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "NETWORK_RESET_BODY_TRACKER", mruby__NETWORK__NETWORK_RESET_BODY_TRACKER, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xD38C4A6D047C019D", mruby__NETWORK___0xD38C4A6D047C019D, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x2E0BF682CC778D49", mruby__NETWORK___0x2E0BF682CC778D49, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x0EDE326D47CD0F3E", mruby__NETWORK___0x0EDE326D47CD0F3E, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "NETWORK_EXPLODE_VEHICLE", mruby__NETWORK__NETWORK_EXPLODE_VEHICLE, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_network, "_0xCD71A4ECAB22709E", mruby__NETWORK___0xCD71A4ECAB22709E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xA7E30DE9272B6D49", mruby__NETWORK___0xA7E30DE9272B6D49, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_network, "_0x407091CF6037118E", mruby__NETWORK___0x407091CF6037118E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "NETWORK_SET_PROPERTY_ID", mruby__NETWORK__NETWORK_SET_PROPERTY_ID, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xC2B82527CA77053E", mruby__NETWORK___0xC2B82527CA77053E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x367EF5E2F439B4C6", mruby__NETWORK___0x367EF5E2F439B4C6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x94538037EE44F5CF", mruby__NETWORK___0x94538037EE44F5CF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xBD0BE0BFC927EAC1", mruby__NETWORK___0xBD0BE0BFC927EAC1, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x237D5336A9A54108", mruby__NETWORK___0x237D5336A9A54108, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x99B72C7ABDE5C910", mruby__NETWORK___0x99B72C7ABDE5C910, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0xF2EAC213D5EA0623", mruby__NETWORK___0xF2EAC213D5EA0623, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xEA14EEF5B7CD2C30", mruby__NETWORK___0xEA14EEF5B7CD2C30, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xB606E6CC59664972", mruby__NETWORK___0xB606E6CC59664972, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x1D4DC17C38FEAFF0", mruby__NETWORK___0x1D4DC17C38FEAFF0, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x662635855957C411", mruby__NETWORK___0x662635855957C411, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xB4271092CA7EDF48", mruby__NETWORK___0xB4271092CA7EDF48, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xCA94551B50B4932C", mruby__NETWORK___0xCA94551B50B4932C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x2A7776C709904AB0", mruby__NETWORK___0x2A7776C709904AB0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x6F44CBF56D79FAC0", mruby__NETWORK___0x6F44CBF56D79FAC0, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x58C21165F6545892", mruby__NETWORK___0x58C21165F6545892, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x2EAC52B4019E2782", mruby__NETWORK___0x2EAC52B4019E2782, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "SET_STORE_ENABLED", mruby__NETWORK__SET_STORE_ENABLED, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xA2F952104FC6DD4B", mruby__NETWORK___0xA2F952104FC6DD4B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x72D0706CD6CCDB58", mruby__NETWORK___0x72D0706CD6CCDB58, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x722F5D28B61C5EA8", mruby__NETWORK___0x722F5D28B61C5EA8, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x883D79C4071E18B3", mruby__NETWORK___0x883D79C4071E18B3, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x265635150FB0D82E", mruby__NETWORK___0x265635150FB0D82E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x444C4525ECE0A4B9", mruby__NETWORK___0x444C4525ECE0A4B9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x59328EB08C5CEB2B", mruby__NETWORK___0x59328EB08C5CEB2B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xFAE628F1E9ADB239", mruby__NETWORK___0xFAE628F1E9ADB239, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "_0xC64DED7EF0D2FE37", mruby__NETWORK___0xC64DED7EF0D2FE37, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x4C61B39930D045DA", mruby__NETWORK___0x4C61B39930D045DA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x3A3D5568AF297CD5", mruby__NETWORK___0x3A3D5568AF297CD5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x4F18196C8D38768D", mruby__NETWORK___0x4F18196C8D38768D, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xC7ABAC5DE675EE3B", mruby__NETWORK___0xC7ABAC5DE675EE3B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x0B0CC10720653F3B", mruby__NETWORK___0x0B0CC10720653F3B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x8B0C2964BA471961", mruby__NETWORK___0x8B0C2964BA471961, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x88B588B41FF7868E", mruby__NETWORK___0x88B588B41FF7868E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x67FC09BC554A75E5", mruby__NETWORK___0x67FC09BC554A75E5, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x966DD84FB6A46017", mruby__NETWORK___0x966DD84FB6A46017, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x9FEDF86898F100E9", mruby__NETWORK___0x9FEDF86898F100E9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x5E24341A7F92A74B", mruby__NETWORK___0x5E24341A7F92A74B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x24E4E51FC16305F9", mruby__NETWORK___0x24E4E51FC16305F9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xFBC5E768C7A77A6A", mruby__NETWORK___0xFBC5E768C7A77A6A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xC55A0B40FFB1ED23", mruby__NETWORK___0xC55A0B40FFB1ED23, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x17440AA15D1D3739", mruby__NETWORK___0x17440AA15D1D3739, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xE9B99B6853181409", mruby__NETWORK___0xE9B99B6853181409, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xD53ACDBEF24A46E8", mruby__NETWORK___0xD53ACDBEF24A46E8, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x02ADA21EA2F6918F", mruby__NETWORK___0x02ADA21EA2F6918F, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x941E5306BCD7C2C7", mruby__NETWORK___0x941E5306BCD7C2C7, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xC87E740D9F3872CC", mruby__NETWORK___0xC87E740D9F3872CC, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xEDF7F927136C224B", mruby__NETWORK___0xEDF7F927136C224B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xE0A6138401BCB837", mruby__NETWORK___0xE0A6138401BCB837, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x769951E2455E2EB5", mruby__NETWORK___0x769951E2455E2EB5, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x3A17A27D75C74887", mruby__NETWORK___0x3A17A27D75C74887, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xBA96394A0EECFA65", mruby__NETWORK___0xBA96394A0EECFA65, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xCD67AD041A394C9C", mruby__NETWORK___0xCD67AD041A394C9C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x8C8D2739BA44AF0F", mruby__NETWORK___0x8C8D2739BA44AF0F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x703F12425ECA8BF5", mruby__NETWORK___0x703F12425ECA8BF5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xAEAB987727C5A8A4", mruby__NETWORK___0xAEAB987727C5A8A4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xA7BAB11E7C9C6C5A", mruby__NETWORK___0xA7BAB11E7C9C6C5A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x55AA95F481D694D2", mruby__NETWORK___0x55AA95F481D694D2, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xC0173D6BFF4E0348", mruby__NETWORK___0xC0173D6BFF4E0348, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xBF09786A7FCAB582", mruby__NETWORK___0xBF09786A7FCAB582, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x7CF0448787B23758", mruby__NETWORK___0x7CF0448787B23758, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xBAF6BABF9E7CCC13", mruby__NETWORK___0xBAF6BABF9E7CCC13, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x37025B27D9B658B1", mruby__NETWORK___0x37025B27D9B658B1, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x1D610EB0FEA716D9", mruby__NETWORK___0x1D610EB0FEA716D9, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x7FCC39C46C3C03BD", mruby__NETWORK___0x7FCC39C46C3C03BD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x32DD916F3F7C9672", mruby__NETWORK___0x32DD916F3F7C9672, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x3054F114121C21EA", mruby__NETWORK___0x3054F114121C21EA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xA9240A96C74CCA13", mruby__NETWORK___0xA9240A96C74CCA13, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x1ACCFBA3D8DAB2EE", mruby__NETWORK___0x1ACCFBA3D8DAB2EE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x759299C5BB31D2A9", mruby__NETWORK___0x759299C5BB31D2A9, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x87E5C46C187FE0AE", mruby__NETWORK___0x87E5C46C187FE0AE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x4E548C0D7AE39FF9", mruby__NETWORK___0x4E548C0D7AE39FF9, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x70EA8DA57840F9BE", mruby__NETWORK___0x70EA8DA57840F9BE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x993CBE59D350D225", mruby__NETWORK___0x993CBE59D350D225, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x171DF6A0C07FB3DC", mruby__NETWORK___0x171DF6A0C07FB3DC, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x5E0165278F6339EE", mruby__NETWORK___0x5E0165278F6339EE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x2D5DC831176D0114", mruby__NETWORK___0x2D5DC831176D0114, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xEBFA8D50ADDC54C4", mruby__NETWORK___0xEBFA8D50ADDC54C4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x162C23CA83ED0A62", mruby__NETWORK___0x162C23CA83ED0A62, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x40F7E66472DF3E5C", mruby__NETWORK___0x40F7E66472DF3E5C, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x5A34CD9C3C5BEC44", mruby__NETWORK___0x5A34CD9C3C5BEC44, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x68103E2247887242", mruby__NETWORK___0x68103E2247887242, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x45E816772E93A9DB", mruby__NETWORK___0x45E816772E93A9DB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x299EF3C576773506", mruby__NETWORK___0x299EF3C576773506, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x793FF272D5B365F4", mruby__NETWORK___0x793FF272D5B365F4, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x5A0A3D1A186A5508", mruby__NETWORK___0x5A0A3D1A186A5508, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xA1E5E0204A6FCC70", mruby__NETWORK___0xA1E5E0204A6FCC70, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x63B406D7884BFA95", mruby__NETWORK___0x63B406D7884BFA95, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x4D02279C83BE69FE", mruby__NETWORK___0x4D02279C83BE69FE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x597F8DBA9B206FC7", mruby__NETWORK___0x597F8DBA9B206FC7, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x5CAE833B0EE0C500", mruby__NETWORK___0x5CAE833B0EE0C500, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x61A885D3F7CFEE9A", mruby__NETWORK___0x61A885D3F7CFEE9A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xF98DDE0A8ED09323", mruby__NETWORK___0xF98DDE0A8ED09323, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xFD75DABC0957BF33", mruby__NETWORK___0xFD75DABC0957BF33, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xF53E48461B71EECB", mruby__NETWORK___0xF53E48461B71EECB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x098AB65B9ED9A9EC", mruby__NETWORK___0x098AB65B9ED9A9EC, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_network, "_0xDC48473142545431", mruby__NETWORK___0xDC48473142545431, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x0AE1F1653B554AB9", mruby__NETWORK___0x0AE1F1653B554AB9, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x62B9FEC9A11F10EF", mruby__NETWORK___0x62B9FEC9A11F10EF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xA75E2B6733DA5142", mruby__NETWORK___0xA75E2B6733DA5142, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x43865688AE10F0D7", mruby__NETWORK___0x43865688AE10F0D7, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "TEXTURE_DOWNLOAD_RELEASE", mruby__NETWORK__TEXTURE_DOWNLOAD_RELEASE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x5776ED562C134687", mruby__NETWORK___0x5776ED562C134687, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "TEXTURE_DOWNLOAD_GET_NAME", mruby__NETWORK__TEXTURE_DOWNLOAD_GET_NAME, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x8BD6C6DEA20E82C6", mruby__NETWORK___0x8BD6C6DEA20E82C6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x60EDD13EB3AC1FF3", mruby__NETWORK___0x60EDD13EB3AC1FF3, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xEFFB25453D8600F9", mruby__NETWORK___0xEFFB25453D8600F9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x66B59CFFD78467AF", mruby__NETWORK___0x66B59CFFD78467AF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x606E4D3E3CCCF3EB", mruby__NETWORK___0x606E4D3E3CCCF3EB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_IS_ROCKSTAR_BANNED", mruby__NETWORK___IS_ROCKSTAR_BANNED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_IS_SOCIALCLUB_BANNED", mruby__NETWORK___IS_SOCIALCLUB_BANNED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_IS_PLAYER_BANNED", mruby__NETWORK___IS_PLAYER_BANNED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x422D396F80A96547", mruby__NETWORK___0x422D396F80A96547, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xA699957E60D80214", mruby__NETWORK___0xA699957E60D80214, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x593570C289A77688", mruby__NETWORK___0x593570C289A77688, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x91B87C55093DE351", mruby__NETWORK___0x91B87C55093DE351, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x36391F397731595D", mruby__NETWORK___0x36391F397731595D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0xDEB2B99A1AF1A2A6", mruby__NETWORK___0xDEB2B99A1AF1A2A6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x9465E683B12D3F6B", mruby__NETWORK___0x9465E683B12D3F6B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xB7C7F6AD6424304B", mruby__NETWORK___0xB7C7F6AD6424304B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0xC505036A35AFD01B", mruby__NETWORK___0xC505036A35AFD01B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x267C78C60E806B9A", mruby__NETWORK___0x267C78C60E806B9A, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_network, "_0x6BFF5F84102DF80A", mruby__NETWORK___0x6BFF5F84102DF80A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_network, "_0x5C497525F803486B", mruby__NETWORK___0x5C497525F803486B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x6FB7BB3607D27FA2", mruby__NETWORK___0x6FB7BB3607D27FA2, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_network, "_0x45A83257ED02D9BC", mruby__NETWORK___0x45A83257ED02D9BC, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_networkcash, "NETWORK_INITIALIZE_CASH", mruby__NETWORKCASH__NETWORK_INITIALIZE_CASH, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_networkcash, "NETWORK_DELETE_CHARACTER", mruby__NETWORKCASH__NETWORK_DELETE_CHARACTER, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "_0xA921DED15FDF28F5", mruby__NETWORKCASH___0xA921DED15FDF28F5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_networkcash, "_0x1C2473301B1C66BA", mruby__NETWORKCASH___0x1C2473301B1C66BA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_networkcash, "NETWORK_REFUND_CASH", mruby__NETWORKCASH__NETWORK_REFUND_CASH, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_networkcash, "_0x81404F3DC124FE5B", mruby__NETWORKCASH___0x81404F3DC124FE5B, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "_0x3A54E33660DED67F", mruby__NETWORKCASH___0x3A54E33660DED67F, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_networkcash, "NETWORK_EARN_FROM_PICKUP", mruby__NETWORKCASH__NETWORK_EARN_FROM_PICKUP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_networkcash, "_0xA03D4ACE0A3284CE", mruby__NETWORKCASH___0xA03D4ACE0A3284CE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_networkcash, "_0xF514621E8EA463D0", mruby__NETWORKCASH___0xF514621E8EA463D0, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_networkcash, "_0xB1CC1B9EC3007A2A", mruby__NETWORKCASH___0xB1CC1B9EC3007A2A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_networkcash, "NETWORK_EARN_FROM_BETTING", mruby__NETWORKCASH__NETWORK_EARN_FROM_BETTING, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_networkcash, "NETWORK_EARN_FROM_JOB", mruby__NETWORKCASH__NETWORK_EARN_FROM_JOB, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_networkcash, "NETWORK_EARN_FROM_IMPORT_EXPORT", mruby__NETWORKCASH__NETWORK_EARN_FROM_IMPORT_EXPORT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_networkcash, "NETWORK_EARN_FROM_HOLDUPS", mruby__NETWORKCASH__NETWORK_EARN_FROM_HOLDUPS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_networkcash, "NETWORK_EARN_FROM_PROPERTY", mruby__NETWORKCASH__NETWORK_EARN_FROM_PROPERTY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_networkcash, "_0x515B4A22E4D3C6D7", mruby__NETWORKCASH___0x515B4A22E4D3C6D7, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_networkcash, "_0x4337511FA8221D36", mruby__NETWORKCASH___0x4337511FA8221D36, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_networkcash, "NETWORK_EARN_FROM_ROCKSTAR", mruby__NETWORKCASH__NETWORK_EARN_FROM_ROCKSTAR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_networkcash, "NETWORK_EARN_FROM_VEHICLE", mruby__NETWORKCASH__NETWORK_EARN_FROM_VEHICLE, MRB_ARGS_REQ(8));
  mrb_define_method(mrb, module_networkcash, "_0x3F4D00167E41E0AD", mruby__NETWORKCASH___0x3F4D00167E41E0AD, MRB_ARGS_REQ(9));
  mrb_define_method(mrb, module_networkcash, "_HAS_ITEM_BEEN_UNLOCKED", mruby__NETWORKCASH___HAS_ITEM_BEEN_UNLOCKED, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_networkcash, "NETWORK_BUY_ITEM", mruby__NETWORKCASH__NETWORK_BUY_ITEM, MRB_ARGS_REQ(10));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_TAXI", mruby__NETWORKCASH__NETWORK_SPENT_TAXI, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "_0x5FD5ED82CBBE9989", mruby__NETWORKCASH___0x5FD5ED82CBBE9989, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "_0xAFE08B35EC0C9EAE", mruby__NETWORKCASH___0xAFE08B35EC0C9EAE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "_0xEE99784E4467689C", mruby__NETWORKCASH___0xEE99784E4467689C, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_networkcash, "NETWORK_BUY_HEALTHCARE", mruby__NETWORKCASH__NETWORK_BUY_HEALTHCARE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_BUY_AIRSTRIKE", mruby__NETWORKCASH__NETWORK_BUY_AIRSTRIKE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_BUY_HELI_STRIKE", mruby__NETWORKCASH__NETWORK_BUY_HELI_STRIKE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_AMMO_DROP", mruby__NETWORKCASH__NETWORK_SPENT_AMMO_DROP, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_BUY_BOUNTY", mruby__NETWORKCASH__NETWORK_BUY_BOUNTY, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_networkcash, "NETWORK_BUY_PROPERTY", mruby__NETWORKCASH__NETWORK_BUY_PROPERTY, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_HELI_PICKUP", mruby__NETWORKCASH__NETWORK_SPENT_HELI_PICKUP, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_BOAT_PICKUP", mruby__NETWORKCASH__NETWORK_SPENT_BOAT_PICKUP, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_BULL_SHARK", mruby__NETWORKCASH__NETWORK_SPENT_BULL_SHARK, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_CASH_DROP", mruby__NETWORKCASH__NETWORK_SPENT_CASH_DROP, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_HIRE_MUGGER", mruby__NETWORKCASH__NETWORK_SPENT_HIRE_MUGGER, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "_0x995A65F15F581359", mruby__NETWORKCASH___0x995A65F15F581359, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_HIRE_MERCENARY", mruby__NETWORKCASH__NETWORK_SPENT_HIRE_MERCENARY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_BUY_OFFTHERADAR", mruby__NETWORKCASH__NETWORK_SPENT_BUY_OFFTHERADAR, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_BUY_REVEAL_PLAYERS", mruby__NETWORKCASH__NETWORK_SPENT_BUY_REVEAL_PLAYERS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_CARWASH", mruby__NETWORKCASH__NETWORK_SPENT_CARWASH, MRB_ARGS_REQ(5));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_CINEMA", mruby__NETWORKCASH__NETWORK_SPENT_CINEMA, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_TELESCOPE", mruby__NETWORKCASH__NETWORK_SPENT_TELESCOPE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_HOLDUPS", mruby__NETWORKCASH__NETWORK_SPENT_HOLDUPS, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_BUY_PASSIVE_MODE", mruby__NETWORKCASH__NETWORK_SPENT_BUY_PASSIVE_MODE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_PROSTITUTES", mruby__NETWORKCASH__NETWORK_SPENT_PROSTITUTES, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_ARREST_BAIL", mruby__NETWORKCASH__NETWORK_SPENT_ARREST_BAIL, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "NETWORK_SPENT_BOUNTY", mruby__NETWORKCASH__NETWORK_SPENT_BOUNTY, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "_0x6A445B64ED7ABEB5", mruby__NETWORKCASH___0x6A445B64ED7ABEB5, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "_0x20194D48EAEC9A41", mruby__NETWORKCASH___0x20194D48EAEC9A41, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "_0x7C99101F7FCE2EE5", mruby__NETWORKCASH___0x7C99101F7FCE2EE5, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_networkcash, "_0xD5BB406F4E04019F", mruby__NETWORKCASH___0xD5BB406F4E04019F, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "_0x8204DA7934DF3155", mruby__NETWORKCASH___0x8204DA7934DF3155, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "_0x9D26502BB97BFE62", mruby__NETWORKCASH___0x9D26502BB97BFE62, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_networkcash, "_0x8A7B3952DD64D2B5", mruby__NETWORKCASH___0x8A7B3952DD64D2B5, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_networkcash, "_0x7C4FCCD2E4DEB394", mruby__NETWORKCASH___0x7C4FCCD2E4DEB394, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_networkcash, "_0x76EF28DA05EA395A", mruby__NETWORKCASH___0x76EF28DA05EA395A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_networkcash, "_0xA40F9C2623F6A8B5", mruby__NETWORKCASH___0xA40F9C2623F6A8B5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_networkcash, "_0x5CBAD97E059E1B94", mruby__NETWORKCASH___0x5CBAD97E059E1B94, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_networkcash, "_0xA6FA3979BED01B81", mruby__NETWORKCASH___0xA6FA3979BED01B81, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_networkcash, "_0xDC18531D7019A535", mruby__NETWORKCASH___0xDC18531D7019A535, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_networkcash, "NETWORK_CAN_RECEIVE_PLAYER_CASH", mruby__NETWORKCASH__NETWORK_CAN_RECEIVE_PLAYER_CASH, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_networkcash, "_0xF70EFA14FE091429", mruby__NETWORKCASH___0xF70EFA14FE091429, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_networkcash, "_0xE260E0BB9CD995AC", mruby__NETWORKCASH___0xE260E0BB9CD995AC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_networkcash, "_0xE154B48B68EF72BC", mruby__NETWORKCASH___0xE154B48B68EF72BC, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_networkcash, "_0x6FCF8DDEA146C45B", mruby__NETWORKCASH___0x6FCF8DDEA146C45B, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_dlc1, "_0x278F76C3B0A8F109", mruby__DLC1___0x278F76C3B0A8F109, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_dlc1, "INIT_SHOP_PED_COMPONENT", mruby__DLC1__INIT_SHOP_PED_COMPONENT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_dlc1, "INIT_SHOP_PED_PROP", mruby__DLC1__INIT_SHOP_PED_PROP, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_dlc1, "_0x50F457823CE6EB5F", mruby__DLC1___0x50F457823CE6EB5F, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_dlc1, "_GET_NUM_PROPS_FROM_OUTFIT", mruby__DLC1___GET_NUM_PROPS_FROM_OUTFIT, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_dlc1, "GET_HASH_NAME_FOR_COMPONENT", mruby__DLC1__GET_HASH_NAME_FOR_COMPONENT, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_dlc1, "GET_HASH_NAME_FOR_PROP", mruby__DLC1__GET_HASH_NAME_FOR_PROP, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_dlc1, "_0xC17AD0E5752BECDA", mruby__DLC1___0xC17AD0E5752BECDA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_dlc1, "_GET_NUM_FORCED_COMPONENTS", mruby__DLC1___GET_NUM_FORCED_COMPONENTS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_dlc1, "_0x017568A8182D98A6", mruby__DLC1___0x017568A8182D98A6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_dlc1, "_0x341DE7ED1D2A1BFD", mruby__DLC1___0x341DE7ED1D2A1BFD, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_dlc1, "_0xF3FBE2D50A6A8C28", mruby__DLC1___0xF3FBE2D50A6A8C28, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_dlc1, "_0x073CA26B079F956E", mruby__DLC1___0x073CA26B079F956E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_dlc1, "GET_NUM_DLC_VEHICLES", mruby__DLC1__GET_NUM_DLC_VEHICLES, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_dlc1, "GET_DLC_VEHICLE_MODEL", mruby__DLC1__GET_DLC_VEHICLE_MODEL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_dlc1, "GET_DLC_VEHICLE_FLAGS", mruby__DLC1__GET_DLC_VEHICLE_FLAGS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_dlc1, "GET_NUM_DLC_WEAPONS", mruby__DLC1__GET_NUM_DLC_WEAPONS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_dlc1, "GET_NUM_DLC_WEAPON_COMPONENTS", mruby__DLC1__GET_NUM_DLC_WEAPON_COMPONENTS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_dlc1, "_IS_OUTFIT_EMPTY", mruby__DLC1___IS_OUTFIT_EMPTY, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_dlc1, "_0x0564B9FF9631B82C", mruby__DLC1___0x0564B9FF9631B82C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_dlc1, "_0xC098810437312FFF", mruby__DLC1___0xC098810437312FFF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_dlc2, "IS_DLC_PRESENT", mruby__DLC2__IS_DLC_PRESENT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_dlc2, "_0xF2E07819EF1A5289", mruby__DLC2___0xF2E07819EF1A5289, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_dlc2, "_0x9489659372A81585", mruby__DLC2___0x9489659372A81585, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_dlc2, "_0xA213B11DFF526300", mruby__DLC2___0xA213B11DFF526300, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_dlc2, "_0x8D30F648014A92B5", mruby__DLC2___0x8D30F648014A92B5, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_dlc2, "GET_IS_LOADING_SCREEN_ACTIVE", mruby__DLC2__GET_IS_LOADING_SCREEN_ACTIVE, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_dlc2, "_NULLIFY", mruby__DLC2___NULLIFY, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_dlc2, "_LOAD_SP_DLC_MAPS", mruby__DLC2___LOAD_SP_DLC_MAPS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_dlc2, "_LOAD_MP_DLC_MAPS", mruby__DLC2___LOAD_MP_DLC_MAPS, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_system, "WAIT", mruby__SYSTEM__WAIT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_system, "START_NEW_SCRIPT", mruby__SYSTEM__START_NEW_SCRIPT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_system, "_START_NEW_STREAMED_SCRIPT", mruby__SYSTEM___START_NEW_STREAMED_SCRIPT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_system, "TIMERA", mruby__SYSTEM__TIMERA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_system, "TIMERB", mruby__SYSTEM__TIMERB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_system, "SETTIMERA", mruby__SYSTEM__SETTIMERA, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_system, "SETTIMERB", mruby__SYSTEM__SETTIMERB, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_system, "TIMESTEP", mruby__SYSTEM__TIMESTEP, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_system, "SIN", mruby__SYSTEM__SIN, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_system, "COS", mruby__SYSTEM__COS, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_system, "SQRT", mruby__SYSTEM__SQRT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_system, "POW", mruby__SYSTEM__POW, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_system, "VMAG", mruby__SYSTEM__VMAG, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_system, "VMAG2", mruby__SYSTEM__VMAG2, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_system, "VDIST", mruby__SYSTEM__VDIST, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_system, "VDIST2", mruby__SYSTEM__VDIST2, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_system, "SHIFT_LEFT", mruby__SYSTEM__SHIFT_LEFT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_system, "SHIFT_RIGHT", mruby__SYSTEM__SHIFT_RIGHT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_system, "FLOOR", mruby__SYSTEM__FLOOR, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_system, "CEIL", mruby__SYSTEM__CEIL, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_system, "ROUND", mruby__SYSTEM__ROUND, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_system, "TO_FLOAT", mruby__SYSTEM__TO_FLOAT, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_decorator, "DECOR_SET_TIME", mruby__DECORATOR__DECOR_SET_TIME, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_decorator, "DECOR_SET_BOOL", mruby__DECORATOR__DECOR_SET_BOOL, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_decorator, "_DECOR_SET_FLOAT", mruby__DECORATOR___DECOR_SET_FLOAT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_decorator, "DECOR_SET_INT", mruby__DECORATOR__DECOR_SET_INT, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_decorator, "DECOR_GET_BOOL", mruby__DECORATOR__DECOR_GET_BOOL, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_decorator, "_DECOR_GET_FLOAT", mruby__DECORATOR___DECOR_GET_FLOAT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_decorator, "DECOR_GET_INT", mruby__DECORATOR__DECOR_GET_INT, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_decorator, "DECOR_EXIST_ON", mruby__DECORATOR__DECOR_EXIST_ON, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_decorator, "DECOR_REMOVE", mruby__DECORATOR__DECOR_REMOVE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_decorator, "DECOR_REGISTER", mruby__DECORATOR__DECOR_REGISTER, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_decorator, "DECOR_IS_REGISTERED_AS_TYPE", mruby__DECORATOR__DECOR_IS_REGISTERED_AS_TYPE, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_decorator, "DECOR_REGISTER_LOCK", mruby__DECORATOR__DECOR_REGISTER_LOCK, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_decorator, "_0x241FCA5B1AA14F75", mruby__DECORATOR___0x241FCA5B1AA14F75, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_socialclub, "_0x03A93FF1A2CA0864", mruby__SOCIALCLUB___0x03A93FF1A2CA0864, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_socialclub, "_0xBB8EA16ECBC976C4", mruby__SOCIALCLUB___0xBB8EA16ECBC976C4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0x93028F1DB42BFD08", mruby__SOCIALCLUB___0x93028F1DB42BFD08, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0x2C015348CF19CA1D", mruby__SOCIALCLUB___0x2C015348CF19CA1D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0x9A2C8064B6C1E41A", mruby__SOCIALCLUB___0x9A2C8064B6C1E41A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0xF3E31D16CBDCB304", mruby__SOCIALCLUB___0xF3E31D16CBDCB304, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0xDA024BDBD600F44A", mruby__SOCIALCLUB___0xDA024BDBD600F44A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0xA68D3D229F4F3B06", mruby__SOCIALCLUB___0xA68D3D229F4F3B06, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0x6AFD2CD753FEEF83", mruby__SOCIALCLUB___0x6AFD2CD753FEEF83, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0x040ADDCBAFA1018A", mruby__SOCIALCLUB___0x040ADDCBAFA1018A, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_socialclub, "_0x16DA8172459434AA", mruby__SOCIALCLUB___0x16DA8172459434AA, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_socialclub, "_0x44ACA259D67651DB", mruby__SOCIALCLUB___0x44ACA259D67651DB, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_socialclub, "_0x55DF6DB45179236E", mruby__SOCIALCLUB___0x55DF6DB45179236E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_socialclub, "_0x116FB94DC4B79F17", mruby__SOCIALCLUB___0x116FB94DC4B79F17, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0xBFA0A56A817C6C7D", mruby__SOCIALCLUB___0xBFA0A56A817C6C7D, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0xBC1CC91205EC8D6E", mruby__SOCIALCLUB___0xBC1CC91205EC8D6E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_socialclub, "_0xDF649C4E9AFDD788", mruby__SOCIALCLUB___0xDF649C4E9AFDD788, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_socialclub, "_0x1F1E9682483697C7", mruby__SOCIALCLUB___0x1F1E9682483697C7, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_socialclub, "_0x487912FD248EFDDF", mruby__SOCIALCLUB___0x487912FD248EFDDF, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_socialclub, "_0x8416FE4E4629D7D7", mruby__SOCIALCLUB___0x8416FE4E4629D7D7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0x1753344C770358AE", mruby__SOCIALCLUB___0x1753344C770358AE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0x82E4A58BABC15AE7", mruby__SOCIALCLUB___0x82E4A58BABC15AE7, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0x85535ACF97FC0969", mruby__SOCIALCLUB___0x85535ACF97FC0969, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0x930DE22F07B1CCE3", mruby__SOCIALCLUB___0x930DE22F07B1CCE3, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0xF22CA0FD74B80E7A", mruby__SOCIALCLUB___0xF22CA0FD74B80E7A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0x9237E334F6E43156", mruby__SOCIALCLUB___0x9237E334F6E43156, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0x700569DBA175A77C", mruby__SOCIALCLUB___0x700569DBA175A77C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0x1D4446A62D35B0D0", mruby__SOCIALCLUB___0x1D4446A62D35B0D0, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_socialclub, "_0x2E89990DDFF670C3", mruby__SOCIALCLUB___0x2E89990DDFF670C3, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_socialclub, "_0x07C61676E5BB52CD", mruby__SOCIALCLUB___0x07C61676E5BB52CD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0x8147FFF6A718E1AD", mruby__SOCIALCLUB___0x8147FFF6A718E1AD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0xD302E99EDF0449CF", mruby__SOCIALCLUB___0xD302E99EDF0449CF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0x5C4EBFFA98BDB41C", mruby__SOCIALCLUB___0x5C4EBFFA98BDB41C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0xFF8F3A92B75ED67A", mruby__SOCIALCLUB___0xFF8F3A92B75ED67A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_socialclub, "_0x4A7D6E727F941747", mruby__SOCIALCLUB___0x4A7D6E727F941747, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0x6BFB12CE158E3DD4", mruby__SOCIALCLUB___0x6BFB12CE158E3DD4, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_socialclub, "_0xFE4C1D0D3B9CC17E", mruby__SOCIALCLUB___0xFE4C1D0D3B9CC17E, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_socialclub, "_0xD8122C407663B995", mruby__SOCIALCLUB___0xD8122C407663B995, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_socialclub, "_0x3001BEF2FECA3680", mruby__SOCIALCLUB___0x3001BEF2FECA3680, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_socialclub, "_0x675721C9F644D161", mruby__SOCIALCLUB___0x675721C9F644D161, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_socialclub, "_SC_GET_NICKNAME", mruby__SOCIALCLUB___SC_GET_NICKNAME, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_socialclub, "_0x418DC16FAE452C1C", mruby__SOCIALCLUB___0x418DC16FAE452C1C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk, "_RETURN_ZERO", mruby__UNK___RETURN_ZERO, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk, "_0xEF7D17BC6C85264C", mruby__UNK___0xEF7D17BC6C85264C, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk, "_GET_BROADCAST_FINSHED_LOS_SOUND", mruby__UNK___GET_BROADCAST_FINSHED_LOS_SOUND, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk, "_0x8AA464D4E0F6ACCD", mruby__UNK___0x8AA464D4E0F6ACCD, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk, "_0xFC309E94546FCDB5", mruby__UNK___0xFC309E94546FCDB5, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk, "_0xC6DC823253FBB366", mruby__UNK___0xC6DC823253FBB366, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk, "_0xC7E7181C09F33B69", mruby__UNK___0xC7E7181C09F33B69, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk, "_0xFA1E0E893D915215", mruby__UNK___0xFA1E0E893D915215, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk, "_GET_UI_LANGUAGE_ID", mruby__UNK___GET_UI_LANGUAGE_ID, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk, "_GET_USER_LANGUAGE_ID", mruby__UNK___GET_USER_LANGUAGE_ID, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk1, "_0x48621C9FCA3EBD28", mruby__UNK1___0x48621C9FCA3EBD28, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk1, "_0x81CBAE94390F9F89", mruby__UNK1___0x81CBAE94390F9F89, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk1, "_0x13B350B8AD0EEE10", mruby__UNK1___0x13B350B8AD0EEE10, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk1, "_0x293220DA1B46CEBC", mruby__UNK1___0x293220DA1B46CEBC, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_unk1, "_0x208784099002BC30", mruby__UNK1___0x208784099002BC30, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_unk1, "_0xEB2D525B57F42B40", mruby__UNK1___0xEB2D525B57F42B40, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk1, "_0xF854439EFBB3B583", mruby__UNK1___0xF854439EFBB3B583, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk1, "_0xAF66DCEE6609B148", mruby__UNK1___0xAF66DCEE6609B148, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk1, "_0x66972397E0757E7A", mruby__UNK1___0x66972397E0757E7A, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_unk1, "_SET_RECORDING_MODE", mruby__UNK1___SET_RECORDING_MODE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk1, "_STOP_RECORDING_AND_SAVE_CLIP", mruby__UNK1___STOP_RECORDING_AND_SAVE_CLIP, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk1, "_STOP_RECORDING_AND_DISCARD_CLIP", mruby__UNK1___STOP_RECORDING_AND_DISCARD_CLIP, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk1, "_0x644546EC5287471B", mruby__UNK1___0x644546EC5287471B, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk1, "_IS_RECORDING", mruby__UNK1___IS_RECORDING, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk1, "_0xDF4B952F7D381B95", mruby__UNK1___0xDF4B952F7D381B95, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk1, "_0x4282E08174868BE3", mruby__UNK1___0x4282E08174868BE3, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk1, "_0x33D47E85B476ABCD", mruby__UNK1___0x33D47E85B476ABCD, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk2, "_0x7E2BD3EF6C205F09", mruby__UNK2___0x7E2BD3EF6C205F09, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_unk2, "_IS_INTERIOR_RENDERING_DISABLED", mruby__UNK2___IS_INTERIOR_RENDERING_DISABLED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk2, "_0x5AD3932DAEB1E5D3", mruby__UNK2___0x5AD3932DAEB1E5D3, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk2, "_0xE058175F8EAFE79A", mruby__UNK2___0xE058175F8EAFE79A, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk2, "_0x3353D13F09307691", mruby__UNK2___0x3353D13F09307691, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk2, "_0x49DA8145672B2725", mruby__UNK2___0x49DA8145672B2725, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk3, "_NETWORK_SHOP_GET_PRICE", mruby__UNK3___NETWORK_SHOP_GET_PRICE, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_unk3, "_0x3C4487461E9B0DCB", mruby__UNK3___0x3C4487461E9B0DCB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk3, "_0x2B949A1E6AEC8F6A", mruby__UNK3___0x2B949A1E6AEC8F6A, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk3, "_0x85F6C9ABA1DE2BCF", mruby__UNK3___0x85F6C9ABA1DE2BCF, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk3, "_0x357B152EF96C30B6", mruby__UNK3___0x357B152EF96C30B6, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk3, "_0xCF38DAFBB49EDE5E", mruby__UNK3___0xCF38DAFBB49EDE5E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk3, "_0xE3E5A7C64CA2C6ED", mruby__UNK3___0xE3E5A7C64CA2C6ED, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk3, "_0x0395CB47B022E62C", mruby__UNK3___0x0395CB47B022E62C, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk3, "_0xA135AC892A58FC07", mruby__UNK3___0xA135AC892A58FC07, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk3, "_0x72EB7BA9B69BF6AB", mruby__UNK3___0x72EB7BA9B69BF6AB, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk3, "_0x170910093218C8B9", mruby__UNK3___0x170910093218C8B9, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk3, "_0xC13C38E47EA5DF31", mruby__UNK3___0xC13C38E47EA5DF31, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk3, "_0xB24F0944DA203D9E", mruby__UNK3___0xB24F0944DA203D9E, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk3, "_0x74A0FD0688F1EE45", mruby__UNK3___0x74A0FD0688F1EE45, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk3, "_0x2F41D51BA3BCD1F1", mruby__UNK3___0x2F41D51BA3BCD1F1, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk3, "_0x810E8431C0614BF9", mruby__UNK3___0x810E8431C0614BF9, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk3, "_0x35A1B3E1D1315CFA", mruby__UNK3___0x35A1B3E1D1315CFA, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_unk3, "_NETWORK_SHOP_BASKET_START", mruby__UNK3___NETWORK_SHOP_BASKET_START, MRB_ARGS_REQ(4));
  mrb_define_method(mrb, module_unk3, "_0xA65568121DF2EA26", mruby__UNK3___0xA65568121DF2EA26, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk3, "_0xF30980718C8ED876", mruby__UNK3___0xF30980718C8ED876, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_unk3, "_0x27F76CC6C55AD30E", mruby__UNK3___0x27F76CC6C55AD30E, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk3, "_0x39BE7CEA8D9CC8E6", mruby__UNK3___0x39BE7CEA8D9CC8E6, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk3, "_0x3C5FD37B5499582E", mruby__UNK3___0x3C5FD37B5499582E, MRB_ARGS_REQ(6));
  mrb_define_method(mrb, module_unk3, "_0xE2A99A9B524BEFFF", mruby__UNK3___0xE2A99A9B524BEFFF, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk3, "_0x51F1A8E48C3D2F6D", mruby__UNK3___0x51F1A8E48C3D2F6D, MRB_ARGS_REQ(3));
  mrb_define_method(mrb, module_unk3, "_0x0A6D923DFFC9BD89", mruby__UNK3___0x0A6D923DFFC9BD89, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk3, "_0x112CEF1615A1139F", mruby__UNK3___0x112CEF1615A1139F, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk3, "_0xD47A2C1BA117471D", mruby__UNK3___0xD47A2C1BA117471D, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_unk3, "_0xC2F7FE5309181C7D", mruby__UNK3___0xC2F7FE5309181C7D, MRB_ARGS_REQ(2));
  mrb_define_method(mrb, module_unk3, "_0x23789E777D14CE44", mruby__UNK3___0x23789E777D14CE44, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk3, "_0x350AA5EBC03D3BD2", mruby__UNK3___0x350AA5EBC03D3BD2, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk3, "_0x498C1E05CE5F7877", mruby__UNK3___0x498C1E05CE5F7877, MRB_ARGS_NONE());
  mrb_define_method(mrb, module_unk3, "_0x9507D4271988E1AE", mruby__UNK3___0x9507D4271988E1AE, MRB_ARGS_REQ(1));
  mrb_define_method(mrb, module_unk3, "_GET_GAME_VERSION", mruby__UNK3___GET_GAME_VERSION, MRB_ARGS_NONE());
}

mrb_value mruby__gtav__set_call_limit(mrb_state *mrb, mrb_value self) {
  mrb_int a0;
  mrb_get_args(mrb,"i",&a0);
  if(a0 == -1){
    call_limit_enabled = 0;
  } else {
    call_limit_enabled = 1;
  }
  call_limit = a0;
  return mrb_nil_value();
}

mrb_value mruby__gtav__get_call_limit(mrb_state *mrb, mrb_value self) {
  return mrb_fixnum_value(call_limit);
}

// generated 4879 out of 5180 native functions (301 ungenerated)
